{
  "info": {
    "_postman_id": "b656d441-d385-478a-bdc6-a848e304e1be",
    "name": "APIs with Tests (Work in Progress)",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Consumer APIs",
      "item": [
        {
          "name": "GetByConsumerId",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c1bf3e58-1e43-4ea1-a6d7-41915c407c91",
                "exec": [
                  "try {",
                  "pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "//console.log(req);",
                  "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                  "        if (data.cnsmr_id == null) {",
                  "            console.log(query[5]);",
                  "            pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[5]);",
                  "            pm.expect(JSON.stringify(jsonData.consumerAddress.consumerID)).to.deep.equal(query[5]);",
                  "            if (jsonData.consumerPhones != null) {",
                  "                for (var i = 0; i < (jsonData.consumerPhones.length); i++) {",
                  "                    pm.expect(JSON.stringify(jsonData.consumerPhones[i].consumerID)).to.deep.equal(query[5]);",
                  "                };",
                  "            }",
                  "            if (jsonData.linkedConsumerCount > 0) {",
                  "                console.log(\"linked account - can't verify consumer ID for linked account\")",
                  "            } else {",
                  "                if (jsonData.consumerAccount != null){",
                  "                pm.expect(JSON.stringify(jsonData.consumerAccount.consumerID)).to.deep.equal(query[5]);}",
                  "            }",
                  "            if (jsonData.preDefault != null){",
                  "            pm.expect(JSON.stringify(jsonData.preDefault.consumerID)).to.deep.equal(query[5]);}",
                  "        } else {",
                  "            pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                  "        }",
                  "    });",
                  "",
                  "    pm.test(\"TEST2: Status code Check\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test(\"TEST3: Response Header Checks\", function () {",
                  "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "    });",
                  "",
                  "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                  "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "    });",
                  "",
                  "    var Ajv = require('ajv'),",
                  "        ajv = new Ajv({ logger: console }),",
                  "        schema = {",
                  "    \"required\": [",
                  "        \"consumerID\",",
                  "        \"legacyID\",",
                  "        \"agencyID\",",
                  "        \"title\",",
                  "        \"firstName\",",
                  "        \"lastName\",",
                  "        \"dateOfBirth\",",
                  "        \"email\",",
                  "        \"emailValidityCode\",",
                  "        \"emailValidityValueText\",",
                  "        \"emailConfirmedDate\",",
                  "        \"consumerAddress\",",
                  "        \"consumerPhones\",",
                  "        \"consumerAccount\",",
                  "        \"preDefault\",",
                  "        \"linkedConsumerCount\",",
                  "        \"consumerCallBack\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"consumerID\": {",
                  "            \"$id\": \"#/properties/consumerID\",",
                  "            \"type\": \"integer\"",
                  "        },",
                  "        \"legacyID\": {",
                  "            \"$id\": \"#/properties/legacyID\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"agencyID\": {",
                  "            \"$id\": \"#/properties/agencyID\",",
                  "            \"type\": \"integer\"",
                  "        },",
                  "        \"title\": {",
                  "            \"$id\": \"#/properties/title\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"firstName\": {",
                  "            \"$id\": \"#/properties/firstName\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"lastName\": {",
                  "            \"$id\": \"#/properties/lastName\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"dateOfBirth\": {",
                  "            \"$id\": \"#/properties/dateOfBirth\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"email\": {",
                  "            \"$id\": \"#/properties/email\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"emailValidityCode\": {",
                  "            \"$id\": \"#/properties/emailValidityCode\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"emailValidityValueText\": {",
                  "            \"$id\": \"#/properties/emailValidityValueText\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"emailConfirmedDate\": {",
                  "            \"$id\": \"#/properties/emailConfirmedDate\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"consumerAddress\": {",
                  "            \"required\": [",
                  "                \"consumerID\",",
                  "                \"addressLine1\",",
                  "                \"addressLine2\",",
                  "                \"addressLine3\",",
                  "                \"city\",",
                  "                \"state\",",
                  "                \"county\",",
                  "                \"postCode\",",
                  "                \"country\",",
                  "                \"source\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"consumerID\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/consumerID\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"addressLine1\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/addressLine1\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"addressLine2\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/addressLine2\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"addressLine3\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/addressLine3\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"city\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/city\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"state\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/state\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"county\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/county\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"postCode\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/postCode\",",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"country\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/country\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"source\": {",
                  "                    \"$id\": \"#/properties/consumerAddress/properties/source\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/consumerAddress\",",
                  "            \"type\": \"object\"",
                  "        },",
                  "        \"consumerPhones\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"consumerPhoneID\",",
                  "                    \"consumerID\",",
                  "                    \"number\",",
                  "                    \"sourceCode\",",
                  "                    \"sourceValueText\",",
                  "                    \"statusCode\",",
                  "                    \"statusValueText\",",
                  "                    \"typeCode\",",
                  "                    \"typeValueText\",",
                  "                    \"countryCode\",",
                  "                    \"countryValueText\",",
                  "                    \"softDeleteFlag\",",
                  "                    \"qualityScoreNumber\",",
                  "                    \"consentFlag\",",
                  "                    \"consentDate\",",
                  "                    \"technologyTypeCode\",",
                  "                    \"technologyTypeValueText\",",
                  "                    \"confirmedDate\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"consumerPhoneID\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/consumerPhoneID\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"consumerID\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/consumerID\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"number\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/number\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"sourceCode\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/sourceCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"sourceValueText\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/sourceValueText\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"statusCode\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/statusCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"statusValueText\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/statusValueText\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"typeCode\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/typeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"typeValueText\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/typeValueText\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"countryCode\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/countryCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"countryValueText\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/countryValueText\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"softDeleteFlag\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/softDeleteFlag\",",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"qualityScoreNumber\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/qualityScoreNumber\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"consentFlag\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/consentFlag\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"consentDate\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/consentDate\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"technologyTypeCode\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/technologyTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"technologyTypeValueText\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/technologyTypeValueText\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"confirmedDate\": {",
                  "                        \"$id\": \"#/properties/consumerPhones/items/properties/confirmedDate\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/consumerPhones/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/consumerPhones\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"consumerAccount\": {",
                  "            \"required\": [",
                  "                \"consumerAccountID\",",
                  "                \"consumerID\",",
                  "                \"currentBalance\",",
                  "                \"originalBalance\",",
                  "                \"owner\",",
                  "                \"servicer\",",
                  "                \"consumerAccountIdentifierAgencyId\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"consumerAccountID\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/consumerAccountID\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"consumerID\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/consumerID\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"currentBalance\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/currentBalance\",",
                  "                    \"type\": \"number\"",
                  "                },",
                  "                \"originalBalance\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/originalBalance\",",
                  "                    \"type\": \"number\"",
                  "                },",
                  "                \"owner\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/owner\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"servicer\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/servicer\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"consumerAccountIdentifierAgencyId\": {",
                  "                    \"$id\": \"#/properties/consumerAccount/properties/consumerAccountIdentifierAgencyId\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/consumerAccount\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        },",
                  "        \"preDefault\": {",
                  "            \"required\": [",
                  "                \"consumerID\",",
                  "                \"startArrearsStatus\",",
                  "                \"startArrearsAmount\",",
                  "                \"currentArrearsStatus\",",
                  "                \"currentArrearsAmount\",",
                  "                \"currentDueAmount\",",
                  "                \"isSpecialArrangementFlag\",",
                  "                \"specialArrangementAmount\",",
                  "                \"repaymentPercentage\",",
                  "                \"creditType\",",
                  "                \"isAnniversaryFlag\",",
                  "                \"contractualInstalmentAmount\",",
                  "                \"isActive\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"consumerID\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/consumerID\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"startArrearsStatus\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/startArrearsStatus\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"startArrearsAmount\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/startArrearsAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"currentArrearsStatus\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/currentArrearsStatus\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"currentArrearsAmount\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/currentArrearsAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"currentDueAmount\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/currentDueAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"isSpecialArrangementFlag\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/isSpecialArrangementFlag\",",
                  "                    \"type\": \"boolean\"",
                  "                },",
                  "                \"specialArrangementAmount\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/specialArrangementAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"repaymentPercentage\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/repaymentPercentage\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"creditType\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/creditType\",",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"isAnniversaryFlag\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/isAnniversaryFlag\",",
                  "                    \"type\": \"boolean\"",
                  "                },",
                  "                \"contractualInstalmentAmount\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/contractualInstalmentAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"isActive\": {",
                  "                    \"$id\": \"#/properties/preDefault/properties/isActive\",",
                  "                    \"type\": \"null\"",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/preDefault\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        },",
                  "        \"linkedConsumerCount\": {",
                  "            \"$id\": \"#/properties/linkedConsumerCount\",",
                  "            \"type\": \"integer\"",
                  "        },",
                  "        \"consumerCallBack\": {",
                  "            \"required\": [",
                  "                \"isCallBackOutstanding\",",
                  "                \"callbackRequestTime\",",
                  "                \"phoneNumber\",",
                  "                \"category\",",
                  "                \"reasonForCall\",",
                  "                \"requestDate\",",
                  "                \"requestUserId\",",
                  "                \"isCallBackAllowed\",",
                  "                \"callBackDisallowedReason\",",
                  "                \"actionCode\",",
                  "                \"resultCode\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"isCallBackOutstanding\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/isCallBackOutstanding\",",
                  "                    \"type\": \"boolean\"",
                  "                },",
                  "                \"callbackRequestTime\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/callbackRequestTime\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"phoneNumber\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/phoneNumber\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"category\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/category\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"reasonForCall\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/reasonForCall\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"requestDate\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/requestDate\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"requestUserId\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/requestUserId\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"isCallBackAllowed\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/isCallBackAllowed\",",
                  "                    \"type\": \"boolean\"",
                  "                },",
                  "                \"callBackDisallowedReason\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/callBackDisallowedReason\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"actionCode\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/actionCode\",",
                  "                    \"type\": \"null\"",
                  "                },",
                  "                \"resultCode\": {",
                  "                    \"$id\": \"#/properties/consumerCallBack/properties/resultCode\",",
                  "                    \"type\": \"null\"",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/consumerCallBack\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "    pm.test(\"TEST5: ajv test consumer address\", function () {",
                  "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "    });",
                  "} catch (e){",
                  "    //negative TESTS",
                  "",
                  "pm.test(\"Incorrect field examaple\", function () {",
                  "    var consID = schema.properties.consumerID;",
                  "    var consumerValue = Boolean;",
                  "    pm.expect(consID).to.equal(consumerValue);",
                  "    console.log(jsonData.toString());",
                  "});",
                  "pm.test(\"Check if schemaResponse is empty\", function () {",
                  "    pm.expect(schemaResponse).to.be.empty;",
                  "});",
                  "pm.test(\"Check cnsmr_id variable isn't empty\", function () {",
                  "    pm.expect('cnsmr_id').to.be.empty;",
                  "});",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "218b7a8c-e2cc-49dd-8070-990a6d9904ff",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "//console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "//console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "//console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010, 1, 1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if (tokenTimestamp) {\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "} else { noDate = 1 };\r",
                  "//console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if (!expiresInTime) {\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if ((new Date() - tokenDate) >= expiresInTime || noDate == 1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "            type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "    pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "        let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "    //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "daffcca4-c9b8-4698-a715-c95531a1edc3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "{{baseUrl}}/consumer/GetByConsumerId/:cnsmr_id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "consumer",
                "GetByConsumerId",
                ":cnsmr_id"
              ],
              "variable": [
                {
                  "key": "cnsmr_id",
                  "value": "{{cnsmr_id}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": [
            {
              "id": "2204d5d4-05f6-4f07-9bad-5983562550f6",
              "name": "400 GetByConsumerId (Empty)",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetByLegacyId/"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:56:34 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "2727"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "38894fa1-38b2-4a9e-9c0f-4bae80055cd8",
              "name": "400 GetByConsumerId (string)",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetByLegacyId/kam"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:56:34 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "2727"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "51832244-4085-4a21-88dd-4f5bc96a1a84",
              "name": "200 GetByConsumerId",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetByLegacyId/1013746"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:56:34 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "2727"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"consumerID\": 1593398,\n    \"legacyID\": \"1013746\",\n    \"agencyID\": 1013746,\n    \"title\": null,\n    \"firstName\": \"JBPHAHWF\",\n    \"lastName\": \"WPCRIYN\",\n    \"dateOfBirth\": \"1935-06-04T00:00:00\",\n    \"email\": \"z1593398@cdtest.com\",\n    \"emailValidityCode\": null,\n    \"emailValidityValueText\": \"\",\n    \"emailConfirmedDate\": null,\n    \"consumerAddress\": {\n        \"consumerID\": 1593398,\n        \"addressLine1\": \"my address 1\",\n        \"addressLine2\": \"my address 2\",\n        \"addressLine3\": \"my address 3\",\n        \"city\": \"my city\",\n        \"state\": \"my state\",\n        \"county\": \"my county\",\n        \"postCode\": \"W1A\",\n        \"country\": \"UK\",\n        \"source\": null\n    },\n    \"consumerPhoneNumbers\": [\n        {\n            \"consumerPhoneID\": 3583501,\n            \"consumerID\": 1593398,\n            \"number\": \"01141981542\",\n            \"sourceCode\": 8,\n            \"sourceValueText\": \"RELATEDASSET\",\n            \"statusCode\": 1,\n            \"statusValueText\": \"VALID\",\n            \"typeCode\": 1,\n            \"typeValueText\": \"HOME\",\n            \"countryCode\": 229,\n            \"countryValueText\": \"UK\",\n            \"softDeleteFlag\": \"N\",\n            \"qualityScoreNumber\": 1,\n            \"consentFlag\": null,\n            \"consentDate\": null,\n            \"technologyTypeCode\": null,\n            \"technologyTypeValueText\": \"\",\n            \"confirmedDate\": null\n        },\n        {\n            \"consumerPhoneID\": 3583503,\n            \"consumerID\": 1593398,\n            \"number\": \"01683595419\",\n            \"sourceCode\": 8,\n            \"sourceValueText\": \"RELATEDASSET\",\n            \"statusCode\": 1,\n            \"statusValueText\": \"VALID\",\n            \"typeCode\": 2,\n            \"typeValueText\": \"WORK\",\n            \"countryCode\": 229,\n            \"countryValueText\": \"UK\",\n            \"softDeleteFlag\": \"N\",\n            \"qualityScoreNumber\": 1,\n            \"consentFlag\": null,\n            \"consentDate\": null,\n            \"technologyTypeCode\": null,\n            \"technologyTypeValueText\": \"\",\n            \"confirmedDate\": null\n        },\n        {\n            \"consumerPhoneID\": 3583502,\n            \"consumerID\": 1593398,\n            \"number\": \"07762533405\",\n            \"sourceCode\": 8,\n            \"sourceValueText\": \"RELATEDASSET\",\n            \"statusCode\": 1,\n            \"statusValueText\": \"VALID\",\n            \"typeCode\": 3,\n            \"typeValueText\": \"CELL\",\n            \"countryCode\": 229,\n            \"countryValueText\": \"UK\",\n            \"softDeleteFlag\": \"N\",\n            \"qualityScoreNumber\": 1,\n            \"consentFlag\": null,\n            \"consentDate\": null,\n            \"technologyTypeCode\": null,\n            \"technologyTypeValueText\": \"\",\n            \"confirmedDate\": null\n        }\n    ],\n    \"consumerAccount\": {\n        \"consumerAccountID\": 1576083,\n        \"consumerID\": 1593398,\n        \"currentBalance\": 447.2,\n        \"originalBalance\": 447.2,\n        \"owner\": \"OwnMarln\",\n        \"servicer\": \"ServMarl\",\n        \"consumerAccountIdentifierAgencyId\": 500013549\n    },\n    \"preDefault\": {\n        \"consumerID\": 1593398,\n        \"startArrearsStatus\": null,\n        \"startArrearsAmount\": null,\n        \"currentArrearsStatus\": null,\n        \"currentArrearsAmount\": null,\n        \"currentDueAmount\": null,\n        \"isSpecialArrangementFlag\": false,\n        \"specialArrangementAmount\": null,\n        \"repaymentPercentage\": null,\n        \"creditType\": null,\n        \"isAnniversaryFlag\": false,\n        \"contractualInstalmentAmount\": null,\n        \"isActive\": null\n    },\n    \"linkedConsumerCount\": 1,\n    \"consumerCallBack\": {\n        \"isCallBackOutstanding\": false,\n        \"callbackRequestTime\": \"0001-01-01T00:00:00\",\n        \"phoneNumber\": null,\n        \"category\": null,\n        \"reasonForCall\": null,\n        \"requestDate\": \"0001-01-01T00:00:00\",\n        \"requestUserId\": 0,\n        \"isCallBackAllowed\": false,\n        \"callBackDisallowedReason\": \"Entity.Consumer's assigned Workgroup (Default workgroup) does not have one of the allowed tags (CustOps, PotLegal, Prelegal)\",\n        \"actionCode\": null,\n        \"resultCode\": null\n    }\n}"
            },
            {
              "id": "eef8e7a1-09cd-4ba1-9ddd-fc0efc75e705",
              "name": "GetByConsumerId",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetByLegacyId/{{consumerId}"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:56:34 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "2727"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"consumerID\": 1593398,\n    \"legacyID\": \"1013746\",\n    \"agencyID\": 1013746,\n    \"title\": null,\n    \"firstName\": \"JBPHAHWF\",\n    \"lastName\": \"WPCRIYN\",\n    \"dateOfBirth\": \"1935-06-04T00:00:00\",\n    \"email\": \"z1593398@cdtest.com\",\n    \"emailValidityCode\": null,\n    \"emailValidityValueText\": \"\",\n    \"emailConfirmedDate\": null,\n    \"consumerAddress\": {\n        \"consumerID\": 1593398,\n        \"addressLine1\": \"my address 1\",\n        \"addressLine2\": \"my address 2\",\n        \"addressLine3\": \"my address 3\",\n        \"city\": \"my city\",\n        \"state\": \"my state\",\n        \"county\": \"my county\",\n        \"postCode\": \"W1A\",\n        \"country\": \"UK\",\n        \"source\": null\n    },\n    \"consumerPhoneNumbers\": [\n        {\n            \"consumerPhoneID\": 3583501,\n            \"consumerID\": 1593398,\n            \"number\": \"01141981542\",\n            \"sourceCode\": 8,\n            \"sourceValueText\": \"RELATEDASSET\",\n            \"statusCode\": 1,\n            \"statusValueText\": \"VALID\",\n            \"typeCode\": 1,\n            \"typeValueText\": \"HOME\",\n            \"countryCode\": 229,\n            \"countryValueText\": \"UK\",\n            \"softDeleteFlag\": \"N\",\n            \"qualityScoreNumber\": 1,\n            \"consentFlag\": null,\n            \"consentDate\": null,\n            \"technologyTypeCode\": null,\n            \"technologyTypeValueText\": \"\",\n            \"confirmedDate\": null\n        },\n        {\n            \"consumerPhoneID\": 3583503,\n            \"consumerID\": 1593398,\n            \"number\": \"01683595419\",\n            \"sourceCode\": 8,\n            \"sourceValueText\": \"RELATEDASSET\",\n            \"statusCode\": 1,\n            \"statusValueText\": \"VALID\",\n            \"typeCode\": 2,\n            \"typeValueText\": \"WORK\",\n            \"countryCode\": 229,\n            \"countryValueText\": \"UK\",\n            \"softDeleteFlag\": \"N\",\n            \"qualityScoreNumber\": 1,\n            \"consentFlag\": null,\n            \"consentDate\": null,\n            \"technologyTypeCode\": null,\n            \"technologyTypeValueText\": \"\",\n            \"confirmedDate\": null\n        },\n        {\n            \"consumerPhoneID\": 3583502,\n            \"consumerID\": 1593398,\n            \"number\": \"07762533405\",\n            \"sourceCode\": 8,\n            \"sourceValueText\": \"RELATEDASSET\",\n            \"statusCode\": 1,\n            \"statusValueText\": \"VALID\",\n            \"typeCode\": 3,\n            \"typeValueText\": \"CELL\",\n            \"countryCode\": 229,\n            \"countryValueText\": \"UK\",\n            \"softDeleteFlag\": \"N\",\n            \"qualityScoreNumber\": 1,\n            \"consentFlag\": null,\n            \"consentDate\": null,\n            \"technologyTypeCode\": null,\n            \"technologyTypeValueText\": \"\",\n            \"confirmedDate\": null\n        }\n    ],\n    \"consumerAccount\": {\n        \"consumerAccountID\": 1576083,\n        \"consumerID\": 1593398,\n        \"currentBalance\": 447.2,\n        \"originalBalance\": 447.2,\n        \"owner\": \"OwnMarln\",\n        \"servicer\": \"ServMarl\",\n        \"consumerAccountIdentifierAgencyId\": 500013549\n    },\n    \"preDefault\": {\n        \"consumerID\": 1593398,\n        \"startArrearsStatus\": null,\n        \"startArrearsAmount\": null,\n        \"currentArrearsStatus\": null,\n        \"currentArrearsAmount\": null,\n        \"currentDueAmount\": null,\n        \"isSpecialArrangementFlag\": false,\n        \"specialArrangementAmount\": null,\n        \"repaymentPercentage\": null,\n        \"creditType\": null,\n        \"isAnniversaryFlag\": false,\n        \"contractualInstalmentAmount\": null,\n        \"isActive\": null\n    },\n    \"linkedConsumerCount\": 1,\n    \"consumerCallBack\": {\n        \"isCallBackOutstanding\": false,\n        \"callbackRequestTime\": \"0001-01-01T00:00:00\",\n        \"phoneNumber\": null,\n        \"category\": null,\n        \"reasonForCall\": null,\n        \"requestDate\": \"0001-01-01T00:00:00\",\n        \"requestUserId\": 0,\n        \"isCallBackAllowed\": false,\n        \"callBackDisallowedReason\": \"Entity.Consumer's assigned Workgroup (Default workgroup) does not have one of the allowed tags (CustOps, PotLegal, Prelegal)\",\n        \"actionCode\": null,\n        \"resultCode\": null\n    }\n}"
            }
          ]
        },
        {
          "name": "GetActiveConsumerAccountOwner",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae382c62-20bf-4b88-9f4d-c92b2eaef9b3",
                "exec": [
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "var schemaResponse = {",
                  "                        \"description\": \"Success\",",
                  "                        \"schema\": {",
                  "                            \"uniqueItems\": false,",
                  "                            \"type\": \"array\",",
                  "                            \"items\": {",
                  "                                \"$ref\": \"#/definitions/ConsumerAccountOwner\"",
                  "                            }",
                  "                        }",
                  "};",
                  "var schemaConsumerAO = {",
                  "    \"schema\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"consumerAccountOwnerID\": {",
                  "                    \"format\": \"int64\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"consumerID\": {",
                  "                    \"format\": \"int64\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"legacyID\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"consumerName\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"consumerBirthDate\": {",
                  "                    \"format\": \"date-time\",",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"ownership\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"type\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"attachDate\": {",
                  "                    \"format\": \"date-time\",",
                  "                    \"type\": \"string\"",
                  "                }",
                  "            }",
                  "        }",
                  "};",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "pm.test(\"TEST1: Response Check \", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"TEST5: Response Schema is valid\", function() {",
                  "  pm.expect(tv4.validate(pm.response.json, schemaResponse, true, false)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"TEST7: Consumer Account Owner Schema is valid\", function() {",
                  "    for(var i=0;  i<(pm.response.json.length); i++) {",
                  "        pm.expect(tv4.validate(pm.response.json[i], schemaConsumerAO,true, false)).to.be.true;",
                  "        }",
                  "});",
                  "} else {",
                  "    //Negative TESTS",
                  "}",
                  "pm.test(\"Incorrect field examaple\", function() {",
                  "    var consID = schema.properties.consumerID;",
                  "    var consumerValue = Boolean;",
                  "    pm.expect(consID).to.equal(consumerValue);",
                  "    console.log(jsonData.toString());",
                  "});",
                  "pm.test(\"Check if schemaResponse is empty\", function () {",
                  "     pm.expect(schemaResponse).to.be.empty;",
                  "});",
                  " pm.test(\"Check cnsmr_id variable isn't empty\", function () {",
                  "     pm.expect('cnsmr_id').to.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "bee3d1ce-4042-4e70-a93e-6fee6d383b40",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "//console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "//console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "//console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010, 1, 1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if (tokenTimestamp) {\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "} else { noDate = 1 };\r",
                  "//console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if (!expiresInTime) {\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if ((new Date() - tokenDate) >= expiresInTime || noDate == 1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "            type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "    pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "        let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "    //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ca71f799-9d94-431f-8695-1fb71c5ae780",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "correlation-id",
                "type": "text",
                "value": "TEST-correlation"
              },
              {
                "key": "ocp-apim-subscription-key-south",
                "type": "text",
                "value": "{{subkey-south}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{subkey-west}}"
              },
              {
                "key": "content-type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "origin",
                "value": "postman",
                "type": "text"
              },
              {
                "key": "username",
                "value": "Test-User",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/GetActiveConsumerAccountOwner/:cnsmr_accnt_id",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "GetActiveConsumerAccountOwner",
                ":cnsmr_accnt_id"
              ],
              "variable": [
                {
                  "key": "cnsmr_accnt_id",
                  "value": "4150023",
                  "type": "string"
                }
              ]
            }
          },
          "response": [
            {
              "id": "5a1a9dce-7fd5-4474-864a-4f50a00b77bf",
              "name": "400 GetActiveConsumerAccountOwner (Consumer Account Id < 1)",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/-1"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 09:29:57 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "36"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "Consumer Account Id must be positive"
            },
            {
              "id": "5b474625-ad30-4f9e-9f09-4e10f2655eec",
              "name": "404 GetActiveConsumerAccountOwner",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 09:09:05 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "6110c85d-dc2c-4655-8423-db658f151d9b",
              "name": "200 GetActiveConsumerAccountOwner",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/1663574"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 09:07:32 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "231"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n    {\n        \"consumerAccountOwnerID\": 1663559,\n        \"consumerID\": 1680782,\n        \"legacyID\": \"234567\",\n        \"consumerName\": \"IMRMPHC QLRKAVJ\",\n        \"consumerBirthDate\": \"1939-09-04T00:00:00\",\n        \"ownership\": \"Primary Owner\",\n        \"type\": null,\n        \"attachDate\": \"2013-04-12T19:26:09.133\"\n    }\n]"
            }
          ]
        },
        {
          "name": "GetActiveConsumerAccountOwner Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae382c62-20bf-4b88-9f4d-c92b2eaef9b3",
                "exec": [
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "var schemaResponse = {",
                  "                        \"description\": \"Success\",",
                  "                        \"schema\": {",
                  "                            \"uniqueItems\": false,",
                  "                            \"type\": \"array\",",
                  "                            \"items\": {",
                  "                                \"$ref\": \"#/definitions/ConsumerAccountOwner\"",
                  "                            }",
                  "                        }",
                  "};",
                  "var schemaConsumerAO = {",
                  "    \"schema\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"consumerAccountOwnerID\": {",
                  "                    \"format\": \"int64\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"consumerID\": {",
                  "                    \"format\": \"int64\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"legacyID\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"consumerName\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"consumerBirthDate\": {",
                  "                    \"format\": \"date-time\",",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"ownership\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"type\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"attachDate\": {",
                  "                    \"format\": \"date-time\",",
                  "                    \"type\": \"string\"",
                  "                }",
                  "            }",
                  "        }",
                  "};",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "pm.test(\"TEST1: Response Check \", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"TEST5: Response Schema is valid\", function() {",
                  "  pm.expect(tv4.validate(pm.response.json, schemaResponse, true, false)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"TEST7: Consumer Account Owner Schema is valid\", function() {",
                  "    for(var i=0;  i<(pm.response.json.length); i++) {",
                  "        pm.expect(tv4.validate(pm.response.json[i], schemaConsumerAO,true, false)).to.be.true;",
                  "        }",
                  "});",
                  "} else {",
                  "    //Negative TESTS",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "2e91cce6-a208-4ea1-8cbd-1b12c00e16e5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "correlation-id",
                "type": "text",
                "value": "TEST-correlation"
              },
              {
                "key": "ocp-apim-subscription-key-south",
                "type": "text",
                "value": "{{subkey-south}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{subkey-west}}"
              }
            ],
            "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/{{cnsmr_accnt_id}}"
          },
          "response": [
            {
              "id": "193df673-f48e-4f27-a1cd-5d9be26aa950",
              "name": "400 GetActiveConsumerAccountOwner (Consumer Account Id < 1)",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/-1"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 09:29:57 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "text/plain; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "36"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "Consumer Account Id must be positive"
            },
            {
              "id": "8116f2de-42a5-413d-bc07-18993ca99a87",
              "name": "404 GetActiveConsumerAccountOwner",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 09:09:05 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "ba5b5e40-e23f-4278-a7da-5e5220cd5e03",
              "name": "200 GetActiveConsumerAccountOwner",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  }
                ],
                "url": "{{base-consumer-url}}/GetActiveConsumerAccountOwner/1663574"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 09:07:32 GMT"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "231"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n    {\n        \"consumerAccountOwnerID\": 1663559,\n        \"consumerID\": 1680782,\n        \"legacyID\": \"234567\",\n        \"consumerName\": \"IMRMPHC QLRKAVJ\",\n        \"consumerBirthDate\": \"1939-09-04T00:00:00\",\n        \"ownership\": \"Primary Owner\",\n        \"type\": null,\n        \"attachDate\": \"2013-04-12T19:26:09.133\"\n    }\n]"
            }
          ]
        },
        {
          "name": "SaveConsumerAddressAsync",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "384ac418-155b-460c-b452-9ff01664440a",
                "exec": [
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "console.log(JSON.stringify(pm.response));",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "pm.test(\"TEST1: Response Check \"+pm.response.status, function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Length','0', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "} else {",
                  "    //Negatvie TESTS",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "357230b1-0127-48e4-8c7d-46107b667a92",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "correlation-id",
                "type": "text",
                "value": "TEST-correlation"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{subkey-south}}"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{subkey-west}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerID\": 1583183,\n        \"SecondaryConsumerId\": 0,\n        \"SecondaryConsumerEmail\": \"cabot_auto+user9@outlook.com\",\n        \"AddressLine1\": \"TEST AddLine1\",\n        \"AddressLine2\": \"TEST AddLine2\",\n        \"AddressLine3\": \"TEST AddLine3\",\n        \"City\": \"Test_CT\",\n        \"State\": \"TEST STT\",\n        \"County\": \"Test CNTY\",\n        \"PostCode\": \"TE573ER\",\n        \"Country\": \"VE\",\n        \"Source\": \"UNKNOWN\"\n    },\n    \"UserName\": \"TEST\",\n    \"CorrelationId\": \"TEST-correlation\",\n    \"Operation\": \"SaveConsumerAddressCommand\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/consumer/SaveConsumerAddressAsync"
          },
          "response": [
            {
              "id": "36d8ca10-48de-47d4-ba56-f3565ebbe3a6",
              "name": "400 SaveConsumerAddressAsync (Empty)",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddressAsync"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:50:28 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "804fb6fb-b811-4f06-b86d-9ddd0c8d62fa",
              "name": "200 SaveConsumerAddressAsync",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerAddressID\": 1593398,\n        \"ConsumerID\": 1593398,\n        \"SecondaryConsumerId\": 0,\n        \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\n        \"AddressLine1\": \"my address 1\",\n        \"AddressLine2\": \"my address 2\",\n        \"AddressLine3\": \"my address 3\",\n        \"City\": \"my city\",\n        \"State\": \"my state\",\n        \"County\": \"my county\",\n        \"PostCode\": \"W1A\",\n        \"Country\": \"my country\",\n        \"Source\": \"my source\"\n    },\n    \"UserName\": \"kaml\",\n    \"CorrelationId\": \"my-correlation\",\n    \"Operation\": \"SaveConsumerAddressAsyncCommand\"\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddressAsync"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:50:28 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "f29594f1-cb61-4012-b063-6223a5445e07",
              "name": "400 SaveConsumerAddressAsync (Mal-formed)",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"BADConsumerAddress\": {\r\n        \"ConsumerAddressID\": 1593398,\r\n        \"ConsumerID\": 1593398,\r\n        \"SecondaryConsumerId\": 0,\r\n        \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\r\n        \"AddressLine1\": \"my address 1\",\r\n        \"AddressLine2\": \"my address 2\",\r\n        \"AddressLine3\": \"my address 3\",\r\n        \"City\": \"my city\",\r\n        \"State\": \"my state\",\r\n        \"County\": \"my county\",\r\n        \"PostCode\": \"W1A\",\r\n        \"Country\": \"my country\",\r\n        \"Source\": \"my source\"\r\n    },\r\n    \"UserName\": \"kaml\",\r\n    \"CorrelationId\": \"my-correlation\",\r\n    \"Operation\": \"SaveConsumerAddressAsyncCommand\"\r\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddressAsync"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:50:28 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "ConsumerDPA",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "384ac418-155b-460c-b452-9ff01664440a",
                "exec": [
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "console.log(JSON.stringify(pm.response));",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "pm.test(\"TEST1: Response Check \"+pm.response.status, function () {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Length','0', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "} else {",
                  "    //Negatvie TESTS",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "fb815dd0-bdcf-40af-8d0b-c63f2fe065fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "correlation-id",
                "type": "text",
                "value": "TEST-correlation"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "tgherkar",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"reference\": 12345668476,\r\n  \"telephone\": 7886565684,\r\n  \"postcode\": \"ME19 4DZ\",\r\n  \"dateOfBirth\": \"1999-08-29T00:00:00.000Z\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/dpa/consumer"
          },
          "response": [
            {
              "id": "095d1dd1-05b0-4e8d-aa1e-1bc64fbe9294",
              "name": "200 SaveConsumerAddressAsync",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerAddressID\": 1593398,\n        \"ConsumerID\": 1593398,\n        \"SecondaryConsumerId\": 0,\n        \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\n        \"AddressLine1\": \"my address 1\",\n        \"AddressLine2\": \"my address 2\",\n        \"AddressLine3\": \"my address 3\",\n        \"City\": \"my city\",\n        \"State\": \"my state\",\n        \"County\": \"my county\",\n        \"PostCode\": \"W1A\",\n        \"Country\": \"my country\",\n        \"Source\": \"my source\"\n    },\n    \"UserName\": \"kaml\",\n    \"CorrelationId\": \"my-correlation\",\n    \"Operation\": \"SaveConsumerAddressAsyncCommand\"\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddressAsync"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:50:28 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "9cb139a0-f1b3-4f4a-8765-dc75eff60599",
              "name": "400 SaveConsumerAddressAsync (Mal-formed)",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n    \"BADConsumerAddress\": {\r\n        \"ConsumerAddressID\": 1593398,\r\n        \"ConsumerID\": 1593398,\r\n        \"SecondaryConsumerId\": 0,\r\n        \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\r\n        \"AddressLine1\": \"my address 1\",\r\n        \"AddressLine2\": \"my address 2\",\r\n        \"AddressLine3\": \"my address 3\",\r\n        \"City\": \"my city\",\r\n        \"State\": \"my state\",\r\n        \"County\": \"my county\",\r\n        \"PostCode\": \"W1A\",\r\n        \"Country\": \"my country\",\r\n        \"Source\": \"my source\"\r\n    },\r\n    \"UserName\": \"kaml\",\r\n    \"CorrelationId\": \"my-correlation\",\r\n    \"Operation\": \"SaveConsumerAddressAsyncCommand\"\r\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddressAsync"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:50:28 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "a03a8407-3424-4bb2-a463-4ac7afe7d3c5",
              "name": "400 SaveConsumerAddressAsync (Empty)",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "kam-correlation",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddressAsync"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:50:28 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "SaveConsumerAddress",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4afb812-0f06-436a-a307-c463b5f2bb38",
                "exec": [
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "let expectedCode = 200;",
                  "let RH = pm.response.headers.all();",
                  "var jsonData = pm.response.json();",
                  "var req = JSON.parse(request.data);",
                  "var schemaResponse = {",
                  "        \"description\": \"Success\",",
                  "        \"schema\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"consumerID\": {",
                  "                    \"format\": \"int64\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"addressLine1\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"addressLine2\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"addressLine3\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"city\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"state\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"county\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"postCode\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"country\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"source\": {",
                  "                    \"type\": \"string\"",
                  "                }",
                  "            }",
                  "        }",
                  "};",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "pm.test(\"TEST1: Response Check \" + expectedCode, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: ConsumerID check\", function () {",
                  "    pm.expect(jsonData.consumerID).to.equal(req.ConsumerAddress.ConsumerID);",
                  "});",
                  "",
                  "pm.test(\"TEST3: Field checks against Request\", function () {",
                  "    if (req.ConsumerAddress.postcode !== \"ME194UA\" && req.ConsumerAddress.postcode !== \"BN111QP\" && req.ConsumerAddress.postcode !== \"TF34NT\") {",
                  "        pm.expect(jsonData).to.have.property('consumerID', req.ConsumerAddress.ConsumerID, 'addressLine1', req.ConsumerAddress.addressLine1, 'addressLine2', req.ConsumerAddress.addressLine2, 'addressLine3', req.ConsumerAddress.addressLine3,'city', req.ConsumerAddress.city, 'state', req.ConsumerAddress.state, 'county', req.ConsumerAddress.county,'postcode', req.ConsumerAddress.postcode, 'country', req.ConsumerAddress.coutry,'source', req.ConsumerAddress.ConsumerID);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST5: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"TEST6: Response Schema is valid\", function() {",
                  "  pm.expect(tv4.validate(pm.response.json, schemaResponse, true, false)).to.be.true;",
                  "});",
                  "} else {",
                  "    //Negative Tests",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "638ba503-ab4f-44c1-8d85-7df77dcedc81",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b5d36d5b-2eec-4e13-8ac1-565279b16807",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "correlation-id",
                "type": "text",
                "value": "Test-correlation"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{subkey-south}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{subkey-west}}"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerID\": {{cnsmr_id}},\n        \"SecondaryConsumerId\": {{SecondaryConsumerId}},\n        \"SecondaryConsumerEmail\": \"{{SecondaryConsumerEmail}}\",\n        \"AddressLine1\": \"{{AddressLine1}}\",\n        \"AddressLine2\": \"{{AddressLine2}}\",\n        \"AddressLine3\": \"{{AddressLine3}}\",\n        \"City\": \"{{City}}\",\n        \"State\": \"{{State}}\",\n        \"County\": \"{{County}}\",\n        \"PostCode\": \"{{PostCode}}\",\n        \"Country\": \"{{Country}}\",\n        \"Source\": \"{{Source}}\"\n    },\n    \"UserName\": \"TEST\",\n    \"CorrelationId\": \"TEST-correlation\",\n    \"Operation\": \"SaveConsumerAddressCommand\",\n    \"Origin\": \"Postman\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{base-consumer-url}}/SaveConsumerAddress"
          },
          "response": [
            {
              "id": "6c61066d-6af1-4827-b0e0-0ce8cdffbf07",
              "name": "200 SaveConsumerAddress",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "kam-correlation"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerAddressID\": 1593398,\n        \"ConsumerID\": 1680782,\n        \"SecondaryConsumerId\": 0,\n        \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\n        \"AddressLine1\": \"my address 1\",\n        \"AddressLine2\": \"my address 2\",\n        \"AddressLine3\": \"my address 3\",\n        \"City\": \"my city\",\n        \"State\": \"my state\",\n        \"County\": \"my county\",\n        \"PostCode\": \"W1A\",\n        \"Country\": \"my country\",\n        \"Source\": \"my source\"\n    },\n    \"UserName\": \"kaml\",\n    \"CorrelationId\": \"my-correlation\",\n    \"Operation\": \"SaveConsumerAddressAsyncCommand\"\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddress"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:30:33 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"consumerID\": 1680782,\n    \"addressLine1\": \"my address 1\",\n    \"addressLine2\": \"my address 2\",\n    \"addressLine3\": \"my address 3\",\n    \"city\": \"my city\",\n    \"state\": \"my state\",\n    \"county\": \"my county\",\n    \"postCode\": \"W1A\",\n    \"country\": \"UK\",\n    \"source\": \"UNKNOWN\"\n}"
            },
            {
              "id": "ddb83d51-d4b5-4bf8-91c0-66a229a5d7dd",
              "name": "400 SaveConsumerAddress",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "kam-correlation"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{\r\n  \"ConsumerAddress\": {\r\n    \"ConsumerAddressID\": 1593398,\r\n    \"ConsumerID\": 1680782,\r\n    \"SecondaryConsumerId\": 0,\r\n    \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\r\n    \"AddressLine1\": \"my address 1\",\r\n    \"AddressLine2\": \"my address 2\",\r\n    \"AddressLine3\": \"my address 3\",\r\n    \"City\": \"my city\",\r\n    \"State\": \"my state\",\r\n    \"County\": \"my county\",\r\n    \"PostCode\": \"W1A\",\r\n    \"Country\": \"my country\",\r\n    \"Source\": \"my source\"\r\n  },\r\n  \"UserName\": \"kaml\",\r\n  \"CorrelationId\": \"my-correlation\",\r\n  \"Operation\": \"SaveConsumerAddressAsyncCommand\"\r\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddress"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:30:33 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "Documentation",
          "_postman_id": "13c5ddf6-8d4b-47db-a937-4bb06ee02556",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "text/plain"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "SELECT TOP 10 CAO.cnsmr_id, CAO.cnsmr_accnt_id, CD.cnsmr_addrss_ln_1_txt AS 'AddressLine1', CD.cnsmr_addrss_ln_2_txt AS 'AddressLine2', \r\nCD.cnsmr_addrss_ln_3_txt AS 'AddressLine3', CD.cnsmr_addrss_city_txt AS 'City', CD.cnsmr_addrss_st_txt, CD.cnsmr_addrss_cnty_txt AS 'County', \r\nCD.cnsmr_addrss_pstl_cd_txt AS 'PostCode', RCC.cntry_val_txt AS 'Country', RSC.addrss_src_val_txt AS 'Source', CAO.cnsmr_accnt_ownrs_id, \r\nC.cnsmr_idntfr_lgcy_txt AS 'legacyID'\r\nFROM [crs5_oltp].[dbo].[cnsmr] AS C\r\nLEFT JOIN [dbo].[cnsmr_accnt_ownrs] AS CAO ON CAO.cnsmr_id=C.cnsmr_id\r\nLEFT JOIN [dbo].[cnsmr_addrss] AS CD ON CD.cnsmr_id=C.cnsmr_id\r\nINNER JOIN [dbo].[Ref_cntry_cd] AS RCC ON RCC.cntry_cd=CD.cnsmr_addrss_cntry_cd\r\nINNER JOIN [dbo].[Ref_addrss_src_cd] AS RSC ON RSC.addrss_src_cd=CD.cnsmr_addrss_src_cd\r\n--WHERE C.cnsmr_idntfr_lgcy_txt=940\r\n--WHERE C.cnsmr_id=121321\r\n--WHERE CAO.cnsmr_accnt_id=1572329",
              "options": {
                "raw": {}
              }
            },
            "url": ""
          },
          "response": []
        },
        {
          "name": "SaveConsumerAddress_New",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a4afb812-0f06-436a-a307-c463b5f2bb38",
                "exec": [
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "let expectedCode = 202;",
                  "let RH = pm.response.headers.all();",
                  "var jsonData = pm.response.json();",
                  "var req = JSON.parse(request.data);",
                  "var schemaResponse = {",
                  "        \"description\": \"Success\",",
                  "        \"schema\": {",
                  "            \"type\": \"object\",",
                  "            \"properties\": {",
                  "                \"consumerID\": {",
                  "                    \"format\": \"int64\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"addressLine1\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"addressLine2\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"addressLine3\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"city\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"state\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"county\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"postCode\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"country\": {",
                  "                    \"type\": \"string\"",
                  "                },",
                  "                \"source\": {",
                  "                    \"type\": \"string\"",
                  "                }",
                  "            }",
                  "        }",
                  "};",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "pm.test(\"TEST1: Response Check \" + expectedCode, function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: ConsumerID check\", function () {",
                  "    pm.expect(jsonData.consumerID).to.equal(req.ConsumerAddress.ConsumerID);",
                  "});",
                  "",
                  "pm.test(\"TEST3: Field checks against Request\", function () {",
                  "    if (req.ConsumerAddress.postcode !== \"ME194UA\" && req.ConsumerAddress.postcode !== \"BN111QP\" && req.ConsumerAddress.postcode !== \"TF34NT\") {",
                  "        pm.expect(jsonData).to.have.property('consumerID', req.ConsumerAddress.ConsumerID, 'addressLine1', req.ConsumerAddress.addressLine1, 'addressLine2', req.ConsumerAddress.addressLine2, 'addressLine3', req.ConsumerAddress.addressLine3,'city', req.ConsumerAddress.city, 'state', req.ConsumerAddress.state, 'county', req.ConsumerAddress.county,'postcode', req.ConsumerAddress.postcode, 'country', req.ConsumerAddress.coutry,'source', req.ConsumerAddress.ConsumerID);",
                  "    }",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST5: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "",
                  "pm.test(\"TEST6: Response Schema is valid\", function() {",
                  "  pm.expect(tv4.validate(pm.response.json, schemaResponse, true, false)).to.be.true;",
                  "});",
                  "} else {",
                  "    //Negative Tests",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "638ba503-ab4f-44c1-8d85-7df77dcedc81",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "b8540c0b-e7b1-49b0-8859-165bf58f7481",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "correlation-id",
                "type": "text",
                "value": "Test-correlation"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{subkey-south}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{subkey-west}}"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "postman"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerID\": {{cnsmr_id}},\n        \"AddressLine1\": \"{{AddressLine1}}\",\n        \"AddressLine2\": \"{{AddressLine2}}\",\n        \"AddressLine3\": \"{{AddressLine3}}\",\n        \"City\": \"{{City}}\",\n        \"State\": \"{{State}}\",\n        \"County\": \"{{County}}\",\n        \"PostCode\": \"{{PostCode}}\",\n        \"Country\": \"{{Country}}\",\n        \"Source\": \"{{Source}}\"\n    },\n    \"UserName\": \"TEST\",\n    \"CorrelationId\": \"TEST-correlation\",\n    \"Operation\": \"SaveConsumerAddressCommand\",\n    \"Origin\": \"Postman\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/{{cnsmr_id}}/Address"
          },
          "response": [
            {
              "id": "9d8ef6dc-ca7c-4e68-8b75-13853407e110",
              "name": "200 SaveConsumerAddress",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "kam-correlation"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"ConsumerAddress\": {\n        \"ConsumerAddressID\": 1593398,\n        \"ConsumerID\": 1680782,\n        \"SecondaryConsumerId\": 0,\n        \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\n        \"AddressLine1\": \"my address 1\",\n        \"AddressLine2\": \"my address 2\",\n        \"AddressLine3\": \"my address 3\",\n        \"City\": \"my city\",\n        \"State\": \"my state\",\n        \"County\": \"my county\",\n        \"PostCode\": \"W1A\",\n        \"Country\": \"my country\",\n        \"Source\": \"my source\"\n    },\n    \"UserName\": \"kaml\",\n    \"CorrelationId\": \"my-correlation\",\n    \"Operation\": \"SaveConsumerAddressAsyncCommand\"\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddress"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:30:33 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"consumerID\": 1680782,\n    \"addressLine1\": \"my address 1\",\n    \"addressLine2\": \"my address 2\",\n    \"addressLine3\": \"my address 3\",\n    \"city\": \"my city\",\n    \"state\": \"my state\",\n    \"county\": \"my county\",\n    \"postCode\": \"W1A\",\n    \"country\": \"UK\",\n    \"source\": \"UNKNOWN\"\n}"
            },
            {
              "id": "df80bdcc-8604-42c6-a5ab-7c84f8789558",
              "name": "400 SaveConsumerAddress",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "kam-correlation"
                  },
                  {
                    "key": "ocp-apim-subscription-key-south",
                    "value": "{{subscription-key}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{{\r\n  \"ConsumerAddress\": {\r\n    \"ConsumerAddressID\": 1593398,\r\n    \"ConsumerID\": 1680782,\r\n    \"SecondaryConsumerId\": 0,\r\n    \"SecondaryConsumerEmail\": \"secondary@consumer.mail\",\r\n    \"AddressLine1\": \"my address 1\",\r\n    \"AddressLine2\": \"my address 2\",\r\n    \"AddressLine3\": \"my address 3\",\r\n    \"City\": \"my city\",\r\n    \"State\": \"my state\",\r\n    \"County\": \"my county\",\r\n    \"PostCode\": \"W1A\",\r\n    \"Country\": \"my country\",\r\n    \"Source\": \"my source\"\r\n  },\r\n  \"UserName\": \"kaml\",\r\n  \"CorrelationId\": \"my-correlation\",\r\n  \"Operation\": \"SaveConsumerAddressAsyncCommand\"\r\n}"
                },
                "url": "{{base-consumer-url}}/SaveConsumerAddress"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "plain",
              "header": [
                {
                  "key": "Date",
                  "value": "Fri, 30 Aug 2019 08:30:33 GMT"
                },
                {
                  "key": "Server",
                  "value": "Kestrel"
                },
                {
                  "key": "Content-Length",
                  "value": "0"
                },
                {
                  "key": "Request-Context",
                  "value": "appId=cid-v1:e6d3fb44-2f04-48dd-b4d6-37408e23d95c"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "{{baseUrl}}/sfs/fulldetails",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "980e9326-8dde-452e-bb8a-8f7e37e1760d",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eb3af648-3e5c-4d9c-a0d1-d5c25b86c5a6",
                "exec": [
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "cdd7f6c9-3f3a-49e8-98a6-d282fa380ed9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "LSimpson",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"consumerID\": \"1583206\",\r\n    \"statusCode\": \"Pending\",\r\n    \"copyNotes\": \"null\",\r\n    \"description\": {\r\n        \"value\": \"test add description\"\r\n    },\r\n    \"consumerDetail\": {\r\n        \"numberInHousehold\": \"{{numInHH}}\",\r\n        \"numberOfChildrenUnder16\": \"{{numOfChildU16}}\",\r\n        \"numberOfChildren16To18\": \"{{numOfChild16To18}}\",\r\n        \"numberOfVehicles\": \"{{numOfVehicles}}\",\r\n        \"householdTypeCode\": \"{{numOfVehicles}}\",\r\n        \"residenceStatusCode\": \"{{residenceStatusCode}}\",\r\n        \"employmentStatusCode\": \"{{employmentStatusCode}}\",\r\n        \"repayingDebtTypeCode\": \"{{repayingDebtTypeCode}}\",\r\n        \"outstandingDebt\": \"{{outstandingDebt}}\",\r\n        \"householdContributorCode\": \"{{householdContributorCode}}\",\r\n        \"nameOfEmployer\": \"TestLTD\",\r\n        \"partnersEmploymentStatusCode\": \"{{partEmploymentStatusCode}}\",\r\n        \"houseContributorEmploymentStatusCode\": \"1\",\r\n        \"isInPaidEmployment\": \"{{isPartnerInPaidEmployment}}\",\r\n        \"isPartnerInPaidEmployment\": \"false\",\r\n        \"isHouseContributorInPaidEmployment\": \"true\",\r\n        \"propertyValue\": \"{{propertyValue}}\",\r\n        \"mortgageAmount\": \"{{mortgageAmount}}\",\r\n        \"doYouHaveOutstandingDebt\": \"true\",\r\n        \"doYouReceivePension\": \"false\",\r\n        \"doYouReceiveChildSupport\": \"false\",\r\n        \"doYouReceiveBenefits\": \"false\",\r\n        \"otherDetails\": \"Test Consumer Details\",\r\n        \"doesAnyoneElseProvideIncome\": \"false\",\r\n        \"doHouseContributorsHaveBenefits\": \"false\",\r\n        \"areHouseContributorsInPaydEmployment\": \"false\"\r\n    },\r\n    \"expenditures\": [\r\n        {\r\n            \"frequencyCode\": \"{{expenFreqCode}}\",\r\n            \"notes\": \"Expen Test\",\r\n            \"expenditureGroupCode\": \"{{ExpenGroupCode}}\",\r\n            \"expenditureTypeCode\": \"{{randomExpenTypeCode}}\",\r\n            \"amount\": \"{{expenRandomAmount}}\"\r\n        }\r\n    ],\r\n    \"incomes\": [\r\n        {\r\n            \"amount\": \"220.00\",\r\n            \"frequencyCode\": \"4\",\r\n            \"incomeGroupCode\": \"1\",\r\n            \"incomeTypeCode\": \"1\",\r\n            \"notes\": \"Test Income\"\r\n        },\r\n        {\r\n            \"amount\": \"560.00\",\r\n            \"frequencyCode\": \"4\",\r\n            \"incomeGroupCode\": \"1\",\r\n            \"incomeTypeCode\": \"2\",\r\n            \"notes\": \"Test Income Two\"\r\n        }\r\n    ],\r\n    \"savings\": [\r\n        {\r\n            \"savingTypeCode\": \"1\",\r\n            \"amount\": \"{{savingsAmount}}\",\r\n            \"frequencyCode\": \"{{savingsFreqCode}}\",\r\n            \"notes\": \"Test Savings Amount\"\r\n        }\r\n    ]\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "{{baseUrl}}/sfs/fulldetails",
            "description": "tsetst"
          },
          "response": []
        }
      ],
      "_postman_id": "1d459bc4-5504-4bb7-9b42-5cc8fe81c8b7"
    },
    {
      "name": "WebSite APIs",
      "item": [
        {
          "name": "Done APIs",
          "item": [
            {
              "name": "Get Auth Token",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5d7d7074-230a-484b-8e1e-2a6ac6c026f0",
                    "exec": [
                      "pm.globals.set(\"auth_token\", pm.response.json());",
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response is String\", function () {",
                      "    pm.response.to.have.body();",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "console.log(pm.globals.get(\"auth_token\"));"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "1987b4a9-f517-43c6-9c6b-c405d97ef32b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"username\": \"5548FFD9-DFEF-407B-A7BC-99F8326BD101\",\r\n  \"password\":\"74DB2D64-F683-4A80-9FDD-A3BE3CEC0E8B\"\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/Authenticate"
              },
              "response": []
            },
            {
              "name": "getAccountInformation",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "fd8d4f5c-c30b-4cbb-9e7b-12edd92d257f",
                    "exec": [
                      "console.log(pm.globals.get(\"auth_token\"));",
                      "const eachParamArray = pm.request.url.getQueryString().split('&');",
                      "var ARN = eachParamArray[0].split('=')[1];",
                      "var CPId = eachParamArray[1].split('=')[1];",
                      "var CSId = eachParamArray[2].split('=')[1];",
                      "//console.log(ARN, CPId, CSId);",
                      "if (data.test_polarity == 1 || data.test_polarity == null){",
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response schema check\", function () {",
                      "var schemaResponse = {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"Message\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Errors\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Response\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"CustomerPrimaryId\": {",
                      "                            \"format\": \"int64\",",
                      "                             \"type\": \"integer\"",
                      "                        },",
                      "                        \"CustomerSecondaryId\": {",
                      "                            \"format\": \"int64\",",
                      "                             \"type\": \"integer\"",
                      "                        },",
                      "                        \"CustomerType\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"AccountReferenceNumber\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Title\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"FirstName\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Initial\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Surname\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"MiddleName\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"ClientName\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address1\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address2\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address3\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address4\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"PostCode\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Email\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"DateOfBirth\": {",
                      "                            \"type\": \"string\",",
                      "                            \"format\": \"date-time\"",
                      "                        },",
                      "                        \"AccountBalance\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"OriginalBalance\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"MinimumPayment\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"BusinessAccount\": {",
                      "                            \"type\": \"boolean\"",
                      "                        },",
                      "                        \"AllowCreditCardPayments\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"ContactNumber\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                    }",
                      "                }",
                      "            }",
                      "        }",
                      "    }",
                      "      pm.expect(tv4.validate(pm.response.json(), schemaResponse, true, false)).to.be.true;",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test(\"TEST5: Response value Check\", function() {",
                      "    pm.expect(pm.response.json().Result).to.equal(\"Success\");",
                      "    pm.expect(JSON.stringify(pm.response.json().Response.CustomerPrimaryId)).to.equal(CPId);",
                      "    pm.expect(JSON.stringify(pm.response.json().Response.CustomerSecondaryId)).to.equal(CSId);",
                      "    pm.expect(pm.response.json().Response.AccountReferenceNumber).to.equal(ARN);",
                      "    if (pm.response.json().Response.CustomerSecondaryId == 0) {",
                      "        pm.expect(pm.response.json().Response.CustomerType).to.equal(\"Main\");",
                      "    } else {",
                      "        pm.expect(pm.response.json().Response.CustomerType).to.equal(\"CoSigner\");",
                      "    }",
                      "    pm.expect(pm.response.json().Errors).to.be.null;",
                      "});",
                      "} else {",
                      "    //negative tests",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4f73149c-a3b1-4b0c-b25c-b7bcd884c078",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/getAccountInformation?AccountReferenceNumber={{legacyID}}&CustomerPrimaryId={{cnsmr_id}}&CustomerSecondaryId={{SecondaryConsumerId}}&Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "getAccountInformation"
                  ],
                  "query": [
                    {
                      "key": "AccountReferenceNumber",
                      "value": "{{legacyID}}"
                    },
                    {
                      "key": "CustomerPrimaryId",
                      "value": "{{cnsmr_id}}"
                    },
                    {
                      "key": "CustomerSecondaryId",
                      "value": "{{SecondaryConsumerId}}"
                    },
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getAccountInformationByUserId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "93241225-a921-4265-b0bb-892b433e8de3",
                    "exec": [
                      "if (data.test_polarity == 1 || data.test_polarity == null){",
                      "const eachParamArray = pm.request.url.getQueryString().split('&');",
                      "var UId = eachParamArray[0].split('=')[1];",
                      "var Tok = eachParamArray[1].split('=')[1];",
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response schema check\", function () {",
                      "var schemaResponse = {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"Message\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Errors\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Response\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"CustomerPrimaryId\": {",
                      "                            \"format\": \"int64\",",
                      "                             \"type\": \"integer\"",
                      "                        },",
                      "                        \"CustomerSecondaryId\": {",
                      "                            \"format\": \"int64\",",
                      "                             \"type\": \"integer\"",
                      "                        },",
                      "                        \"CustomerType\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"AccountReferenceNumber\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Title\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"FirstName\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Initial\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Surname\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"MiddleName\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"ClientName\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address1\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address2\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address3\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Address4\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"PostCode\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"Email\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"DateOfBirth\": {",
                      "                            \"type\": \"string\",",
                      "                            \"format\": \"date-time\"",
                      "                        },",
                      "                        \"AccountBalance\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"OriginalBalance\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"MinimumPayment\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"BusinessAccount\": {",
                      "                            \"type\": \"boolean\"",
                      "                        },",
                      "                        \"AllowCreditCardPayments\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"ContactNumber\": {",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                    }",
                      "                }",
                      "            }",
                      "        }",
                      "    }",
                      "      pm.expect(tv4.validate(pm.response.json(), schemaResponse, true, false)).to.be.true;",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "",
                      "pm.test(\"TEST5: Response value Check\", function() {",
                      "    pm.expect(pm.response.json().Result).to.equal(\"Success\");",
                      "    pm.expect(pm.response.json().Errors).to.be.null;",
                      "});",
                      "} else {",
                      "    //negative tests",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "571d792a-3a18-46cc-80bd-e6a70adfa160",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{url}}/api/{{version}}/getAccountInformationByUserId?userId=19&token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "getAccountInformationByUserId"
                  ],
                  "query": [
                    {
                      "key": "userId",
                      "value": "19"
                    },
                    {
                      "key": "token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getValidateAccount",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "36c4015a-fe7a-4283-a3ff-5e45c837f747",
                    "exec": [
                      "if (data.test_polarity==1 || data.test_polarity==null){",
                      "var req=pm.response.json();",
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response is String\", function () {",
                      "    pm.response.to.have.body();",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma', 'Expires', '-1','no-cache', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST5: Response field check\", function () {",
                      "    pm.expect(pm.response.json()).to.have.property('Result','Success', 'Message',null, 'Errors', null);",
                      "    if (data.cnsmr_id==null){",
                      "        pm.expect(JSON.stringify(req.Response.CustomerPrimaryId)).to.equal(pm.globals.get(\"cnsmr_id\"));",
                      "        pm.expect(JSON.stringify(req.Response.CustomerSecondaryId)).to.equal(pm.globals.get(\"SecondaryConsumerId\"));",
                      "    } else {",
                      "        pm.expect(JSON.stringify(req.Response.CustomerPrimaryId)).to.equal(pm.globals.get(\"SecondaryConsumerId\"));",
                      "        pm.expect(JSON.stringify(req.Response.CustomerSecondaryId)).to.equal(data.SecondaryConsumerId);",
                      "    }",
                      "    var respschema = ",
                      "    {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "                \"Result\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Message\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Response\": {",
                      "                    \"type\": \"object\",",
                      "                    \"properties\": {",
                      "                        \"CustomerPrimaryId\": {",
                      "                            \"format\": \"int64\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                            \"CustomerSecondaryId\": {",
                      "                            \"format\": \"int64\",",
                      "                            \"type\": \"integer\"",
                      "                        }",
                      "                    }",
                      "                },",
                      "                \"Errors\": {",
                      "                    \"type\": \"string\"",
                      "                }",
                      "            }",
                      "        }",
                      "    }",
                      "    pm.expect(tv4.validate(pm.response.json(), respschema,true, false)).to.be.true;",
                      "});",
                      "} else {",
                      "    //negative tests",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "23f69381-2238-4d15-a1de-3585e247d096",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "url": {
                  "raw": "{{url}}/api/{{version}}/getValidateAccount?AccountReferenceNumber={{legacyID}}&Initial={{initials}}&Surname={{surname}}&PostCode={{PostCode}}&DateOfBirth={{dob}}&Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "getValidateAccount"
                  ],
                  "query": [
                    {
                      "key": "AccountReferenceNumber",
                      "value": "{{legacyID}}"
                    },
                    {
                      "key": "Initial",
                      "value": "{{initials}}"
                    },
                    {
                      "key": "Surname",
                      "value": "{{surname}}"
                    },
                    {
                      "key": "PostCode",
                      "value": "{{PostCode}}"
                    },
                    {
                      "key": "DateOfBirth",
                      "value": "{{dob}}"
                    },
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postRegisterUser v3.0 (old)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f783066-406e-4a7b-ae8e-716d96e42e71",
                    "exec": [
                      "if (data.test_polarity == 1 || data.test_polarity == null){",
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','', 'Content-Length','');",
                      "});",
                      "pm.test(\"TEST 3: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST4: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "pm.test(\"TEST5: Response schema checks\", function() {",
                      "    var responseSchema = {",
                      "        \"schema\": {",
                      "        \"Result\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"Message\": {",
                      "            type: \"string\"",
                      "        },",
                      "    \"Response\": {",
                      "        type: \"object\",",
                      "            \"properties\": {",
                      "                \"UserId\": {",
                      "                    \"format\": \"int64\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"Password\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Activated\": {",
                      "                    \"type\": \"boolean\"",
                      "                },",
                      "                \"Email\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Role\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Disabled\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "            }",
                      "        }",
                      "    },",
                      "    \"Errors\": {",
                      "        type: \"string\"",
                      "    }",
                      "};",
                      "    pm.expect(tv4.validate(pm.response.json(), responseSchema, true, false)).to.be.true;",
                      "});",
                      "pm.test(\"TEST5: Response field check\", function () {",
                      "    var req = pm.response.json();",
                      "    if (data.cnsmr_id==null){",
                      "        pm.expect(JSON.stringify(req.Response.CustomerPrimaryId)).to.equal(pm.globals.get(\"cnsmr_id\"));",
                      "        pm.expect(JSON.stringify(req.Response.CustomerSecondaryId)).to.equal(pm.globals.get(\"SecondaryConsumerId\"));",
                      "        pm.expect(JSON.stringify(req.Response.Email)).to.equal(pm.globals.get(\"email\"));",
                      "        pm.expect(pm.request.NickName).to.equal(req.Response.NickName);",
                      "    } else {",
                      "        pm.expect(JSON.stringify(req.Response.CustomerPrimaryId)).to.equal(pm.globals.get(\"SecondaryConsumerId\"));",
                      "        pm.expect(JSON.stringify(req.Response.CustomerSecondaryId)).to.equal(data.SecondaryConsumerId);",
                      "        pm.expect((req.Response.Email).to.equal(data.email));",
                      "        pm.expect(pm.request.NickName).to.equal(req.Response.NickName);",
                      "    }",
                      "});",
                      "} else {",
                      "    //negative tests",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4a6dcde2-f63f-4c47-8f08-f7e5a8ef596e",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"AccountReferenceNumber\":\"{{legacyID}}\",\r\n        \"CustomerPrimaryId\":{{cnsmr_id}},\r\n        \"CustomerSecondaryId\":{{SecondaryConsumerId}},\r\n        \"Email\":\"{{email}}\",\r\n        \"Password\":\"Cabot123!\",\r\n        \"ActivationCode\":\"456456456\",\r\n        \"TelephoneNumber\":\"07879548777\",\r\n        \"RegistrationMethod\":\"Website\",\r\n        \"Nickname\": \"Nick\"\r\n\t\t}\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postRegisterUser"
              },
              "response": []
            },
            {
              "name": "postRegisterUser v4.0 (new)",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f783066-406e-4a7b-ae8e-716d96e42e71",
                    "exec": [
                      "if (data.test_polarity == 1 || data.test_polarity == null){",
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','', 'Content-Length','');",
                      "});",
                      "pm.test(\"TEST 3: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST4: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "pm.test(\"TEST5: Response schema checks\", function() {",
                      "    var responseSchema = {",
                      "        \"schema\": {",
                      "        \"Result\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"Message\": {",
                      "            type: \"string\"",
                      "        },",
                      "    \"Response\": {",
                      "        type: \"object\",",
                      "            \"properties\": {",
                      "                \"UserId\": {",
                      "                    \"format\": \"int64\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"Password\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Activated\": {",
                      "                    \"type\": \"boolean\"",
                      "                },",
                      "                \"Email\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Role\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"Disabled\": {",
                      "                    \"type\": \"string\"",
                      "                },",
                      "            }",
                      "        }",
                      "    },",
                      "    \"Errors\": {",
                      "        type: \"string\"",
                      "    }",
                      "};",
                      "    pm.expect(tv4.validate(pm.response.json(), responseSchema, true, false)).to.be.true;",
                      "});",
                      "pm.test(\"TEST5: Response field check\", function () {",
                      "    var req = pm.response.json();",
                      "    if (data.cnsmr_id==null){",
                      "        pm.expect(JSON.stringify(req.Response.CustomerPrimaryId)).to.equal(pm.globals.get(\"cnsmr_id\"));",
                      "        pm.expect(JSON.stringify(req.Response.CustomerSecondaryId)).to.equal(pm.globals.get(\"SecondaryConsumerId\"));",
                      "        pm.expect(JSON.stringify(req.Response.Email)).to.equal(pm.globals.get(\"email\"));",
                      "        pm.expect(pm.request.NickName).to.equal(req.Response.NickName);",
                      "        pm.expect(pm.request.NotificationConsentEMailGiven).to.equal(req.Response.NotificationConsentEMailGiven);",
                      "        pm.expect(pm.request.NotificationConsentSmsGiven).to.equal(req.Response.NotificationConsentSmsGiven);",
                      "    } else {",
                      "        pm.expect(JSON.stringify(req.Response.CustomerPrimaryId)).to.equal(pm.globals.get(\"SecondaryConsumerId\"));",
                      "        pm.expect(JSON.stringify(req.Response.CustomerSecondaryId)).to.equal(data.SecondaryConsumerId);",
                      "        pm.expect((req.Response.Email).to.equal(data.email));",
                      "        pm.expect(pm.request.NickName).to.equal(req.Response.NickName);",
                      "    }",
                      "});",
                      "} else {",
                      "    //negative tests",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "95d130b6-afdc-4f58-af04-8f3ebf6d135f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"AccountReferenceNumber\":\"{{legacyID}}\",\r\n        \"CustomerPrimaryId\":{{cnsmr_id}},\r\n        \"CustomerSecondaryId\":{{SecondaryConsumerId}},\r\n        \"Email\":\"{{email}}\",\r\n        \"Password\":\"Cabot123!\",\r\n        \"ActivationCode\":\"456456456\",\r\n        \"TelephoneNumber\":\"07879548777\",\r\n        \"RegistrationMethod\":\"Website\",\r\n        \"Nickname\": \"Nick\",\r\n        \"NotificationConsentEMailGiven\": true,\r\n        \"NotificationConsentSmsGiven\": false\r\n\t\t}\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postRegisterUser"
              },
              "response": []
            }
          ],
          "_postman_id": "425ca23d-01bc-45ef-b3d3-8ee8ce52c3a1",
          "_postman_isSubFolder": true
        },
        {
          "name": "TriggeredCommsAuthenticationUpdate",
          "item": [
            {
              "name": "postPaymentAuto",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f783066-406e-4a7b-ae8e-716d96e42e71",
                    "exec": [
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Test2: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST 4: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST5: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "",
                      "pm.test(\"TEST6: Response Schema checks\", function() {",
                      "    var responseSchema = {",
                      "    \"schema\": {",
                      "        \"Result\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"Message\": {",
                      "            type: \"string\"",
                      "        },",
                      "        \"Response\": {",
                      "            type: \"integer\"",
                      "        },",
                      "        \"Errors\": {",
                      "            type: \"string\"",
                      "        }",
                      "    }",
                      "};",
                      "pm.expect(tv4.validate(pm.response.json(), responseSchema, true, false)).to.be.true;",
                      "});",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ea380e25-f9ee-4807-a67b-9546f016172f",
                    "exec": [
                      "const datetime = new Date().toISOString().split(\"T\");",
                      "pm.globals.set(\"PaymentAt\", datetime[0]);",
                      "//const time = datetime[1];",
                      "//console.log(time);"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4f6e5871-50fb-47c7-a416-0f32e3314b8c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"AccountReferenceNumber\":{{legacyID}},\r\n        \"CustomerPrimaryId\":{{cnsmr_id}},\r\n        \"CustomerSecondaryId\":{{SecondaryConsumerId}},\r\n        \"PaymentAmount\":\"{{pay_amount}}\",\r\n        \"CardType\": \"{{card_type}}\",\r\n        \"TxtAuthNo\": \"{{TxtAuthNo}}\",\r\n        \"VendorTextCode\": null,\r\n        \"Title\": null,\r\n        \"Name\": null,\r\n        \"FirstName\":\"{{firstname}}\",\r\n        \"Surname\": \"{{surname}}\",\r\n        \"MiddleName\": null,\r\n        \"Address1\": \"{{AddressLine1}}\",\r\n        \"Address2\": \"{{AddressLine2}}\",\r\n        \"Address3\": \"{{County}}\",\r\n        \"Address4\": \"{{Country}}\",\r\n        \"PostCode\": \"{{PostCode}}\",\r\n        \"PhoneNumber\": null,\r\n        \"Email\":\"{{email}}\",\r\n        \"DateOfBirth\": \"{{dob}}\",\r\n        \"PromoCode\": null,\r\n        \"PaymentAt\":\"{{PaymentAt}}\",\r\n        \"SagepayTransactionID\": null,\r\n        \"PaymentBatchId\" : null,\r\n        \"SourceOfFunds\": null,\r\n        \"VendorCode\" : null,\r\n        \"CardNumber\" : null\r\n\t}\r\n}\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/postPayment?Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "postPayment"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postPaymentManual",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f783066-406e-4a7b-ae8e-716d96e42e71",
                    "exec": [
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Test2: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST 4: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST5: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "    var responseSchema = {",
                      "    \"schema\": {",
                      "    \"Result\": {",
                      "        type: \"string\"",
                      "    },",
                      "    \"Message\": {",
                      "        type: \"string\"",
                      "        },",
                      "    \"Response\": {",
                      "        type: \"integer\"",
                      "    },",
                      "    \"Errors\": {",
                      "        type: \"string\"",
                      "    }",
                      "    }",
                      "};",
                      "pm.expect(tv4.validate(pm.response.json(), responseSchema, true, false)).to.be.true;",
                      "",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3602e609-71ba-49fa-abeb-0a40af8e7f4c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"AccountReferenceNumber\":10000,\r\n        \"CustomerPrimaryId\":4346549,\r\n        \"CustomerSecondaryId\":0,\r\n        \"PaymentAmount\":\"18.54\",\r\n        \"CardType\":null,\r\n        \"TxtAuthNo\":\"997793\",\r\n        \"VendorTextCode\":null,\r\n        \"Title\":null,\r\n        \"Name\":null,\r\n        \"FirstName\": \"Luna\",\r\n        \"Surname\":null,\r\n        \"MiddleName\":null,\r\n        \"Address1\":null,\r\n        \"Address2\":null,\r\n        \"Address3\":null,\r\n        \"Address4\":null,\r\n        \"PostCode\":null,\r\n        \"PhoneNumber\":null,\r\n        \"Email\":\"Luna_Plum@Cabot.com\",\r\n        \"DateOfBirth\":null,\r\n        \"PromoCode\":null,\r\n        \"PaymentAt\":\"2019-09-27\",\r\n        \"SagepayTransactionID\": null,\r\n        \"PaymentBatchId\" : null,\r\n        \"SourceOfFunds\": null,\r\n        \"VendorCode\" : null,\r\n        \"CardNumber\" : null\r\n\t}\r\n}\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/postPayment?Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "postPayment"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postPaymentPlanAuto",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad794c58-44ac-4004-af2d-8ad4a530452b",
                    "exec": [
                      "if (data.test_polarity == null || data.test_polarity==1){",
                      "pm.test(\"Test 1: Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST 3: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST4: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "pm.test(\"TEST5: schemaResponse check\", function () {",
                      "var schemaResponse = {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "            \"Message\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Errors\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Response\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "                }",
                      "            }",
                      "        }",
                      "    });",
                      "pm.test(\"TEST6: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"TEST7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "pm.test(\"TEST8: Account Reference Number =  \" + pm.environment.get(\"AccountReferenceNumber\"), function () {",
                      "",
                      "});",
                      "} else {",
                      "    pm.test(\"Test N1: Status code is 500\", function () {",
                      "    pm.response.to.have.status(500);",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2a4c66f6-c363-4f1a-8237-789dd5040c53",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"AccountReferenceNumber\":{{AccountReferenceNumber}},\r\n        \"CustomerPrimaryId\":{{CustomerPrimaryId}},\r\n        \"CustomerSecondaryId\":{{CustomerSecondaryId}},\r\n        \"Amount\":\"{{Amount}}\",\r\n        \"Method\":\"{{Method}}\",\r\n        \"StartDate\": null,\r\n        \"BankName\":\"{{BankName}}\",\r\n        \"AccountName\": null,\r\n        \"AccountNumber\":\"{{AccountNumber}}\",\r\n        \"SortCode\": null,\r\n        \"Frequency\":\"{{Frequency}}\",\r\n        \"ClearedBalance\": null,\r\n        \"PhoneNumber\": null,\r\n        \"Email\":\"{{Email}}\",\r\n        \"PromoCode\": null,\r\n        \"SendNewPaymentCard\": null,\r\n        \"DurationMonths\": null,\r\n        \"SourceOfFunds\": null,\r\n        \"PriorityBillsUpToDate\": null,\r\n        \"SagepayTransactionID\": null,\r\n        \"Authorized\": \"{{Authorized}}\",\r\n        \"Day\": null,\r\n        \"OwnBankAccount\": null,\r\n        \"SingleSignatoryRequired\": null}\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postPaymentPlan"
              },
              "response": []
            },
            {
              "name": "postPaymentPlanManual",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ad794c58-44ac-4004-af2d-8ad4a530452b",
                    "exec": [
                      "pm.test(\"Test 1: Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST 3: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST4: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "pm.test(\"TEST5: schemaResponse check\", function () {",
                      "var schemaResponse = {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "            \"Message\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Errors\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Response\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "                }",
                      "            }",
                      "        }",
                      "    });",
                      "pm.test(\"TEST6: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"TEST7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "707e5dd8-2e37-4a0c-bf2d-aa6005ce473f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"AccountReferenceNumber\": 4293142,\r\n        \"CustomerPrimaryId\": 4273285,\r\n        \"CustomerSecondaryId\": 0,\r\n        \"Amount\":\"11.11\",\r\n        \"Method\":\"Direct Debit\",\r\n        \"StartDate\": null,\r\n        \"BankName\":\"Bank Du Keri\",\r\n        \"AccountName\": null,\r\n        \"AccountNumber\":\"55779911\",\r\n        \"SortCode\": null,\r\n        \"Frequency\":\"Monthly\",\r\n        \"ClearedBalance\": null,\r\n        \"PhoneNumber\": null,\r\n        \"Email\":\"TestNapple@Cabot.com\",\r\n        \"PromoCode\": null,\r\n        \"SendNewPaymentCard\": null,\r\n        \"DurationMonths\": null,\r\n        \"SourceOfFunds\": null,\r\n        \"PriorityBillsUpToDate\": null,\r\n        \"SagepayTransactionID\": null,\r\n        \"Authorized\": \"TRUE\",\r\n        \"Day\": null,\r\n        \"OwnBankAccount\": null,\r\n        \"SingleSignatoryRequired\": null}\r\n}\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/postPaymentPlan?Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "postPaymentPlan"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSettlementOfferAuto",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f783066-406e-4a7b-ae8e-716d96e42e71",
                    "exec": [
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Test2: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST 4: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST5: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "    var responseSchema = {",
                      "    \"schema\": {",
                      "    \"Result\": {",
                      "        type: \"string\"",
                      "    },",
                      "    \"Message\": {",
                      "        type: \"string\"",
                      "        },",
                      "    \"Response\": {",
                      "        type: \"integer\"",
                      "    },",
                      "    \"Errors\": {",
                      "        type: \"string\"",
                      "    }",
                      "    }",
                      "};",
                      "pm.expect(tv4.validate(pm.response.json(), responseSchema, true, false)).to.be.true;",
                      "",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f1f609d6-6cd4-4644-a06c-996d1789a949",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"CustomerPrimaryId\": {{cnsmr_id}},\r\n        \"CustomerSecondaryId\": {{SecondaryConsumerId}},\r\n        \"AccountReferenceNumber\": {{legacyID}},\r\n        \"PaymentDate\": null,\r\n        \"PaymentAmount\": {{pay_amount}},\r\n        \"PhoneNumber\": null,\r\n        \"Email\": \"{{Email}}\",\r\n        \"ReasonForSettlement\": null,\r\n        \"SourceOfSettlementAmount\": null,\r\n        \"PromoCode\": null,\r\n        \"PriorityBillsUpToDate \": null\r\n\t}\r\n}\r\n\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postSettlementOffer"
              },
              "response": []
            },
            {
              "name": "postSettlementOfferManual",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7f783066-406e-4a7b-ae8e-716d96e42e71",
                    "exec": [
                      "pm.test(\"TEST1: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Test2: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST 4: Response time is less than 1000ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"TEST5: Response fields checks\", function() {",
                      "   pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "   pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "   pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "    var responseSchema = {",
                      "    \"schema\": {",
                      "    \"Result\": {",
                      "        type: \"string\"",
                      "    },",
                      "    \"Message\": {",
                      "        type: \"string\"",
                      "        },",
                      "    \"Response\": {",
                      "        type: \"integer\"",
                      "    },",
                      "    \"Errors\": {",
                      "        type: \"string\"",
                      "    }",
                      "    }",
                      "};",
                      "pm.expect(tv4.validate(pm.response.json(), responseSchema, true, false)).to.be.true;",
                      "",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "de81e72e-3357-4eac-9d51-171ca820fa81",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\"CustomerPrimaryId\": 4424332,\r\n        \"CustomerSecondaryId\": 0,\r\n        \"AccountReferenceNumber\": 4466606,\r\n        \"PaymentDate\": null,\r\n        \"PaymentAmount\": 10.50,\r\n        \"PhoneNumber\": null,\r\n        \"Email\": \"TestRaul@cabot.com\",\r\n        \"ReasonForSettlement\": null,\r\n        \"SourceOfSettlementAmount\": null,\r\n        \"PromoCode\": null,\r\n        \"PriorityBillsUpToDate \": null }\r\n}\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/postSettlementOffer?Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "postSettlementOffer"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSettlementPaymentPlan(CC)Auto",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aea4b26a-ca44-4554-9117-74d3854de774",
                    "exec": [
                      "pm.test(\"TEST1: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST2: Response time is less that 1000ms\", function (){",
                      "   pm.expect(pm.response.responseTime).to.be.below(1000); ",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response field checks\", function() {",
                      "     pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "     pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "     pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "pm.test(\"TEST4: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//\u201cAccountReferenceNumber\u201d, \u201cCustomerPrimaryId\u201d, \u201cMethod\u201d, \u201cInstalmentDate1\u201d, \u201cInstalmentAmount1\u201d,     \u201cSettlementPercentage\u201d fields are mandatory ",
                      "",
                      "pm.test(\"TEST5: Response schema check\", function () {",
                      "var schemaResponse = {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "            \"Message\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Errors\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Response\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "                }",
                      "            }",
                      "        }",
                      "    });",
                      "pm.test(\"Test6: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7bd6982f-780b-42d9-82ea-3ca5469d0525",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\r\n        \"CustomerPrimaryId\": {{CustomerPrimaryId}},\r\n        \"CustomerSecondaryId\": {{CustomerSecondaryId}},\r\n        \"AccountReferenceNumber\": {{AccountReferenceNumber}},\r\n        \"InstalmentDate1\" : \"{{InstalmentDate1}}\",\t\t\r\n        \"InstalmentAmount1\": {{InstalmentAmount1}},\r\n        \"InstalmentDate2\" : \"{{InstalmentDate2}}\",\r\n        \"InstalmentAmount2\": {{InstalmentAmount2}},\r\n        \"InstalmentDate3\" : \"{{InstalmentDate3}}\",\r\n        \"InstalmentAmount3\": {{InstalmentAmount3}},\r\n        \"PhoneNumber\": {{PhoneNumber}},\r\n        \"Email\": \"{{Email}}\",\r\n        \"ReasonForSettlement\": \"{{ReasonForSettlement}}\",\r\n        \"BankName\": \"{{BankName}}\",\r\n        \"AccountName\": \"{{AccountName}}\",\r\n        \"AccountNumber\": \"{{AccountNumber}}\",\r\n        \"SortCode\": \"{{SortCode}}\",\r\n        \"SettlementPercentage\" : {{SettlementPercentage}},\r\n        \"Method\": \"{{Method}}\",\r\n        \"SourceOfSettlementAmount\": \"{{SourceOfSettlementAmount}}\",\r\n        \"PriorityBillsUpToDate\": {{PriorityBillsUpToDate}},\r\n        \"Pending\": {{Pending}},\r\n        \"Authorized\": {{Authorized}},\r\n        \"SFTransferred\": {{SFTransferred}},\r\n        \"PaymentPlanHistoryId\": null,\r\n        \"SagepayTransactionID\": \"{{SagepayTransactionID}}\",\r\n        \"OwnBankAccount\": {{OwnBankAccount}},\r\n        \"SingleSignatoryRequired\": {{SingleSignatoryRequired}} \r\n       }\r\n}\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postSettlementPaymentPlan"
              },
              "response": []
            },
            {
              "name": "postSettlementPaymentPlan(CC)Manual",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "aea4b26a-ca44-4554-9117-74d3854de774",
                    "exec": [
                      "pm.test(\"TEST1: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');",
                      "});",
                      "pm.test(\"TEST2: Response time is less that 1000ms\", function (){",
                      "   pm.expect(pm.response.responseTime).to.be.below(1000); ",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response field checks\", function() {",
                      "     pm.expect(pm.response.json().Result).to.be.equal(\"Success\");",
                      "     pm.expect(pm.response.json().Message).to.be.equal(null);",
                      "     pm.expect(pm.response.json().Errors).to.be.equal(null);",
                      "});",
                      "pm.test(\"TEST4: Status check\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "//\u201cAccountReferenceNumber\u201d, \u201cCustomerPrimaryId\u201d, \u201cMethod\u201d, \u201cInstalmentDate1\u201d, \u201cInstalmentAmount1\u201d,     \u201cSettlementPercentage\u201d fields are mandatory ",
                      "",
                      "pm.test(\"TEST5: Response schema check\", function () {",
                      "var schemaResponse = {",
                      "        \"description\": \"Success\",",
                      "        \"schema\": {",
                      "            \"type\": \"object\",",
                      "            \"properties\": {",
                      "            \"Message\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Errors\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "            \"Response\": {",
                      "                \"type\": \"string\"",
                      "                },",
                      "                }",
                      "            }",
                      "        }",
                      "    });",
                      "pm.test(\"Test6: Resonse includes results\", function (){",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); ",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");",
                      "});",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {",
                      "    pm.response.to.not.be.error;",
                      "    pm.response.to.be.json;",
                      "});",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "41cea069-e27a-4992-a927-4e5f30d9c40d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\r\n        \"CustomerPrimaryId\": 2156096,\r\n        \"CustomerSecondaryId\": 0,\r\n        \"AccountReferenceNumber\": 1655797,\r\n        \"InstalmentDate1\" : \"27/10/2019\",\t\t\r\n        \"InstalmentAmount1\": 70.57,\r\n        \"InstalmentDate2\" : \"2019-11-27\",\r\n        \"InstalmentAmount2\": 70.57,\r\n        \"InstalmentDate3\" : \"2019-12-27\",\r\n        \"InstalmentAmount3\": 70.57,\r\n        \"PhoneNumber\": 07792661138,\r\n        \"Email\": \"cabot_auto+user443@outlook.com\",\r\n        \"ReasonForSettlement\": \"Happiness\",\r\n        \"BankName\" : \"Bank du Keri\",\r\n        \"AccountName\" : \"Testing\",\r\n        \"AccountNumber\" : \"55779911\",\r\n        \"SortCode\": \"20-00-00\",\r\n        \"SettlementPercentage\" : 97,\r\n        \"Method\" :\"Credit card\",\r\n        \"SourceOfSettlementAmount\": \"Gifted\",\r\n        \"PriorityBillsUpToDate\": true,\r\n        \"Pending\": true,\r\n        \"Authorized\" : true,\r\n        \"SFTransferred\" : false,\r\n        \"PaymentPlanHistoryId\" : null,\r\n        \"SagepayTransactionID\" : \"39AA1A05-804E-7A3D-743F-5B7F2A8D11F0\",\r\n        \"OwnBankAccount\": 1,\r\n        \"SingleSignatoryRequired\": 1 \r\n       }\r\n}\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postSettlementPaymentPlan"
              },
              "response": []
            },
            {
              "name": "postSettlementPaymentPlan(DD)Auto",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0895322-a58e-451e-97f8-ea889dfb589c",
                    "exec": [
                      "//\u201cAccountReferenceNumber\u201d, \u201cCustomerPrimaryId\u201d, \u201cMethod\u201d, \u201cInstalmentDate1\u201d, \u201cInstalmentAmount1\u201d,     \u201cSettlementPercentage\u201d fields are mandatory \r",
                      "//If Method <> \u2018Direct Debit\u2019 then SagepayTransactionID is mandatory.\r",
                      "//If Method = \u2018Direct Debit\u2019 then \u201cAccountName\u201d, \u201cAccountNumber\u201d, \u201cSortCode\u201d are mandatory.\r",
                      "\r",
                      "pm.test(\"TEST1: Response Header Checks\", function() {\r",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');\r",
                      "});\r",
                      "pm.test(\"TEST2: Response time is less that 1000ms\", function (){\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(1000); \r",
                      "});\r",
                      "\r",
                      "pm.test(\"TEST3: Response field checks\", function() {\r",
                      "     pm.expect(pm.response.json().Result).to.be.equal(\"Success\");\r",
                      "     pm.expect(pm.response.json().Message).to.be.equal(null);\r",
                      "     pm.expect(pm.response.json().Errors).to.be.equal(null);\r",
                      "});\r",
                      "pm.test(\"TEST4: Status check\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"TEST5: Response schema check\", function () {\r",
                      "var schemaResponse = {\r",
                      "        \"description\": \"Success\",\r",
                      "        \"schema\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "            \"Message\": {\r",
                      "                \"type\": \"string\"\r",
                      "                },\r",
                      "            \"Errors\": {\r",
                      "                \"type\": \"string\"\r",
                      "                },\r",
                      "            \"Response\": {\r",
                      "                \"type\": \"string\"\r",
                      "                },\r",
                      "                }\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "pm.test(\"Test6: Resonse includes results\", function (){\r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); \r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");\r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");\r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");\r",
                      "});\r",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {\r",
                      "    pm.response.to.not.be.error;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "212fced0-b0ff-4102-8ca6-1487b9fbbfd9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\r\n        \"CustomerPrimaryId\": {{CustomerPrimaryId}},\r\n        \"CustomerSecondaryId\": {{CustomerSecondaryId}},\r\n        \"AccountReferenceNumber\": {{AccountReferenceNumber}},\r\n        \"InstalmentDate1\" : \"{{InstalmentDate1}}\",        \r\n        \"InstalmentAmount1\": {{InstalmentAmount1}},\r\n        \"InstalmentDate2\" : \"{{InstalmentDate2}}\",\r\n        \"InstalmentAmount2\": {{InstalmentAmount2}},\r\n        \"InstalmentDate3\" : \"{{InstalmentDate3}}\",\r\n        \"InstalmentAmount3\": {{InstalmentAmount3}},\r\n        \"PhoneNumber\": {{PhoneNumber}},\r\n        \"Email\": \"{{Email}}\",\r\n        \"ReasonForSettlement\": \"{{ReasonForSettlement}}\",\r\n        \"BankName\": \"{{BankName}}\",\r\n        \"AccountName\": \"{{AccountName}}\",\r\n        \"AccountNumber\": \"{{AccountNumber}}\",\r\n        \"SortCode\": \"{{SortCode}}\",\r\n        \"SettlementPercentage\" : {{SettlementPercentage}},\r\n        \"Method\": \"{{Method}}\",\r\n        \"SourceOfSettlementAmount\": \"{{SourceOfSettlementAmount}}\",\r\n        \"PriorityBillsUpToDate\": {{PriorityBillsUpToDate}},\r\n        \"Pending\": {{Pending}},\r\n        \"Authorized\": {{Authorized}},\r\n        \"SFTransferred\": {{SFTransferred}},\r\n        \"PaymentPlanHistoryId\": {{PaymentPlanHistoryId}},\r\n        \"SagepayTransactionID\": \"{{SagepayTransactionID}}\",\r\n        \"OwnBankAccount\": {{OwnBankAccount}},\r\n        \"SingleSignatoryRequired\": {{SingleSignatoryRequired}}\r\n       }\r\n}\r\n\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postSettlementPaymentPlan"
              },
              "response": []
            },
            {
              "name": "postSettlementPaymentPlan(DD)Manual",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c0895322-a58e-451e-97f8-ea889dfb589c",
                    "exec": [
                      "//\u201cAccountReferenceNumber\u201d, \u201cCustomerPrimaryId\u201d, \u201cMethod\u201d, \u201cInstalmentDate1\u201d, \u201cInstalmentAmount1\u201d,     \u201cSettlementPercentage\u201d fields are mandatory \r",
                      "//If Method <> \u2018Direct Debit\u2019 then SagepayTransactionID is mandatory.\r",
                      "//If Method = \u2018Direct Debit\u2019 then \u201cAccountName\u201d, \u201cAccountNumber\u201d, \u201cSortCode\u201d are mandatory.\r",
                      "\r",
                      "pm.test(\"TEST1: Response Header Checks\", function() {\r",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Cache-Control', 'no-cache','Pragma','no-cache', 'Expires', '-1', 'Content-Security-Policy', 'script-src \\'self\\'', 'X-Content-Type-Options','nosniff', 'Connection', 'close', 'Via','HTTPS/1.1 rcs-prx-p-01.cfsi.local','Date', '', 'Request-Context', '', 'Age','');\r",
                      "});\r",
                      "pm.test(\"TEST2: Response time is less that 1000ms\", function (){\r",
                      "   pm.expect(pm.response.responseTime).to.be.below(1000); \r",
                      "});\r",
                      "\r",
                      "pm.test(\"TEST3: Response field checks\", function() {\r",
                      "     pm.expect(pm.response.json().Result).to.be.equal(\"Success\");\r",
                      "     pm.expect(pm.response.json().Message).to.be.equal(null);\r",
                      "     pm.expect(pm.response.json().Errors).to.be.equal(null);\r",
                      "});\r",
                      "pm.test(\"TEST4: Status check\", function () {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "pm.test(\"TEST5: Response schema check\", function () {\r",
                      "var schemaResponse = {\r",
                      "        \"description\": \"Success\",\r",
                      "        \"schema\": {\r",
                      "            \"type\": \"object\",\r",
                      "            \"properties\": {\r",
                      "            \"Message\": {\r",
                      "                \"type\": \"string\"\r",
                      "                },\r",
                      "            \"Errors\": {\r",
                      "                \"type\": \"string\"\r",
                      "                },\r",
                      "            \"Response\": {\r",
                      "                \"type\": \"string\"\r",
                      "                },\r",
                      "                }\r",
                      "            }\r",
                      "        }\r",
                      "    });\r",
                      "pm.test(\"Test6: Resonse includes results\", function (){\r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Result\"); \r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Message\");\r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Response\");\r",
                      "   pm.expect(pm.response.json()).to.include.keys(\"Errors\");\r",
                      "});\r",
                      "pm.test(\"Test 7: Response should be ok to process\", function () {\r",
                      "    pm.response.to.not.be.error;\r",
                      "    pm.response.to.be.json;\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "2af8a904-cddc-4a6f-a687-711dd2eefff1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\r\n        \"CustomerPrimaryId\": 4424362,\r\n        \"CustomerSecondaryId\": 0,\r\n        \"AccountReferenceNumber\": 4466638,\r\n        \"InstalmentDate1\" : \"2019-09-27\",                   \r\n        \"InstalmentAmount1\": 98,\r\n        \"InstalmentDate2\" : null,\r\n        \"InstalmentAmount2\": null,\r\n        \"InstalmentDate3\" :null,\r\n        \"InstalmentAmount3\": null,\r\n        \"PhoneNumber\": null,\r\n        \"Email\": null,\r\n        \"ReasonForSettlement\": null,\r\n        \"BankName\" : null,\r\n        \"AccountName\" : \"Testing\",\r\n        \"AccountNumber\" : 55779911,\r\n        \"SortCode\": \"20-00-00\",\r\n        \"SettlementPercentage\" : 98,\r\n        \"Method\" :\"Direct Debit\",\r\n        \"SourceOfSettlementAmount\": null,\r\n        \"PriorityBillsUpToDate\":true,\r\n        \"Pending\" : null,\r\n        \"Authorized\" : true,\r\n        \"SFTransferred\" : null,\r\n        \"PaymentPlanHistoryId\" : null,\r\n        \"SagepayTransactionID\" : null,\r\n        \"OwnBankAccount\": null,\r\n        \"SingleSignatoryRequired\": null \r\n       }\r\n}\r\n\r\n",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postSettlementPaymentPlan"
              },
              "response": []
            }
          ],
          "_postman_id": "dc7ea108-31d1-4f13-ae52-89f2280002b8",
          "_postman_isSubFolder": true
        },
        {
          "name": "To Do APIs",
          "item": [
            {
              "name": "postActivateUser",
              "_postman_id": "98fb1e67-1ee3-44e4-9e8e-bbbe4527bae6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1MzUwNTM2OSwiZXhwIjoxNTUzNTA3MTY5LCJpYXQiOjE1NTM1MDUzNjksImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.h9hqe4n6IVjaNR6sYQE6UGmS5lz1WGDvNJGsfNeMUBo"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"rMVpAo9dEqOoDEK4RJwVhXk25UCbRTf9\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/postActivateUser?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "postActivateUser"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postValidateUser",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "23dd0de3-1803-4ce1-a619-31bea6be0619",
                    "exec": [
                      "/*{",
                      "\t\"Token\":\"{{Token}}\",",
                      "\t\"Data\":{",
                      "\t\t\"Token\": \"59FFD8E8-7CF7-4008-84A7-846ABECF0B9C\",",
                      "\t\t\"DateOfBirth\" : \"{{dob}}\",",
                      "\t\t\"Email\": \"{{email}}\",",
                      "\t\t\"Surname\": \"{{surname}}\",",
                      "\t    \"PostCode\": \"{{PostCode}}\",",
                      "\t    \"AccountReferenceNumber\": \"{{legacyID}}\",",
                      "\t    \"Initial\":\"{{initials}}\",",
                      "\t\t\"SelectedClient\":\"\"",
                      "",
                      "\t}",
                      "}*/"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "28321f00-277a-40f8-83c9-c0dc98b7312d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postValidateUser"
              },
              "response": []
            },
            {
              "name": "getCMSUsers",
              "_postman_id": "c1e784e1-8f8c-4d4b-8ba1-1b3fa4cb1326",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/getCMSUsers?Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "getCMSUsers"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "type": "text",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "getUserByEmail",
              "_postman_id": "fed43e45-960a-4c17-a46d-899cdd20497c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "GET",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/getUserByEmail?Email=ssmithson@cabotfinancial.com&Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "getUserByEmail"
                  ],
                  "query": [
                    {
                      "key": "Email",
                      "value": "ssmithson@cabotfinancial.com"
                    },
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendActivationEmail",
              "_postman_id": "79cf8f56-a6d3-4e81-927b-d3bb634c5486",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTcyOTQ2MywiZXhwIjoxNTU5NzQ3NDYzLCJpYXQiOjE1NTk3Mjk0NjMsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.tEAtyWMU82APp9JQe_wmK3DBbmTv23iK4-MVAVdk1_c"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\",\"ActivationURL\":\"www.bbc.co.uk\",\"FirstName\":\"Andy\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendActivationEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendActivationEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postAddTwoFAPhoneNumber",
              "_postman_id": "d876f23e-b8f7-456c-ab4e-04ed3bf8f974",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"Token\":\"{{Token}}\",\n\t\"Data\":{\n\t\"Id\":0,\n\t\"UserId\":31840073,\n\t\"PhoneNumber\":\"07879548777\"\n\t}\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postAddTwoFAPhoneNumber"
              },
              "response": []
            },
            {
              "name": "postSendContactUsEmail",
              "_postman_id": "ba18a26a-916f-4501-bfc1-f272eec7993b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTcyOTQ2MywiZXhwIjoxNTU5NzQ3NDYzLCJpYXQiOjE1NTk3Mjk0NjMsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.tEAtyWMU82APp9JQe_wmK3DBbmTv23iK4-MVAVdk1_c"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\",\"ActivationURL\":\"www.bbc.co.uk\",\"FirstName\":\"Andy\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendContactUsEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendContactUsEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendBudgetPlannerCompletedEmail",
              "_postman_id": "84d4f2b0-d0ae-4a17-bd18-8d020fb634f3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTc1MDY5MSwiZXhwIjoxNTU5NzY4NjkxLCJpYXQiOjE1NTk3NTA2OTEsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.g17w7BezPsk3102bFYgno2HtBxloCJdyi8hj8WXcgLM"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendBudgetPlannerCompletedEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendBudgetPlannerCompletedEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendLinkAccountCompleteEmail",
              "_postman_id": "f17db5ed-2005-4b1e-ae99-467d3895dc69",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTc1MDY5MSwiZXhwIjoxNTU5NzY4NjkxLCJpYXQiOjE1NTk3NTA2OTEsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.g17w7BezPsk3102bFYgno2HtBxloCJdyi8hj8WXcgLM"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendLinkAccountCompleteEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendLinkAccountCompleteEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendAddNewCardEmail",
              "_postman_id": "d49ef525-79a9-43f3-9705-bf60d001452c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTc1MDY5MSwiZXhwIjoxNTU5NzY4NjkxLCJpYXQiOjE1NTk3NTA2OTEsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.g17w7BezPsk3102bFYgno2HtBxloCJdyi8hj8WXcgLM"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\",\"CardNumber\":\"1234\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendAddNewCardEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendAddNewCardEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendPasswordResetEmail",
              "_postman_id": "fd26ae11-a0b8-4823-9ffb-52e260be5a37",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTcyOTQ2MywiZXhwIjoxNTU5NzQ3NDYzLCJpYXQiOjE1NTk3Mjk0NjMsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.tEAtyWMU82APp9JQe_wmK3DBbmTv23iK4-MVAVdk1_c"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\",\"ActivationURL\":\"www.bbc.co.uk\",\"FirstName\":\"Andy\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendPasswordResetEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendPasswordResetEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendEmailUpdatedEmail",
              "_postman_id": "cdfcd5a6-3255-4769-a1b6-be8bf2aa170b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTcyOTQ2MywiZXhwIjoxNTU5NzQ3NDYzLCJpYXQiOjE1NTk3Mjk0NjMsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.tEAtyWMU82APp9JQe_wmK3DBbmTv23iK4-MVAVdk1_c"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"OldEmail\":\"amiles@cabotcm.com\",\"NewEmail\":\"amiles@cabotcm.com\",\"ActivationURL\":\"www.bbc.co.uk\",\"FirstName\":\"Andy\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendEmailUpdatedEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendEmailUpdatedEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendPhoneUpdatedEmail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "71966971-6f87-4a63-930d-13de2bb6ac77",
                    "exec": [
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7ead4265-72bb-49c9-9447-c083e3bf044f",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\"Token\": \"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\r\n\"Data\":{\r\n      \t\"UserId\": 5,\r\n      \t\"AccountReferenceNumber\": \"187004\",\r\n  \t\"CustomerPrimaryId\": 1644818,\r\n  \t\"CustomerSecondaryId\": 1490419,\r\n\"Email\": \"jaytesting9@cf.com\"\r\n\r\n      }\r\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/{{version}}/postSendPhoneUpdatedEmail?Token={{Token}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "{{version}}",
                    "postSendPhoneUpdatedEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "{{Token}}"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postSendAddressUpdatedEmail",
              "_postman_id": "08daec90-60cd-43dd-8903-0b9f1ca073e2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1bmlxdWVfbmFtZSI6IjU1NDhGRkQ5LURGRUYtNDA3Qi1BN0JDLTk5RjgzMjZCRDEwMSIsIm5iZiI6MTU1OTc1MDY5MSwiZXhwIjoxNTU5NzY4NjkxLCJpYXQiOjE1NTk3NTA2OTEsImlzcyI6IkF6dXJlIiwiYXVkIjoiUmFja3NwYWNlIn0.g17w7BezPsk3102bFYgno2HtBxloCJdyi8hj8WXcgLM"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\"Token\":\"8207186B-CA9E-4B6E-B033-1438DCC6E7D8\",\"Data\":{\"UserId\":194245,\"ActivationCode\":\"123456\",\"AccountReferenceNumber\":\"791230\",\"CustomerPrimaryId\":3184007,\"CustomerSecondaryId\":0,\"Email\":\"amiles@cabotcm.com\"}}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{url}}/api/v{{version}}/postSendAddressUpdatedEmail?Token=8207186B-CA9E-4B6E-B033-1438DCC6E7D8",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "api",
                    "v{{version}}",
                    "postSendAddressUpdatedEmail"
                  ],
                  "query": [
                    {
                      "key": "Token",
                      "value": "8207186B-CA9E-4B6E-B033-1438DCC6E7D8"
                    }
                  ]
                }
              },
              "response": []
            },
            {
              "name": "postContactForm",
              "_postman_id": "897b172b-2904-42e2-8d60-36d82f286964",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Accept",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Cache-Control",
                    "type": "text",
                    "value": "no-cache"
                  },
                  {
                    "key": "Authorization",
                    "type": "text",
                    "value": "{{auth_token}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n\t\"Token\":\"{{Token}}\",\n\t\"Data\":{\"AccountReferenceNumber\":1000,\n        \"CustomerPrimaryId\":43555'29,\n        \"CustomerSecondaryId\":0,\n        \"Title\":\"Mr\",\n        \"Name\":\"John Smith\",\n        \"FirstName\":\"John\",\n        \"Surname\":\"Smith\",\n        \"MiddleName\":null,\n        \"PhoneNumber\":\"01622999999\",\n         \"Email\":\"rzpbf10@alacrities.com\",\n        \"RequestedResponseType\":\"Email\",\n        \"Message\":\"hello\"\n       }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{url}}/api/{{version}}/postContactForm"
              },
              "response": []
            }
          ],
          "_postman_id": "49881936-957e-4ccd-88b9-5425312ba4fd",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "0eb50e14-38f8-48e1-b91f-e171c40b7296"
    },
    {
      "name": "Action Result",
      "item": [
        {
          "name": "log",
          "item": [
            {
              "name": "withrules",
              "item": [
                {
                  "name": "log/withrules",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "c2da7706-154a-4bfb-8134-a0fb366ce8ac",
                        "exec": [
                          "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                          "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                          "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                          "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "var noDate = 0;\r",
                          "var tokenDate = new Date(2010,1,1);\r",
                          "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "if(tokenTimestamp){\r",
                          "    tokenDate = Date.parse(tokenTimestamp);\r",
                          "}else {noDate = 1};\r",
                          "    //console.log(\"timestamp is\"+tokenDate);\r",
                          "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "if(!expiresInTime){\r",
                          "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "}\r",
                          "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                          "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                          "    let clientId = pm.environment.get(\"clientId\"); \r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                          "    let scope = pm.environment.get(\"clientScope\"); \r",
                          "    let getTokenRequest = {\r",
                          "        method: 'POST',\r",
                          "        url: tokenUrl,\r",
                          "        auth: {\r",
                          "            type: \"basic\",\r",
                          "            basic: [\r",
                          "                { key: \"username\", value: clientId },\r",
                          "                { key: \"password\", value: clientSecret }\r",
                          "            ]\r",
                          "        },\r",
                          "        body: {\r",
                          "            mode: 'formdata',\r",
                          "            formdata: [\r",
                          "                { key: 'grant_type', value: 'client_credentials' },\r",
                          "                { key: 'scope', value: scope }\r",
                          "            ]\r",
                          "        }\r",
                          "    };\r",
                          "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "    let jsonResponse = response.json(),\r",
                          "        newAccessToken = jsonResponse.access_token;\r",
                          "        //console.log({ err, jsonResponse, newAccessToken });\r",
                          "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "    });\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "}\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "3250e4c8-ea39-4fb8-aa28-e5d3a04145b2",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": {{cnsmr_id}},\n    \"actionCode\": \"{{Ac_Cd}}\",\n    \"resultCode\": \"{{Rs_Cd}}\",\n    \"message\": \"{{Message_Text}}\",\n    \"username\": \"Postman\",\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"CorrelationId\": \"postman\",\n    \"Operation\": \"AR Stamp Testing\",\n    \"Origin\": \"SFSC\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": "{{baseUrl}}/actionresult/log/withrules",
                    "description": "Creates Action Result record in DM9, rules kicked off.  Sync - Waits for DM9 to respond before returning"
                  },
                  "response": [
                    {
                      "id": "3c2bd788-ac02-40e1-9ed2-4a6c9a20da33",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                        },
                        "url": "{{baseUrl}}/log/withrules"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "6d86ef1a-7c0d-48bb-b308-ffe00498a13b",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                        },
                        "url": "{{baseUrl}}/log/withrules"
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<object>\""
                    },
                    {
                      "id": "9d4c7d48-6d2a-4bdc-8b40-51a61fbd3565",
                      "name": "Success",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                        },
                        "url": "{{baseUrl}}/log/withrules"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n \"consumerId\": \"<long>\",\n \"actionCode\": \"<string>\",\n \"resultCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
                    }
                  ]
                },
                {
                  "name": "log/withrules/async",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "a12d0bde-a884-4f81-8ae9-0795165628f1",
                        "exec": [
                          "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                          "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                          "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                          "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "var noDate = 0;\r",
                          "var tokenDate = new Date(2010,1,1);\r",
                          "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "if(tokenTimestamp){\r",
                          "    tokenDate = Date.parse(tokenTimestamp);\r",
                          "}else {noDate = 1};\r",
                          "    //console.log(\"timestamp is\"+tokenDate);\r",
                          "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "if(!expiresInTime){\r",
                          "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "}\r",
                          "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                          "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                          "    let clientId = pm.environment.get(\"clientId\"); \r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                          "    let scope = pm.environment.get(\"clientScope\"); \r",
                          "    let getTokenRequest = {\r",
                          "        method: 'POST',\r",
                          "        url: tokenUrl,\r",
                          "        auth: {\r",
                          "            type: \"basic\",\r",
                          "            basic: [\r",
                          "                { key: \"username\", value: clientId },\r",
                          "                { key: \"password\", value: clientSecret }\r",
                          "            ]\r",
                          "        },\r",
                          "        body: {\r",
                          "            mode: 'formdata',\r",
                          "            formdata: [\r",
                          "                { key: 'grant_type', value: 'client_credentials' },\r",
                          "                { key: 'scope', value: scope }\r",
                          "            ]\r",
                          "        }\r",
                          "    };\r",
                          "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "    let jsonResponse = response.json(),\r",
                          "        newAccessToken = jsonResponse.access_token;\r",
                          "        //console.log({ err, jsonResponse, newAccessToken });\r",
                          "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "    });\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "}\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "e7c011a7-73ab-4541-86cd-0305d515327c",
                        "exec": [
                          "if (data.test_polarity==null || data.test_polarity==1){\r",
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});}\r",
                          "\r",
                          "pm.test(\"TEST5: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9b842e6f-d533-4811-8d7e-eadef24daad8",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": {{cnsmr_id}},\n    \"actionCode\": \"{{Ac_Cd}}\",\n    \"resultCode\": \"{{Rs_Cd}}\",\n    \"message\": \"{{Message_Text}}\",\n    \"username\": \"Postman\",\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"CorrelationId\": \"postman\",\n    \"Operation\": \"AR Stamp Testing\",\n    \"Origin\": \"SFSC\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": "{{baseUrl}}/actionresult/log/withrules/async",
                    "description": "Creates Action Result record in DM9, rules kicked off.  Async - Message handled by a queue, response returned once the message is logged on the queue"
                  },
                  "response": [
                    {
                      "id": "0d9c2873-b9c3-46fc-a72c-11981bb0a189",
                      "name": "Success",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                        },
                        "url": "{{baseUrl}}/log/withrules/async"
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "90d08157-0d2d-4330-8b07-8e03bf53cfa8",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                        },
                        "url": "{{baseUrl}}/log/withrules/async"
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<object>\""
                    },
                    {
                      "id": "c4ce37ed-c7df-451c-87d5-13b7e5aba0db",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "POST",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          },
                          {
                            "key": "Content-Type",
                            "value": "application/json"
                          }
                        ],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                        },
                        "url": "{{baseUrl}}/log/withrules/async"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                }
              ],
              "_postman_id": "eece5da5-93ed-4daf-9847-6b9a3c204063",
              "_postman_isSubFolder": true
            },
            {
              "name": "log",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "98827bf6-52bb-4474-a894-c98b85cd476d",
                    "exec": [
                      "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                      "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                      "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                      "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "var noDate = 0;\r",
                      "var tokenDate = new Date(2010,1,1);\r",
                      "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "if(tokenTimestamp){\r",
                      "    tokenDate = Date.parse(tokenTimestamp);\r",
                      "}else {noDate = 1};\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "if(!expiresInTime){\r",
                      "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "}\r",
                      "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                      "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                      "    let clientId = pm.environment.get(\"clientId\"); \r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                      "    let scope = pm.environment.get(\"clientScope\"); \r",
                      "    let getTokenRequest = {\r",
                      "        method: 'POST',\r",
                      "        url: tokenUrl,\r",
                      "        auth: {\r",
                      "            type: \"basic\",\r",
                      "            basic: [\r",
                      "                { key: \"username\", value: clientId },\r",
                      "                { key: \"password\", value: clientSecret }\r",
                      "            ]\r",
                      "        },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'grant_type', value: 'client_credentials' },\r",
                      "                { key: 'scope', value: scope }\r",
                      "            ]\r",
                      "        }\r",
                      "    };\r",
                      "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "    let jsonResponse = response.json(),\r",
                      "        newAccessToken = jsonResponse.access_token;\r",
                      "        //console.log({ err, jsonResponse, newAccessToken });\r",
                      "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "    });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "7defeaaf-c469-4215-b7bc-2ad42bc76d60",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"consumerId\": {{cnsmr_id}},\n    \"actionCode\": \"{{Ac_Cd}}\",\n    \"resultCode\": \"{{Rs_Cd}}\",\n    \"message\": \"{{Message_Text}}\",\n    \"username\": \"Postman\",\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"CorrelationId\": \"postman\",\n    \"Operation\": \"AR Stamp Testing\",\n    \"Origin\": \"SFSC\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{baseUrl}}/actionresult/log",
                "description": "Creates Action Result record in DM9, but does not kick off any rules for it.  Sync - Waits for DM9 to respond before returning"
              },
              "response": [
                {
                  "id": "276b3019-86bb-41f5-92aa-7f93b1c43033",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/log"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "89383ced-ef1b-4014-a638-30cb10b649a8",
                  "name": "Success",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/log"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerId\": \"<long>\",\n \"actionCode\": \"<string>\",\n \"resultCode\": \"<string>\",\n \"message\": \"<string>\"\n}"
                },
                {
                  "id": "e1aa0417-5b5a-4c97-a0ac-eb67d248c3d4",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/log"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<object>\""
                }
              ]
            },
            {
              "name": "log/async",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c1a78bfd-30dc-40c1-a7a9-b6b22d76c2bc",
                    "exec": [
                      "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                      "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                      "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                      "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "var noDate = 0;\r",
                      "var tokenDate = new Date(2010,1,1);\r",
                      "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "if(tokenTimestamp){\r",
                      "    tokenDate = Date.parse(tokenTimestamp);\r",
                      "}else {noDate = 1};\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "if(!expiresInTime){\r",
                      "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "}\r",
                      "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                      "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                      "    let clientId = pm.environment.get(\"clientId\"); \r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                      "    let scope = pm.environment.get(\"clientScope\"); \r",
                      "    let getTokenRequest = {\r",
                      "        method: 'POST',\r",
                      "        url: tokenUrl,\r",
                      "        auth: {\r",
                      "            type: \"basic\",\r",
                      "            basic: [\r",
                      "                { key: \"username\", value: clientId },\r",
                      "                { key: \"password\", value: clientSecret }\r",
                      "            ]\r",
                      "        },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'grant_type', value: 'client_credentials' },\r",
                      "                { key: 'scope', value: scope }\r",
                      "            ]\r",
                      "        }\r",
                      "    };\r",
                      "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "    let jsonResponse = response.json(),\r",
                      "        newAccessToken = jsonResponse.access_token;\r",
                      "        //console.log({ err, jsonResponse, newAccessToken });\r",
                      "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "    });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "079b6850-ee92-48d0-90be-4f877a194189",
                    "exec": [
                      "if (data.test_polarity==null || data.test_polarity==1){\r",
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {\r",
                      "    pm.response.to.have.status(202);\r",
                      "});}\r",
                      "\r",
                      "pm.test(\"TEST5: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "5597343c-ed4e-4380-9392-9daf8b1d921d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"consumerId\": {{cnsmr_id}},\n    \"actionCode\": \"{{Ac_Cd}}\",\n    \"resultCode\": \"{{Rs_Cd}}\",\n    \"message\": \"{{Message_Text}}\",\n    \"username\": \"Postman\",\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"CorrelationId\": \"postman\",\n    \"Operation\": \"AR Stamp Testing\",\n    \"Origin\": \"SFSC\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{baseUrl}}/actionresult/log/async",
                "description": "Creates Action Result record in DM9, but does not kick off any rules for it.  Async - Message handled by a queue, response returned once the message is logged on the queue"
              },
              "response": [
                {
                  "id": "7b790533-64b0-4369-949d-888604d2f68a",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/log/async"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<object>\""
                },
                {
                  "id": "80237f75-5d92-4dbd-96e1-6d370e30816e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/log/async"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "d70313d8-2364-40ca-b4f4-4b1a2a8ae620",
                  "name": "Success",
                  "originalRequest": {
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/log/async"
                  },
                  "status": "Accepted",
                  "code": 202,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "e82797c4-adcb-407c-9a4d-51acbed55a12",
          "_postman_isSubFolder": true
        },
        {
          "name": "Create Action Result With Rules Async",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8fd5206b-5820-42d8-adc0-14634b28136a",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010,1,1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if(tokenTimestamp){\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "}else {noDate = 1};\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if(!expiresInTime){\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                  "    let clientId = pm.environment.get(\"clientId\"); \r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                  "    let scope = pm.environment.get(\"clientScope\"); \r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "            type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "    let jsonResponse = response.json(),\r",
                  "        newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "dcedeb58-9457-4800-bfef-e149f6e95bd9",
                "exec": [
                  "if (data.test_polarity==null || data.test_polarity==1){\r",
                  "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {\r",
                  "    pm.response.to.have.status(202);\r",
                  "});}\r",
                  "\r",
                  "pm.test(\"TEST5: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "5009aafa-ae40-409c-a24b-c912bf55d67c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"consumerId\": {{cnsmr_id}},\r\n    \"actionCode\": \"{{Ac_Cd}}\",\r\n    \"resultCode\": \"{{Rs_Cd}}\",\r\n    \"message\": \"{{Message_Text}}\",\r\n    \"username\": \"Postman\",\r\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\r\n    \"CorrelationId\": \"postman\",\r\n    \"Operation\": \"AR Stamp Testing\",\r\n    \"Origin\": \"SFSC\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/actionresult/CreateActionResultWithRulesAsync",
            "description": "Creates Action Result record in DM9, rules kicked off.  Async - Message handled by a queue, response returned once the message is logged on the queue"
          },
          "response": [
            {
              "id": "4392d3f5-107e-48f9-a590-d9028ece5c09",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/CreateActionResultWithRulesAsync"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "5257d008-128f-483a-9258-0829a3fe8a2e",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/CreateActionResultWithRulesAsync"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "da8b6bda-ebdc-4a06-92c3-8707fb51a5b0",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"consumerId\": \"<long>\",\n    \"actionCode\": \"<string>\",\n    \"resultCode\": \"<string>\",\n    \"message\": \"<string>\",\n    \"username\": \"<string>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Operation\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/CreateActionResultWithRulesAsync"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "search",
          "_postman_id": "629e4ebf-bd28-4451-8ed6-0e07f42c9c79",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/actionresult/search/:consumerId/:actionCodeShortValueText/:resultCodeShortValueText/:messagePart/:num",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "actionresult",
                "search",
                ":consumerId",
                ":actionCodeShortValueText",
                ":resultCodeShortValueText",
                ":messagePart",
                ":num"
              ],
              "variable": [
                {
                  "key": "consumerId",
                  "value": "{{cnsmr_id}}",
                  "type": "string"
                },
                {
                  "key": "actionCodeShortValueText",
                  "value": "{{Ac_Cd}}",
                  "type": "string"
                },
                {
                  "key": "resultCodeShortValueText",
                  "value": "{{Rs_Cd}}",
                  "type": "string"
                },
                {
                  "key": "messagePart",
                  "value": "",
                  "type": "string"
                },
                {
                  "key": "num",
                  "value": "",
                  "type": "string"
                }
              ]
            },
            "description": "Searches for consumer ar stamps"
          },
          "response": [
            {
              "id": "14155eaa-9ad7-4d21-85a4-8c7716b592ae",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/search/:consumerId/<string>/<string>/<string>/<integer>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "search",
                    ":consumerId",
                    "<string>",
                    "<string>",
                    "<string>",
                    "<integer>"
                  ],
                  "variable": [
                    {
                      "key": "consumerId"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            },
            {
              "id": "d0a04add-d647-4015-b77b-59b0ca2a22b7",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/search/:consumerId/<string>/<string>/<string>/<integer>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "search",
                    ":consumerId",
                    "<string>",
                    "<string>",
                    "<string>",
                    "<integer>"
                  ],
                  "variable": [
                    {
                      "key": "consumerId"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"consumerId\": \"<long>\",\n  \"actionCode\": \"<string>\",\n  \"resultCode\": \"<string>\",\n  \"message\": \"<string>\"\n },\n {\n  \"consumerId\": \"<long>\",\n  \"actionCode\": \"<string>\",\n  \"resultCode\": \"<string>\",\n  \"message\": \"<string>\"\n }\n]"
            },
            {
              "id": "f3d8bec6-e700-4a61-a912-21dc892fd27d",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/search/:consumerId/<string>/<string>/<string>/<integer>",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "search",
                    ":consumerId",
                    "<string>",
                    "<string>",
                    "<string>",
                    "<integer>"
                  ],
                  "variable": [
                    {
                      "key": "consumerId"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            }
          ]
        }
      ],
      "_postman_id": "5648f5f5-d9ec-4d2c-9874-5b6464edcf40"
    },
    {
      "name": "Helper Functions",
      "item": [
        {
          "name": "removehtmltags",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f2de2e0e-985b-4287-a7e1-e7bfd7e45dbb",
                "exec": [
                  "var jsonData = pm.response.json();",
                  "var req = JSON.parse(request.data);",
                  "var query = request.url.split('/');",
                  "console.log(req);",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "    pm.test(\"TEST1: Response Check \", function () {",
                  "    pm.response.to.have.status(200);",
                  "    });",
                  "    ",
                  "    pm.test(\"TEST2: Response body check \", function () {",
                  "    pm.expect(jsonData.htmlText).to.equal(req.htmlText);",
                  "    });",
                  "    ",
                  "    pm.test(\"TEST3: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "    });",
                  "    ",
                  "    pm.test(\"TEST4: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "    });",
                  "",
                  "    pm.test(\"TEST5: Field checks against Request\", function () {",
                  "    pm.expect(jsonData).to.have.property('Correlation-Id', pm.environment.get(\"correlation-id\"), 'Operation', '', 'Origin', pm.environment.get(\"Origin\"), 'Cache-Control', '','Authorization', '', 'Username', pm.environment.get(\"Username\"));",
                  "    });",
                  "",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "8926d4e6-2075-4260-9289-919e8fc0ff76",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }else{\r",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                  "    }\r",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "3a06a949-9b2d-49d0-9b92-4ea7f48fab65",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "correlation-id",
                "value": "{{correlation-id}}",
                "type": "text"
              },
              {
                "key": "ocp-apim-subscription-key-south",
                "value": "{{subkey-south}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{subkey-west}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "postman",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"htmlText\": {{htmlText}}\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/helper/removehtmltags"
          },
          "response": []
        }
      ],
      "_postman_id": "aaa05898-fcd4-4edd-8a67-c6f0562d1915"
    },
    {
      "name": "StormIVR",
      "item": [
        {
          "name": "Confirm Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "047327b1-fe59-4f3f-a061-98bf0d777891",
                "exec": [
                  "//var payload = request.data;",
                  "var\u00a0legacyID\u00a0=\u00a0pm.variables.get(\"legacyID\");",
                  "var\u00a0payload\u00a0=\u00a0request.data.replace(\"{{legacyID}}\",\u00a0legacyID); ",
                  "console.log(\"Using payload as \" + payload);",
                  "console.log(environment.secret);",
                  "var hash = CryptoJS.HmacSHA256(payload, environment.secret).toString(CryptoJS.enc.Hex);",
                  "postman.setGlobalVariable(\"signature\", \"sha256=\" + hash);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "69d98657-7f4d-4db0-9222-e2655d968ad4",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schemaResponse = {",
                  "    \"required\": [",
                  "        \"reference\",",
                  "        \"postCode\",",
                  "        \"recentRPC\",",
                  "        \"rpcEver\",",
                  "        \"recentRPCOutcome\",",
                  "        \"payer\",",
                  "        \"highValue\",",
                  "        \"balance\",",
                  "        \"workGroup\",",
                  "        \"recentCampaignOffer\",",
                  "        \"paymentDue\",",
                  "        \"nextBestAction\",",
                  "        \"webRegistered\",",
                  "        \"externalAgentName\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"reference\": {",
                  "            \"$id\": \"#/properties/reference\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"postCode\": {",
                  "            \"$id\": \"#/properties/postCode\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"recentRPC\": {",
                  "            \"$id\": \"#/properties/recentRPC\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"rpcEver\": {",
                  "            \"$id\": \"#/properties/rpcEver\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"recentRPCOutcome\": {",
                  "            \"$id\": \"#/properties/recentRPCOutcome\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"payer\": {",
                  "            \"$id\": \"#/properties/payer\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"highValue\": {",
                  "            \"$id\": \"#/properties/highValue\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"balance\": {",
                  "            \"$id\": \"#/properties/balance\",",
                  "            \"type\": \"integer\"",
                  "        },",
                  "        \"workGroup\": {",
                  "            \"$id\": \"#/properties/workGroup\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"recentCampaignOffer\": {",
                  "            \"$id\": \"#/properties/recentCampaignOffer\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"paymentDue\": {",
                  "            \"$id\": \"#/properties/paymentDue\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"nextBestAction\": {",
                  "            \"$id\": \"#/properties/nextBestAction\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"webRegistered\": {",
                  "            \"$id\": \"#/properties/webRegistered\",",
                  "            \"type\": \"null\"",
                  "        },",
                  "        \"externalAgentName\": {",
                  "            \"$id\": \"#/properties/externalAgentName\",",
                  "            \"type\": \"null\"",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "",
                  "",
                  "",
                  " //Build Average Response",
                  "console.log(\"Average response time \" + responseTime + \"ms\");",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "",
                  "",
                  "pm.test(\"TEST01: schemaResponse is correct: \", function(){",
                  "    pm.expect(ajv.validate(jsonData, schemaResponse)).to.be.true;",
                  "});",
                  "",
                  " pm.test(\"TEST01: Successful POST request\", function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
                  "});",
                  "",
                  "pm.test(\"TEST04: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"TEST06: Response should be okay to process\", function () { ",
                  "    pm.response.to.not.be.error; ",
                  "    pm.response.to.not.have.jsonBody(\"error\"); ",
                  "});",
                  "pm.test(\"TEST07: Error Codes not present\", function () {",
                  "  pm.expect(pm.response.code).to.not.be.oneOf([204,400,500]);",
                  "});",
                  "",
                  "",
                  "",
                  "} else {",
                  "",
                  "////////NEGATIVE TESTS///////////",
                  "pm.test(\"Neg Test 01: Check if schemaResponse is empty\", function () {",
                  "     pm.expect((responseBody).to.be.empty).to.be.false;",
                  "});",
                  " pm.test(\"Neg Test 02: Check legacyID variable isn't empty\", function () {",
                  "     pm.expect('legacyID').to.not.be.empty;",
                  "});",
                  "pm.test(\"Neg Test 03: Check request body isn't empty\", function () {",
                  "    pm.expect(refRequest).to.not.be.empty;",
                  "});",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "47f06ae7-6b77-47db-bca4-e7c297499ec0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "disabled": true
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "disabled": true
              },
              {
                "key": "correlation-id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Origin",
                "value": "{{Origin}}"
              },
              {
                "key": "Username",
                "value": "Test_User"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Hub-Signature",
                "value": "{{signature}}",
                "type": "text"
              },
              {
                "key": "X-Hub-Event",
                "value": "pull_request",
                "type": "text"
              },
              {
                "key": "X-Hub-Delivery",
                "value": "20C6FC6CBDA14241933746FA81CC0E1EBC4F8957183A4213A26756539AE79AB3",
                "type": "text",
                "disabled": true
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Type\": \"Object\",\r\n    \"Data\": {\r\n            \"AccountReference\": \"{{legacyID}}\"\r\n    }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "https://cabotapi-test.cabotcm.com/contentguru/stormivr/confirm/account"
          },
          "response": [
            {
              "id": "51569a16-2984-428c-8c85-08cd743aae4a",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/account/"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "552a3136-82a7-495e-8841-c4011aaab20d",
              "name": "Not Found",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/account/"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "66dabe89-c8a6-4192-81a1-c416646f3f78",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/account/"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "80c95ea8-9da0-4da5-bc41-406e7b2aee65",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  }
                ],
                "url": "{{baseUrl}}/confirm/account/"
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "adc209a5-0de3-4995-8ade-f90eb0424df0",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/account/"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Confirm Phone Number",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "38aa2d8d-4ee5-466b-8d0b-cde1ddb7a995",
                "exec": [
                  "//const PhoneNumber = Math.floor(Math.random() * 10000000000);\r",
                  "//console.log(\"01\" + PhoneNumber.toString());\r",
                  "//var PhoneNumber = \"01735939800\";\r",
                  "//console.log(PhoneNumber.toString());\r",
                  "//pm.environment.set (\"PhoneNumber\", PhoneNumber);\r",
                  "console.log(\"Reference: \" + data.legacyID);\r",
                  "console.log(\"Postcode: \" + data.PostCode);\r",
                  "\r",
                  "//var payload = request.data;\r",
                  "var\u00a0phn_num\u00a0=\u00a0pm.variables.get(\"phn_num\");\r",
                  "var\u00a0payload\u00a0=\u00a0request.data.replace(\"{{phn_num}}\", phn_num); \r",
                  "console.log(\"Using payload as \" + payload);\r",
                  "console.log(environment.secret);\r",
                  "var hash = CryptoJS.HmacSHA256(payload, environment.secret).toString(CryptoJS.enc.Hex);\r",
                  "postman.setGlobalVariable(\"signature\", \"sha256=\" + hash);\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "7567cf77-3081-457d-953d-85e9f215475c",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                  "var Ajv = require('ajv'),\r",
                  "ajv = new Ajv({logger: console}),\r",
                  "schemaResponse = {\r",
                  "    \"required\": [\r",
                  "        \"reference\",\r",
                  "        \"postcode\"\r",
                  "    ],\r",
                  "    \"properties\": {\r",
                  "        \"reference\": {\r",
                  "            \"$id\": \"#/properties/reference\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"postcode\": {\r",
                  "            \"$id\": \"#/properties/postCode\",\r",
                  "            \"type\": \"string\"\r",
                  "        }\r",
                  "    },\r",
                  "    \"$id\": \"http://example.org/root.json#\",\r",
                  "    \"type\": \"object\",\r",
                  "    \"definitions\": {},\r",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                  "};\r",
                  "/////////////////////////////////////////////////////////////////////////////////////\r",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "var req = request.url;\r",
                  "var query = request.url.split('/');\r",
                  "console.log(query);\r",
                  "if (data.test_polarity==null || data.test_polarity==1){\r",
                  "////////////////////////////////////////////////////////////////////////////////////\r",
                  "//Build Average Response\r",
                  "console.log(\"Average response time \" + responseTime + \"ms\");\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "\r",
                  "pm.test(\"TEST01: schemaResponse is correct: \", function(){\r",
                  "    pm.expect(ajv.validate(schemaResponse, jsonData)).to.be.true;\r",
                  "});\r",
                  " \r",
                  " pm.test(\"TEST02: Successful POST request\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([201,202,200]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST03: Response Header Checks\", function() {\r",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST04: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                  "});\r",
                  "/*pm.test(\"TEST05: Body matches string\", function () {\r",
                  "    pm.expect(pm.response.text()).to.include(\"reference\" , \"postCode\");\r",
                  "});*/\r",
                  "/*var myStatus = pm.response.json().Status;\r",
                  "var myResp = responseBody;\r",
                  "pm.test(\"Status belongs to response\", function () {\r",
                  "    pm.expect(myStatus).to.include(myResp);\r",
                  "});*/\r",
                  "pm.test(\"TEST06: Response should be okay to process\", function () { \r",
                  "    pm.response.to.not.be.error; \r",
                  "    pm.response.to.not.have.jsonBody(\"error\"); \r",
                  "});\r",
                  "pm.test(\"TEST07: Error Codes not present\", function () {\r",
                  "  pm.expect(pm.response.code).to.not.be.oneOf([204,400,500]);\r",
                  "});\r",
                  "\r",
                  "} else {\r",
                  "////////NEGATIVE TESTS///////////\r",
                  "pm.test(\"Neg Test 01: Incorrect field examaple\", function() {\r",
                  "    var legID = schemaResponse.properties.reference;\r",
                  "    var wrongLegID = String;\r",
                  "    pm.expect(legID).to.not.equal(wrongLegID);\r",
                  "    console.log(jsonData.toString());\r",
                  "});\r",
                  "pm.test(\"Neg Test 02: Check if schemaResponse is empty\", function () {\r",
                  "     pm.expect(schemaResponse).to.not.be.empty;\r",
                  "});\r",
                  " pm.test(\"Neg Test 03: Check phoneNumber isn't empty\", function () {\r",
                  "     pm.expect('PhoneNumber').to.not.be.empty;\r",
                  "});\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "dccbb1d5-fcce-45ec-95f8-0a3ee9722e5b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IllNRUxIVDBndmIwbXhvU0RvWWZvbWpxZmpZVSIsImtpZCI6IllNRUxIVDBndmIwbXhvU0RvWWZvbWpxZmpZVSJ9.eyJhdWQiOiJhcGk6Ly84MTE2N2QzZC04NTNmLTQyMDctODBmYS0zMjI1YTQ5MjdhY2EiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zNjQ3ZTlmNy0wMzA1LTRhYjYtYjA2Zi00YjM2YTM1NDk3OTMvIiwiaWF0IjoxNTg0MTA3MTcxLCJuYmYiOjE1ODQxMDcxNzEsImV4cCI6MTU4NDExMTA3MSwiYWlvIjoiNDJOZ1lPanN1M25RNjh6WFcwNE1mSThrMkRKREFBPT0iLCJhcHBpZCI6IjIxYjhmYmVmLTcyNmItNDdhNC04MTM1LTFiY2ZlMmJhOWE5OCIsImFwcGlkYWNyIjoiMSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzM2NDdlOWY3LTAzMDUtNGFiNi1iMDZmLTRiMzZhMzU0OTc5My8iLCJvaWQiOiI4ZWVmMzgyOS04MDNlLTQzN2UtYTQ5NC01NzQ1NzVkNTBlZTgiLCJzdWIiOiI4ZWVmMzgyOS04MDNlLTQzN2UtYTQ5NC01NzQ1NzVkNTBlZTgiLCJ0aWQiOiIzNjQ3ZTlmNy0wMzA1LTRhYjYtYjA2Zi00YjM2YTM1NDk3OTMiLCJ1dGkiOiJQekYxeFZKcDEwaTFDV3FfeFFuSkFBIiwidmVyIjoiMS4wIn0.cm8FzALZpRs2qUlYFy8gEu_l8zHSkH3PajqFjFhMKcs7cciBPls65VZAjEKW3ROHE3iA-vLW1qTcdgwt8JU3ECVCssIwZMe-f12fvIrcTCOLqaYG6tvfr8eHZM_NF_M8zgEKkerUr-P2keHugymR7oqnKOHoU6gmcMpoEA98rRuuDVxtJ8GPMfTN9aNzX0CT0rEeQanKHpXm155fS6sOmquTE9V4YdT1Llrz6-sxx04aj6K8yJVAsN3yr0ejESdqvw4FygzhL_3NVwCUSHO5PXBY-UhwSnp65m51ziM4h1_awFU4Ob-efSybziC3_vnndF9o7NtLwmynf35guDYkmQ",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "disabled": true
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "disabled": true
              },
              {
                "key": "Correlation-Id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Origin",
                "value": "{{Origin}}"
              },
              {
                "key": "Username",
                "value": "Dev_User"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Hub-Signature",
                "value": "{{signature}}",
                "type": "text"
              },
              {
                "key": "X-Hub-Event",
                "value": "pull_request",
                "type": "text"
              },
              {
                "key": "X-Hub-Delivery",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Type\": \"Object\",\r\n    \"Data\": {\r\n        \"PhoneNumber\": \"{{phn_num}}\"\r\n    }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "https://cabotapi-test.cabotcm.com/contentguru/stormivr/confirm/phonenumber"
          },
          "response": [
            {
              "id": "32487cee-e0b0-48e1-96ce-c6d1058c61f2",
              "name": "Not Found",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/phonenumber/"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "342cfdc7-6768-4bb3-941a-3382b6ee3755",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/phonenumber/"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "51bef165-d5ee-4916-8e17-7e302b8c19f4",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/phonenumber/"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            },
            {
              "id": "78ae82e6-9b08-4df3-9daf-3b2303df4227",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/confirm/phonenumber/"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "d90d6989-4a72-42d6-b964-93d55f02f08b",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  }
                ],
                "url": "{{baseUrl}}/confirm/phonenumber/"
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "IVR By Ref",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d3b711e9-f33f-4fd0-9a62-72f7d1d0e4cc",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "var Ajv = require('ajv');\r",
                  "var ajv = new Ajv({logger: console}),\r",
                  "schemaResponse = {\r",
                  "    \"required\": [\r",
                  "        \"ivrCallID\",\r",
                  "        \"dateOfCall\",\r",
                  "        \"timeOfCall\",\r",
                  "        \"phoneNumber\",\r",
                  "        \"referenceNumber\",\r",
                  "        \"postCode\",\r",
                  "        \"dateOfBirth\",\r",
                  "        \"purposeOfCall\",\r",
                  "        \"accountHolder\",\r",
                  "        \"dpaRequested\",\r",
                  "        \"autoPayment\",\r",
                  "        \"postCodeMatch\",\r",
                  "        \"doBMatch\",\r",
                  "        \"requestDate\"\r",
                  "    ],\r",
                  "    \"properties\": {\r",
                  "        \"ivrCallID\": {\r",
                  "            \"$id\": \"#/properties/ivrCallID\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"dateOfCall\": {\r",
                  "            \"$id\": \"#/properties/dateOfCall\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"timeOfCall\": {\r",
                  "            \"$id\": \"#/properties/timeOfCall\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"phoneNumber\": {\r",
                  "            \"$id\": \"#/properties/phoneNumber\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"referenceNumber\": {\r",
                  "            \"$id\": \"#/properties/referenceNumber\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"postCode\": {\r",
                  "            \"$id\": \"#/properties/postCode\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"dateOfBirth\": {\r",
                  "            \"$id\": \"#/properties/dateOfBirth\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"purposeOfCall\": {\r",
                  "            \"$id\": \"#/properties/purposeOfCall\",\r",
                  "            \"type\": \"string\"\r",
                  "        },\r",
                  "        \"accountHolder\": {\r",
                  "            \"$id\": \"#/properties/accountHolder\",\r",
                  "            \"type\": \"boolean\"\r",
                  "        },\r",
                  "        \"dpaRequested\": {\r",
                  "            \"$id\": \"#/properties/dpaRequested\",\r",
                  "            \"type\": \"boolean\"\r",
                  "        },\r",
                  "        \"autoPayment\": {\r",
                  "            \"$id\": \"#/properties/autoPayment\",\r",
                  "            \"type\": \"boolean\"\r",
                  "        },\r",
                  "        \"postCodeMatch\": {\r",
                  "            \"$id\": \"#/properties/postCodeMatch\",\r",
                  "            \"type\": \"boolean\"\r",
                  "        },\r",
                  "        \"doBMatch\": {\r",
                  "            \"$id\": \"#/properties/doBMatch\",\r",
                  "            \"type\": \"boolean\"\r",
                  "        },\r",
                  "        \"requestDate\": {\r",
                  "            \"$id\": \"#/properties/requestDate\",\r",
                  "            \"type\": \"string\"\r",
                  "        }\r",
                  "    },\r",
                  "    \"$id\": \"http://example.org/root.json#\",\r",
                  "    \"type\": \"object\",\r",
                  "    \"definitions\": {},\r",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                  "};\r",
                  "\r",
                  "/////////////////////////////////////////////////////////////////////////////////////\r",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                  "var jsonData = JSON.parse(responseBody);\r",
                  "var req = request.url;\r",
                  "var query = request.url.split('/');\r",
                  "console.log(query);\r",
                  "if (data.test_polarity==null || data.test_polarity==1){\r",
                  "////////////////////////////////////////////////////////////////////////////////////\r",
                  "pm.test(\"Test 01: Schema is correct: \", function(){\r",
                  "    pm.expect(ajv.validate(schemaResponse, jsonData)).to.be.true;\r",
                  "});\r",
                  "\r",
                  "//Build Average Response\r",
                  "console.log(\"Average response time \" + responseTime + \"ms\");\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "\r",
                  "\r",
                  " pm.test(\"TEST02: Successful POST request\", function () {\r",
                  "  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST03: Response Header Checks\", function() {\r",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST04: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST06: Response should be okay to process\", function () { \r",
                  "    pm.response.to.not.be.error; \r",
                  "    pm.response.to.not.have.jsonBody(\"error\"); \r",
                  "});\r",
                  "pm.test(\"TEST07: Error Codes not present\", function () {\r",
                  "  pm.expect(pm.response.code).to.not.be.oneOf([204,400,500]);\r",
                  "});\r",
                  "/*pm.test(\"OAuth Headers present: \", function () {\r",
                  "    pm.response.to.have.header(['Set-Cookie', 'Connection']);\r",
                  "    \r",
                  "});\r",
                  "*/\r",
                  "} else {\r",
                  "////////NEGATIVE TESTS///////////\r",
                  "pm.test(\"Neg Test 01: Incorrect field examaple\", function() {\r",
                  "    var legID = schemaResponse.properties.reference;\r",
                  "    var wrongLegID = String;\r",
                  "    pm.expect(legID).to.not.equal(wrongLegID);\r",
                  "    console.log(jsonData.toString());\r",
                  "});\r",
                  "pm.test(\"Neg Test 02: Check if schemaResponse is empty\", function () {\r",
                  "     pm.expect(schemaResponse).to.not.be.empty;\r",
                  "});\r",
                  " pm.test(\"Neg Test 03: Check legacyID variable isn't empty\", function () {\r",
                  "     pm.expect('legacyID').to.not.be.empty;\r",
                  "});\r",
                  "}"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "716bae65-c684-4f1b-a10a-0b3442b168e1",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "94992a7a-fa53-4170-a057-1098e8064ac6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Origin",
                "value": "{{Origin}}"
              },
              {
                "key": "Username",
                "value": "Dev_User"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": {
              "raw": "https://cabotapi-test.cabotcm.com/stormivr/ivrcall/:phonenumber/:reference",
              "protocol": "https",
              "host": [
                "cabotapi-test",
                "cabotcm",
                "com"
              ],
              "path": [
                "stormivr",
                "ivrcall",
                ":phonenumber",
                ":reference"
              ],
              "variable": [
                {
                  "key": "phonenumber",
                  "value": "124567",
                  "type": "string"
                },
                {
                  "key": "reference",
                  "value": "135429",
                  "type": "string"
                }
              ]
            }
          },
          "response": [
            {
              "id": "15a0df80-d3c0-4b27-b611-37836f034e63",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/ivrcall/:reference",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "ivrcall",
                    ":reference"
                  ],
                  "variable": [
                    {
                      "key": "reference"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            },
            {
              "id": "482a5434-4b35-4809-b227-e1ba5032b8b5",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/ivrcall/:reference",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "ivrcall",
                    ":reference"
                  ],
                  "variable": [
                    {
                      "key": "reference"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "54e99b2b-4645-4ff6-bba7-8ad94e8bda42",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/ivrcall/:reference",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "ivrcall",
                    ":reference"
                  ],
                  "variable": [
                    {
                      "key": "reference"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "7e600f8e-3e1e-4692-b300-7b89ab7b45d1",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/ivrcall/:reference",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "ivrcall",
                    ":reference"
                  ],
                  "variable": [
                    {
                      "key": "reference"
                    }
                  ]
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "ae98ecb0-d62a-417c-a4d7-8a180a599778",
              "name": "Not Found",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/ivrcall/:reference",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "ivrcall",
                    ":reference"
                  ],
                  "variable": [
                    {
                      "key": "reference"
                    }
                  ]
                }
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "Validate DPA",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6630dd6c-957b-4501-93fc-b4255b0a871a",
                "exec": [
                  "/*if (!Date.now) {",
                  "    console.log(Date.now());",
                  "    Date.now = function() { return new Date().getTime(); };",
                  "console.log(\"LegacyID that will be sent: \" + data.legacyID);",
                  "console.log(\"Call Date that will be sent: \" + data.Call_dt);",
                  "console.log(\"Call Time that will be sent: \" + data.Call_tm);",
                  "console.log(\"Telephone Number which will be sent: \" + data.tel_num);",
                  "console.log(\"Postcode which will be sent: \" + data.PostCode);",
                  "console.log(\"DOB which will be sent: \" + data.dob);",
                  "console.log(\"Call Purpose which will be sent: \" + data.Call_prp);",
                  "console.log(\"Account Holder?: \" + data.Accnt_hdr);",
                  "console.log(\"DPA Request?: \" + data.Dpa_req);",
                  "console.log(\"Auto Payment?: \" + data.Auto_paym);",
                  "",
                  "",
                  "}*/",
                  "",
                  "var payload = request.data;",
                  "console.log(\"Using payload as \" + payload);",
                  "console.log(environment.secret);",
                  "var hash = CryptoJS.HmacSHA256(payload, environment.secret).toString(CryptoJS.enc.Hex);",
                  "postman.setGlobalVariable(\"signature\", \"sha256=\" + hash);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "28b2bf04-893d-4dc6-beb0-4dec7d809359",
                "exec": [
                  "try {var jsonData = JSON.parse(responseBody);}",
                  "catch(e){",
                  "    pm.test(\"Neg Test 04: Check incorrect DPA doesn't validate\", function () {",
                  "     pm.expect(pm.response.code).to.be.oneOf([200]);",
                  "    });",
                  "}",
                  "",
                  "/////////////////////////////////////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "//var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "console.log(query);",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "////////////////////////////////////////////////////////////////////////////////////",
                  "//Build Average Response",
                  "console.log(\"Average response time \" + responseTime + \"ms\");",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "",
                  "",
                  "pm.test(\"TEST04: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(10000);",
                  "});",
                  "",
                  "pm.test(\"TEST06: Response should be okay to process\", function () { ",
                  "    pm.response.to.not.be.error; ",
                  "    pm.response.to.not.have.jsonBody(\"error\"); ",
                  "});",
                  "pm.test(\"TEST07: Error Codes not present\", function () {",
                  "  pm.expect(pm.response.code).to.not.be.oneOf([404,400,500]);",
                  "});",
                  "/*pm.test(\"OAuth Headers present: \", function () {",
                  "    pm.response.to.have.header(['Set-Cookie' , 'Connection', 'close']);",
                  "    ",
                  "});*/",
                  "} else {",
                  "////////NEGATIVE TESTS///////////",
                  "pm.test(\"Neg Test 01: Incorrect field examaple\", function() {",
                  "    var legID = schemaResponse.properties.reference;",
                  "    var wrongLegID = String;",
                  "    pm.expect(legID).to.not.equal(wrongLegID);",
                  "    console.log(jsonData.toString());",
                  "});",
                  "pm.test(\"Check if schemaResponse is empty\", function () {",
                  "     pm.expect(schemaResponse).to.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 03: Check legacyID variable isn't empty\", function () {",
                  "     pm.expect('legacyID').to.not.be.empty;",
                  "});",
                  "}",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "968019d1-cf07-4e95-92cb-4399a8c9aa2d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "disabled": true
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "disabled": true
              },
              {
                "key": "correlation-id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Origin",
                "value": "{{Origin}}"
              },
              {
                "key": "Username",
                "value": "Dev_User"
              },
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "X-Hub-Signature",
                "value": "{{signature}}",
                "type": "text"
              },
              {
                "key": "X-Hub-Event",
                "value": "pull_request",
                "type": "text"
              },
              {
                "key": "X-Hub-Delivery",
                "value": "",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"Type\": \"Object\",\r\n    \"Data\": {\r\n        \"DateOfCall\": \"2020-02-02\",\r\n        \"TimeOfCall\": \"10:27:01\",\r\n        \"Telephone\": \"1234567\",\r\n        \"Reference\": \"135429\",\r\n        \"PostCode\": \"J3163HX\",\r\n        \"DateOfBirth\": \"1928-08-16\",\r\n        \"PurposeOfCall\": \"hello HI bonjour\",\r\n        \"AccountHolder\": \"True\",\r\n        \"DPARequested\": \"True\",\r\n        \"AutoPayment\": \"False\"\r\n    }\r\n}\r\n",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            },
            "url": "https://cabotapi-test.cabotcm.com/contentguru/stormivr/ValidateDPA"
          },
          "response": [
            {
              "id": "1b4a7358-1dcf-472c-8077-caab5957b260",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/ValidateDPA"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "228a372f-60dc-49e9-9372-2686e7802575",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/ValidateDPA"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"reference\": \"<string>\",\n \"recentRPC\": \"<boolean>\",\n \"rpcEver\": \"<boolean>\",\n \"recentRPCOutcome\": \"<string>\",\n \"payer\": \"<boolean>\",\n \"highValue\": \"<boolean>\",\n \"balance\": \"<double>\",\n \"workGroup\": \"<string>\",\n \"recentCampaignOffer\": \"<boolean>\",\n \"paymentDue\": \"<boolean>\",\n \"nextBestAction\": \"<string>\",\n \"webRegistered\": \"<boolean>\",\n \"externalAgentName\": \"<string>\"\n}"
            },
            {
              "id": "3d6a2f27-004c-4fd8-9e5f-d0d1731ba502",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/ValidateDPA"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "3ffda1c0-0da9-4781-b981-a8ad1454179a",
              "name": "Not Found",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/ValidateDPA"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "881e1a97-5a02-45c0-937d-22b2c4ad60ad",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>"
                  },
                  {
                    "key": "Origin",
                    "value": "<string>"
                  },
                  {
                    "key": "Username",
                    "value": "<string>"
                  }
                ],
                "url": "{{baseUrl}}/ValidateDPA"
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "b85bbd91-1c8c-4274-9dd9-18b4d33e834f",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [],
                "url": "{{baseUrl}}/ValidateDPA"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            }
          ]
        }
      ],
      "_postman_id": "c39b8dbc-7d41-401d-a099-da6a813aeb0c"
    },
    {
      "name": "New consumer APIs",
      "item": [
        {
          "name": "{consumer Id}",
          "item": [
            {
              "name": "search By Consumer Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12e6b8e7-94d3-4fe4-bef8-e4effd29bcee",
                    "exec": [
                      "try {",
                      "    pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));",
                      "    pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));",
                      "    console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    console.log(query);",
                      "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                      "        if (data.cnsmr_id == null) {",
                      "            pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[4]);",
                      "        } else {",
                      "            pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                      "        }",
                      "    });",
                      "",
                      "    if (data.cnsmr_id != null) {",
                      "        pm.test(\"TEST1A: AgencyID check\", function () {",
                      "            pm.expect(jsonData.agencyID).to.deep.equal(data.agencyID);",
                      "        });",
                      "        pm.test(\"TEST1B: legacyID check\", function () {",
                      "            pm.expect(jsonData.legacyID).to.deep.equal(JSON.stringify(data.legacyID));",
                      "        });",
                      "        pm.test(\"TEST1C: firstName check\", function () {",
                      "            pm.expect(jsonData.firstName).to.deep.equal(data.firstname);",
                      "        });",
                      "        pm.test(\"TEST1D: lastName check\", function () {",
                      "            if(jsonData.lastName===null){",
                      "                pm.expect(data.surname.toUpperCase()).to.deep.equal(\"NULL\");",
                      "            }else{",
                      "            pm.expect(jsonData.lastName).to.deep.equal(data.surname);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1E: DOB check\", function () {",
                      "            if (jsonData.dateOfBirth === null){",
                      "                pm.expect(data.dob).to.equal(\"NULL\");",
                      "            }else{",
                      "                pm.expect(jsonData.dateOfBirth.split('T')[0]).to.deep.equal(data.dob.split(' ')[0]);",
                      "            }",
                      "        });",
                      "    }",
                      "",
                      "    pm.test(\"TEST2: Status code Check\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "    });",
                      "",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "",
                      "    var Ajv = require('ajv'),",
                      "        ajv = new Ajv({ logger: console }),",
                      "        schema = {",
                      "            \"required\": [",
                      "                \"consumerID\",",
                      "                \"agencyID\",",
                      "                \"legacyID\",",
                      "                \"firstName\",",
                      "                \"lastName\",",
                      "                \"dateOfBirth\"",
                      "            ],",
                      "            \"properties\": {",
                      "                \"consumerID\": {",
                      "                    \"$id\": \"#/properties/consumerID\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"agencyID\": {",
                      "                    \"$id\": \"#/properties/agencyID\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"legacyID\": {",
                      "                    \"$id\": \"#/properties/legacyID\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"firstName\": {",
                      "                    \"$id\": \"#/properties/firstName\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"lastName\": {",
                      "                    \"$id\": \"#/properties/lastName\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"dateOfBirth\": {",
                      "                    \"$id\": \"#/properties/dateOfBirth\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "            },",
                      "            \"$id\": \"http://example.org/root.json#\",",
                      "            \"type\": \"object\",",
                      "            \"definitions\": {},",
                      "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "        };",
                      "    pm.test(\"TEST5: Schema Test\", function () {",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "    });",
                      "} catch (e) {",
                      "",
                      "    //negative Tests",
                      "",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    var cid = responseBody.split(':');",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "    pm.test(\"Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "    });",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "        pm.expect(responseCode.code).to.equal(400);",
                      "        pm.expect(responseBody).to.equal(\"Unable to find consumer with consumerId: \" + query[4]);",
                      "        pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);",
                      "    });",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d281dd98-c30d-43cc-b708-27ba22fac488",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8dee5913-c029-4be4-8ac1-99548e5ecfab",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{BaseURL}}/consumer/:consumerId",
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Search for consumer by given ConsumerID"
              },
              "response": [
                {
                  "id": "0fbb707d-c79f-4c09-b4a1-a09b07e67d4b",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "2a044f93-e5be-4943-92b6-eed33808fc0b",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "3931e7e3-44a1-4ba6-b6d2-fe2a4d4eb04f",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "3941745f-3fe6-4cfe-9eeb-b97709bdcea8",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "a2427af8-546c-4926-ad28-92c5c37a9653",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c051da6c-eeb6-40bd-8797-1028dc546d42",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                }
              ]
            },
            {
              "name": "get Full Detail By Consumer Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d905c612-0791-41c1-914b-f0bd89b5e1ce",
                    "exec": [
                      "try {",
                      "    console.log(data[2]);",
                      "    pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));",
                      "    pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));",
                      "    console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    console.log(query);",
                      "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                      "        if (data.cnsmr_id == null) {",
                      "            pm.expect(JSON.stringify(jsonData.consumerID)).to.equal(query[4]);",
                      "        } else {",
                      "            pm.expect(jsonData.consumerID).to.equal(data.cnsmr_id);",
                      "        }",
                      "    });",
                      "",
                      "    if (data.cnsmr_id != null) {",
                      "        pm.test(\"TEST1A: Title check\", function () {",
                      "            if (jsonData.title === null) {",
                      "                pm.expect(data.title.toUpperCase()).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.title.toUpperCase()).to.equal(data.title.toUpperCase());",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1B: legacyID check\", function () {",
                      "            pm.expect(jsonData.legacyID).to.equal(JSON.stringify(data.legacyID));",
                      "        });",
                      "        pm.test(\"TEST1C: firstName check\", function () {",
                      "            pm.expect(jsonData.firstName).to.equal(data.firstname);",
                      "        });",
                      "        pm.test(\"TEST1D: lastName check\", function () {",
                      "            if (jsonData.lastName === null) {",
                      "                pm.expect(data.surname.toUpperCase()).to.deep.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.lastName).to.deep.equal(data.surname);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1E: DOB check\", function () {",
                      "            if (jsonData.dateOfBirth === null){",
                      "                pm.expect(data.dob).to.equal(\"NULL\");",
                      "            }else{",
                      "                pm.expect(jsonData.dateOfBirth.split('T')[0]).to.deep.equal(data.dob.split(' ')[0]);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1F: email check\", function () {",
                      "            if (jsonData.email === null) {",
                      "                pm.expect(data.email).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.email).to.equal(data.email);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1G: consumer address check\", function () {",
                      "            if (jsonData.consumerAddress != null) {",
                      "                pm.expect(jsonData.consumerAddress.addressLine1).to.equal(data.AddressLine1);",
                      "                if (jsonData.consumerAddress.addressLine2 === null) {",
                      "                    pm.expect(data.AddressLine2.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.addressLine2).to.equal(data.AddressLine2);",
                      "                }",
                      "                if (jsonData.consumerAddress.addressLine3 === null) {",
                      "                    pm.expect(data.AddressLine3.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.addressLine3).to.equal(data.AddressLine3);",
                      "                }",
                      "                if (jsonData.consumerAddress.city === null) {",
                      "                    pm.expect(data.City.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.city).to.equal(data.City);",
                      "                }",
                      "                if (jsonData.consumerAddress.state === null) {",
                      "                    pm.expect(data.State.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.state).to.equal(data.State);",
                      "                }",
                      "                if (jsonData.consumerAddress.county === null) {",
                      "                    pm.expect(data.County.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.county).to.equal(data.County);",
                      "                }",
                      "                if (jsonData.consumerAddress.country === null) {",
                      "                    pm.expect(data.Country.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.country).to.equal(data.Country);",
                      "                }",
                      "            }",
                      "        });",
                      "        /*pm.test(\"TEST1H: consumer Phones check\", function() {",
                      "            if(jsonData.consumerPhones!=null){",
                      "                for(var i=0;  i<(jsonData.consumerPhones.length); i++) {",
                      "                    pm.expect(jsonData.consumerPhones[i].consumerPhoneID).to.equal(JSON.stringify(data.consumerPhoneID));",
                      "                    pm.expect(jsonData.consumerPhones[i].number).to.equal(JSON.stringify(data.phn_num));",
                      "                    pm.expect(jsonData.consumerPhones[i].softDeleteFlag).to.equal(JSON.stringify(data.softDeleteFlag));",
                      "                }",
                      "            }",
                      "        });*/",
                      "        pm.test(\"TEST1I: consumer Accounts check\", function () {",
                      "            pm.expect(jsonData.consumerAccounts[0].consumerAccountID).to.equal(data.cnsmr_accnt_id);",
                      "            pm.expect(jsonData.consumerAccounts[0].currentBalance).to.equal(data.Curr_Bal);",
                      "            pm.expect(jsonData.consumerAccounts[0].originalBalance).to.equal(data.Orig_Bal);",
                      "        });",
                      "    }",
                      "",
                      "    pm.test(\"TEST2: Status code Check\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "    });",
                      "",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "",
                      "    var Ajv = require('ajv'),",
                      "        ajv = new Ajv({ logger: console }),",
                      "        schema = {",
                      "            \"required\": [",
                      "                \"consumerID\",",
                      "                \"legacyID\",",
                      "                \"title\",",
                      "                \"firstName\",",
                      "                \"lastName\",",
                      "                \"dateOfBirth\",",
                      "                \"email\",",
                      "                \"consumerAddress\",",
                      "                \"consumerPhones\",",
                      "                \"consumerAccounts\"",
                      "            ],",
                      "            \"properties\": {",
                      "                \"consumerID\": {",
                      "                    \"$id\": \"#/properties/consumerID\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"legacyID\": {",
                      "                    \"$id\": \"#/properties/legacyID\",",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"title\": {",
                      "                    \"$id\": \"#/properties/title\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"firstName\": {",
                      "                    \"$id\": \"#/properties/firstName\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"lastName\": {",
                      "                    \"$id\": \"#/properties/lastName\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"dateOfBirth\": {",
                      "                    \"$id\": \"#/properties/dateOfBirth\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"email\": {",
                      "                    \"$id\": \"#/properties/email\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"consumerAddress\": {",
                      "                    \"required\": [",
                      "                        \"addressLine1\",",
                      "                        \"addressLine2\",",
                      "                        \"addressLine3\",",
                      "                        \"city\",",
                      "                        \"state\",",
                      "                        \"county\",",
                      "                        \"postCode\",",
                      "                        \"country\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"addressLine1\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/addressLine1\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"addressLine2\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/addressLine2\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"addressLine3\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/addressLine3\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"city\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/city\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"state\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/state\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"county\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/county\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"postCode\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/postCode\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"country\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/country\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/properties/consumerAddress\",",
                      "                    \"type\": [\"object\", \"null\"]",
                      "                },",
                      "                \"consumerPhones\": {",
                      "                    \"items\": {",
                      "                        \"required\": [",
                      "                            \"consumerPhoneID\",",
                      "                            \"number\",",
                      "                            \"softDeleteFlag\"",
                      "                        ],",
                      "                        \"properties\": {",
                      "                            \"consumerPhoneID\": {",
                      "                                \"$id\": \"#/properties/consumerPhones/items/properties/consumerPhoneID\",",
                      "                                \"type\": [\"integer\", \"null\"]",
                      "                            },",
                      "                            \"number\": {",
                      "                                \"$id\": \"#/properties/consumerPhones/items/properties/number\",",
                      "                                \"type\": [\"string\", \"null\"]",
                      "                            },",
                      "                            \"softDeleteFlag\": {",
                      "                                \"$id\": \"#/properties/consumerPhones/items/properties/softDeleteFlag\",",
                      "                                \"type\": [\"string\", \"null\"]",
                      "                            }",
                      "                        },",
                      "                        \"$id\": \"#/properties/consumerPhones/items\",",
                      "                        \"type\": [\"object\", \"null\"]",
                      "                    },",
                      "                    \"$id\": \"#/properties/consumerPhones\",",
                      "                    \"type\": [\"array\", \"null\"]",
                      "                },",
                      "                \"consumerAccounts\": {",
                      "                    \"items\": {",
                      "                        \"required\": [",
                      "                            \"consumerAccountID\",",
                      "                            \"currentBalance\",",
                      "                            \"originalBalance\"",
                      "                        ],",
                      "                        \"properties\": {",
                      "                            \"consumerAccountID\": {",
                      "                                \"$id\": \"#/properties/consumerAccounts/items/properties/consumerAccountID\",",
                      "                                \"type\": [\"integer\", \"null\"]",
                      "                            },",
                      "                            \"currentBalance\": {",
                      "                                \"$id\": \"#/properties/consumerAccounts/items/properties/currentBalance\",",
                      "                                \"type\": [\"number\", \"null\"]",
                      "                            },",
                      "                            \"originalBalance\": {",
                      "                                \"$id\": \"#/properties/consumerAccounts/items/properties/originalBalance\",",
                      "                                \"type\": [\"number\", \"null\"]",
                      "                            }",
                      "                        },",
                      "                        \"$id\": \"#/properties/consumerAccounts/items\",",
                      "                        \"type\": [\"object\", \"null\"]",
                      "                    },",
                      "                    \"$id\": \"#/properties/consumerAccounts\",",
                      "                    \"type\": [\"array\", \"null\"]",
                      "                }",
                      "            },",
                      "            \"$id\": \"http://example.org/root.json#\",",
                      "            \"type\": \"object\",",
                      "            \"definitions\": {},",
                      "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "        };",
                      "    pm.test(\"TEST5: Schema Test\", function () {",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "    });",
                      "} catch (e) {",
                      "",
                      "    //negative Tests",
                      "",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    var cid = responseBody.split(':');",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "    pm.test(\"Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "    });",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "        pm.expect(responseCode.code).to.equal(400);",
                      "        pm.expect(responseBody).to.equal(\"Unable to find consumer with consumerId: \" + query[4]);",
                      "        pm.expect(cid[1]).to.equal(\" \" + query[4]);",
                      "    });",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "aa97ba52-8691-4307-a993-73b16ac3a1fe",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "4bb7e7ed-07c6-48b6-8012-fbf1b35b5ee2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/fulldetail",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "fulldetail"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Search for consumer by given ConsumerID"
              },
              "response": [
                {
                  "id": "06a0e4e7-0748-4fdd-99b7-e8aad2de8139",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "438d1ab4-0537-44b7-b80b-a96bbba629a4",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                },
                {
                  "id": "60ac9ae9-cd4c-4641-8e10-017d051330a7",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "7eab3d45-0fff-4ca6-8753-b598c308c497",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "8b1d2ee2-01c0-48b2-a536-37251625de1c",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "bb1e2147-1c79-4964-9bd0-6272f985d08a",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Full Detail By legacyId",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12e6b8e7-94d3-4fe4-bef8-e4effd29bcee",
                    "exec": [
                      "try {",
                      "    pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));",
                      "    pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));",
                      "    console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    console.log(query);",
                      "    pm.test(\"TEST1: Legacy ID Check\", function () {",
                      "        if (data.cnsmr_id == null) {",
                      "            pm.expect(jsonData.legacyID).to.equal(query[5]);",
                      "        } else {",
                      "            pm.expect(jsonData.legacyID).to.equal(JSON.stringify(data.legacyID));",
                      "        }",
                      "    });",
                      "",
                      "    if (data.cnsmr_id != null) {",
                      "        pm.test(\"TEST1A: Title check\", function () {",
                      "            if(jsonData.title===null){",
                      "                pm.expect(JSON.stringify(jsonData.title).toUpperCase()).to.equal(data.title);",
                      "            }else{",
                      "                pm.expect(jsonData.title).to.equal(data.title);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1B: Consumer ID check\", function () {",
                      "            pm.expect(jsonData.consumerID).to.equal(data.cnsmr_id);",
                      "        });",
                      "        pm.test(\"TEST1C: firstName check\", function () {",
                      "            pm.expect(jsonData.firstName).to.equal(data.firstname);",
                      "        });",
                      "        pm.test(\"TEST1D: lastName check\", function () {",
                      "            if (jsonData.lastName === null) {",
                      "                pm.expect(data.surname.toUpperCase()).to.deep.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.lastName).to.deep.equal(data.surname);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1E: DOB check\", function () {",
                      "            if (jsonData.dateOfBirth === null){",
                      "                pm.expect(data.dob).to.equal(\"NULL\");",
                      "            }else{",
                      "                pm.expect(jsonData.dateOfBirth.split('T')[0]).to.deep.equal(data.dob.split(' ')[0]);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1F: email check\", function () {",
                      "            if (jsonData.email === null) {",
                      "                pm.expect(data.email).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.email).to.equal(data.email);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1G: consumer address check\", function () {",
                      "            if (jsonData.consumerAddress != null) {",
                      "                pm.expect(jsonData.consumerAddress.addressLine1).to.equal(data.AddressLine1);",
                      "                if (jsonData.consumerAddress.addressLine2 === null) {",
                      "                    pm.expect(data.AddressLine2.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.addressLine2).to.equal(data.AddressLine2);",
                      "                }",
                      "                if (jsonData.consumerAddress.addressLine3 === null) {",
                      "                    pm.expect(data.AddressLine3.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.addressLine3).to.equal(data.AddressLine3);",
                      "                }",
                      "                if (jsonData.consumerAddress.city === null) {",
                      "                    pm.expect(data.City.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.city).to.equal(data.City);",
                      "                }",
                      "                if (jsonData.consumerAddress.state === null) {",
                      "                    pm.expect(data.State.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.state).to.equal(data.State);",
                      "                }",
                      "                if (jsonData.consumerAddress.county === null) {",
                      "                    pm.expect(data.County.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.county).to.equal(data.County);",
                      "                }",
                      "                if (jsonData.consumerAddress.country === null) {",
                      "                    pm.expect(data.Country.toUpperCase()).to.equal(\"NULL\")",
                      "                } else {",
                      "                    pm.expect(jsonData.consumerAddress.country).to.equal(data.Country);",
                      "                }",
                      "            }",
                      "        });",
                      "        /*pm.test(\"TEST1H: consumer Phones check\", function() {",
                      "            if(jsonData.consumerPhones!=null){",
                      "                for(var i=0;  i<(jsonData.consumerPhones.length); i++) {",
                      "                    pm.expect(jsonData.consumerPhones[i].consumerPhoneID).to.equal(JSON.stringify(data.consumerPhoneID));",
                      "                    pm.expect(jsonData.consumerPhones[i].number).to.equal(JSON.stringify(data.phn_num));",
                      "                    pm.expect(jsonData.consumerPhones[i].softDeleteFlag).to.equal(JSON.stringify(data.softDeleteFlag));",
                      "                }",
                      "            }",
                      "        });*/",
                      "        pm.test(\"TEST1I: consumer Accounts check\", function () {",
                      "            pm.expect(jsonData.consumerAccounts[0].consumerAccountID).to.equal(data.cnsmr_accnt_id);",
                      "            pm.expect(jsonData.consumerAccounts[0].currentBalance).to.equal(data.Curr_Bal);",
                      "            pm.expect(jsonData.consumerAccounts[0].originalBalance).to.equal(data.Orig_Bal);",
                      "        });",
                      "    }",
                      "",
                      "    pm.test(\"TEST2: Status code Check\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "    });",
                      "",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "",
                      "    var Ajv = require('ajv'),",
                      "        ajv = new Ajv({ logger: console }),",
                      "        schema = {",
                      "            \"required\": [",
                      "                \"consumerID\",",
                      "                \"legacyID\",",
                      "                \"title\",",
                      "                \"firstName\",",
                      "                \"lastName\",",
                      "                \"dateOfBirth\",",
                      "                \"email\",",
                      "                \"consumerAddress\",",
                      "                \"consumerPhones\",",
                      "                \"consumerAccounts\"",
                      "            ],",
                      "            \"properties\": {",
                      "                \"consumerID\": {",
                      "                    \"$id\": \"#/properties/consumerID\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"legacyID\": {",
                      "                    \"$id\": \"#/properties/legacyID\",",
                      "                    \"type\": \"string\"",
                      "                },",
                      "                \"title\": {",
                      "                    \"$id\": \"#/properties/title\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"firstName\": {",
                      "                    \"$id\": \"#/properties/firstName\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"lastName\": {",
                      "                    \"$id\": \"#/properties/lastName\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"dateOfBirth\": {",
                      "                    \"$id\": \"#/properties/dateOfBirth\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"email\": {",
                      "                    \"$id\": \"#/properties/email\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"consumerAddress\": {",
                      "                    \"required\": [",
                      "                        \"addressLine1\",",
                      "                        \"addressLine2\",",
                      "                        \"addressLine3\",",
                      "                        \"city\",",
                      "                        \"state\",",
                      "                        \"county\",",
                      "                        \"postCode\",",
                      "                        \"country\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"addressLine1\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/addressLine1\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"addressLine2\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/addressLine2\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"addressLine3\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/addressLine3\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"city\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/city\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"state\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/state\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"county\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/county\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"postCode\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/postCode\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"country\": {",
                      "                            \"$id\": \"#/properties/consumerAddress/properties/country\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/properties/consumerAddress\",",
                      "                    \"type\": [\"object\", \"null\"]",
                      "                },",
                      "                \"consumerPhones\": {",
                      "                    \"items\": {",
                      "                        \"required\": [",
                      "                            \"consumerPhoneID\",",
                      "                            \"number\",",
                      "                            \"softDeleteFlag\"",
                      "                        ],",
                      "                        \"properties\": {",
                      "                            \"consumerPhoneID\": {",
                      "                                \"$id\": \"#/properties/consumerPhones/items/properties/consumerPhoneID\",",
                      "                                \"type\": [\"integer\", \"null\"]",
                      "                            },",
                      "                            \"number\": {",
                      "                                \"$id\": \"#/properties/consumerPhones/items/properties/number\",",
                      "                                \"type\": [\"string\", \"null\"]",
                      "                            },",
                      "                            \"softDeleteFlag\": {",
                      "                                \"$id\": \"#/properties/consumerPhones/items/properties/softDeleteFlag\",",
                      "                                \"type\": [\"string\", \"null\"]",
                      "                            }",
                      "                        },",
                      "                        \"$id\": \"#/properties/consumerPhones/items\",",
                      "                        \"type\": [\"object\", \"null\"]",
                      "                    },",
                      "                    \"$id\": \"#/properties/consumerPhones\",",
                      "                    \"type\": [\"array\", \"null\"]",
                      "                },",
                      "                \"consumerAccounts\": {",
                      "                    \"items\": {",
                      "                        \"required\": [",
                      "                            \"consumerAccountID\",",
                      "                            \"currentBalance\",",
                      "                            \"originalBalance\"",
                      "                        ],",
                      "                        \"properties\": {",
                      "                            \"consumerAccountID\": {",
                      "                                \"$id\": \"#/properties/consumerAccounts/items/properties/consumerAccountID\",",
                      "                                \"type\": [\"integer\", \"null\"]",
                      "                            },",
                      "                            \"currentBalance\": {",
                      "                                \"$id\": \"#/properties/consumerAccounts/items/properties/currentBalance\",",
                      "                                \"type\": [\"number\", \"null\"]",
                      "                            },",
                      "                            \"originalBalance\": {",
                      "                                \"$id\": \"#/properties/consumerAccounts/items/properties/originalBalance\",",
                      "                                \"type\": [\"number\", \"null\"]",
                      "                            }",
                      "                        },",
                      "                        \"$id\": \"#/properties/consumerAccounts/items\",",
                      "                        \"type\": [\"object\", \"null\"]",
                      "                    },",
                      "                    \"$id\": \"#/properties/consumerAccounts\",",
                      "                    \"type\": [\"array\", \"null\"]",
                      "                }",
                      "            },",
                      "            \"$id\": \"http://example.org/root.json#\",",
                      "            \"type\": \"object\",",
                      "            \"definitions\": {},",
                      "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "        };",
                      "    pm.test(\"TEST5: Schema Test\", function () {",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "    });",
                      "} catch (e) {",
                      "",
                      "    //negative Tests",
                      "",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    var cid = responseBody.split(':');",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "    pm.test(\"Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "    });",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "        pm.expect(responseCode.code).to.equal(400);",
                      "        pm.expect(responseBody).to.equal(\"Unable to find consumer with legacyID: \" + query[5]);",
                      "        pm.expect(cid[1]).to.equal(\" \" + query[5]);",
                      "    });",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d281dd98-c30d-43cc-b708-27ba22fac488",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8159a53c-fc69-404f-b1e3-096e0dadc1f2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/legacyid/:legacyId/fulldetail",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "legacyid",
                    ":legacyId",
                    "fulldetail"
                  ],
                  "variable": [
                    {
                      "key": "legacyId",
                      "value": "{{legacyID}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Search for consumer by given ConsumerID"
              },
              "response": [
                {
                  "id": "55f36cf3-5d36-4871-b9f6-4ea412b8a7d0",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                },
                {
                  "id": "5cb689ce-c516-48ba-8e3d-325929527ec4",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6af64deb-e8e6-4a71-8787-88e661637313",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "78851f96-2e71-47b3-8d77-113e7905cc27",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "dac5507d-97db-4e71-aed4-1d474985f147",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "f7dbb638-bd77-4342-ac7c-30b7246105db",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Complaint Last",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12e6b8e7-94d3-4fe4-bef8-e4effd29bcee",
                    "exec": [
                      "try {",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    console.log(query);",
                      "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                      "        if (data.cnsmr_id == null) {",
                      "            pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[4]);",
                      "        } else {",
                      "            pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                      "        }",
                      "    });",
                      "    ",
                      "    if (data.cnsmr_id != null) {",
                      "        pm.test(\"TEST1A: fosStatus check\", function () {",
                      "            if (jsonData.fosStatus === null) {",
                      "                pm.expect(data.fosStatus).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.fosStatus).to.deep.equal(data.fosStatus);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1B: disputeReceiptDate check\", function () {",
                      "            if (jsonData.disputeReceiptDate === null) {",
                      "                pm.expect(data.disputeReceiptDate).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.disputeReceiptDate).to.deep.equal(data.disputeReceiptDate);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1C: fosComments check\", function () {",
                      "            if (jsonData.fosComments === null) {",
                      "                pm.expect(data.fosComments).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.fosComments).to.deep.equal(data.fosComments);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1D: complaintRespondReference check\", function () {",
                      "            if (jsonData.complaintRespondReference === null) {",
                      "                pm.expect(data.complaintRespondReference).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.complaintRespondReference).to.deep.equal(data.complaintRespondReference);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1E: complaintSource check\", function () {",
                      "            if (jsonData.complaintSource === null) {",
                      "                pm.expect(data.complaintSource).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.complaintSource).to.deep.equal(data.complaintSource);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1E: dateReferredToFos check\", function () {",
                      "            if (jsonData.dateReferredToFos === null) {",
                      "                pm.expect(data.dateReferredToFos).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.dateReferredToFos).to.deep.equal(data.dateReferredToFos);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1F: fosOutcome check\", function () {",
                      "            if (jsonData.fosOutcome === null) {",
                      "                pm.expect(data.fosOutcome).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.fosOutcome).to.deep.equal(data.fosOutcome);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1G: complaintOutcome check\", function () {",
                      "            if (jsonData.complaintOutcome === null) {",
                      "                pm.expect(data.complaintOutcome).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.complaintOutcome).to.deep.equal(data.complaintOutcome);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1H: disputeSource check\", function () {",
                      "            if (jsonData.disputeSource === null) {",
                      "                pm.expect(data.disputeSource).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.disputeSource).to.deep.equal(data.disputeSource);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1I: complaintComments check\", function () {",
                      "            if (jsonData.complaintComments === null) {",
                      "                pm.expect(data.complaintComments).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.complaintComments).to.deep.equal(data.complaintComments);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1J: complaintCurrentStatus check\", function () {",
                      "            if (jsonData.complaintCurrentStatus === null) {",
                      "                pm.expect(data.complaintCurrentStatus).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.complaintCurrentStatus).to.deep.equal(data.complaintCurrentStatus);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1K: disputeOutcome check\", function () {",
                      "            if (jsonData.disputeOutcome === null) {",
                      "                pm.expect(data.disputeOutcome).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.disputeOutcome).to.deep.equal(data.disputeOutcome);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1L: complaintReceiptDate check\", function () {",
                      "            if (jsonData.complaintReceiptDate === null) {",
                      "                pm.expect(data.complaintReceiptDate).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.complaintReceiptDate).to.deep.equal(data.complaintReceiptDate);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1M: disputeComments check\", function () {",
                      "            if (jsonData.disputeComments === null) {",
                      "                pm.expect(data.disputeComments).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.disputeComments).to.deep.equal(data.disputeComments);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1N: disputeRespondReference check\", function () {",
                      "            if (jsonData.disputeRespondReference === null) {",
                      "                pm.expect(data.disputeRespondReference).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.disputeRespondReference).to.deep.equal(data.disputeRespondReference);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1O: disputeCurrentStatus check\", function () {",
                      "            if (jsonData.disputeCurrentStatus === null) {",
                      "                pm.expect(data.disputeCurrentStatus).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.disputeCurrentStatus).to.deep.equal(data.disputeCurrentStatus);",
                      "            }",
                      "        });",
                      "        pm.test(\"TEST1P: referredFos check\", function () {",
                      "            if (jsonData.referredFos === null) {",
                      "                pm.expect(data.referredFos).to.equal(\"NULL\");",
                      "            } else {",
                      "                pm.expect(jsonData.referredFos).to.deep.equal(data.referredFos);",
                      "            }",
                      "        });",
                      "    }",
                      "",
                      "    pm.test(\"TEST2: Status code Check\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "    });",
                      "",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "",
                      "    var Ajv = require('ajv'),",
                      "        ajv = new Ajv({ logger: console }),",
                      "        schema = {",
                      "            \"required\": [",
                      "                \"consumerID\",",
                      "                \"fosStatus\",",
                      "                \"disputeReceiptDate\",",
                      "                \"fosComments\",",
                      "                \"complaintRespondReference\",",
                      "                \"complaintSource\",",
                      "                \"dateReferredToFos\",",
                      "                \"fosOutcome\",",
                      "                \"complaintOutcome\",",
                      "                \"disputeSource\",",
                      "                \"complaintComments\",",
                      "                \"complaintCurrentStatus\",",
                      "                \"disputeOutcome\",",
                      "                \"complaintReceiptDate\",",
                      "                \"disputeComments\",",
                      "                \"disputeRespondReference\",",
                      "                \"disputeCurrentStatus\",",
                      "                \"referredFos\"",
                      "            ],",
                      "            \"properties\": {",
                      "                \"consumerID\": {",
                      "                    \"$id\": \"#/properties/consumerID\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"fosStatus\": {",
                      "                    \"$id\": \"#/properties/fosStatus\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"disputeReceiptDate\": {",
                      "                    \"$id\": \"#/properties/disputeReceiptDate\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"fosComments\": {",
                      "                    \"$id\": \"#/properties/fosComments\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"complaintRespondReference\": {",
                      "                    \"$id\": \"#/properties/complaintRespondReference\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"complaintSource\": {",
                      "                    \"$id\": \"#/properties/complaintSource\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"dateReferredToFos\": {",
                      "                    \"$id\": \"#/properties/dateReferredToFos\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"fosOutcome\": {",
                      "                    \"$id\": \"#/properties/fosOutcome\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"complaintOutcome\": {",
                      "                    \"$id\": \"#/properties/complaintOutcome\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"disputeSource\": {",
                      "                    \"$id\": \"#/properties/disputeSource\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"complaintComments\": {",
                      "                    \"$id\": \"#/properties/complaintComments\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"complaintCurrentStatus\": {",
                      "                    \"$id\": \"#/properties/complaintCurrentStatus\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"disputeOutcome\": {",
                      "                    \"$id\": \"#/properties/disputeOutcome\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"complaintReceiptDate\": {",
                      "                    \"$id\": \"#/properties/complaintReceiptDate\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"disputeComments\": {",
                      "                    \"$id\": \"#/properties/disputeComments\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"disputeRespondReference\": {",
                      "                    \"$id\": \"#/properties/disputeRespondReference\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"disputeCurrentStatus\": {",
                      "                    \"$id\": \"#/properties/disputeCurrentStatus\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"referredFos\": {",
                      "                    \"$id\": \"#/properties/referredFos\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                }",
                      "            },",
                      "            \"$id\": \"http://example.org/root.json#\",",
                      "            \"type\": \"object\",",
                      "            \"definitions\": {},",
                      "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "        };",
                      "    pm.test(\"TEST5: Schema Test\", function () {",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "    });",
                      "} catch (e) {",
                      "",
                      "    //negative Tests",
                      "",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    var cid = responseBody.split(':');",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "    pm.test(\"Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "    });",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "        pm.expect(responseCode.code).to.equal(204);",
                      "",
                      "    });",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d281dd98-c30d-43cc-b708-27ba22fac488",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a3802f52-3d0b-4981-b64e-3fc606c2f2bd",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/complaint/last",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "complaint",
                    "last"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Search for consumer by given ConsumerID"
              },
              "response": [
                {
                  "id": "0d550e59-3cee-40bd-aeb3-45c4a3f8651e",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "4d00d6af-f926-4a0e-9e3e-a3be7c357f63",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6cacc016-1ffe-40aa-9492-98c52ddf84da",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "ab61a585-1325-477c-85a8-ef833d644e05",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                },
                {
                  "id": "e86079a5-a984-4cfb-a9c2-70a81fb09d2e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "ef99e33c-e24a-4562-8211-862705e155b5",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae51de6a-cc0a-4747-a57b-7836f206f222",
                    "exec": [
                      "try{",
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "});",
                      "}catch(e){",
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                      "    pm.response.to.have.status(400);",
                      "});",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2c9fd128-0538-41d6-88e4-60596a3d0781",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "9a5d9e38-b8af-479b-a1aa-d24b7f9c418a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "postman",
                    "type": "text"
                  },
                  {
                    "key": "correlation-id",
                    "value": "postman",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n  \"firstName\": \"{{firstname}}\",\r\n  \"lastName\": \"{{surname}}\",\r\n  \"dateOfBirth\": \"{{dob}}\",\r\n  \"applyToLinkedConsumers\": false\r\n} ",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Update the consumer basic personal details"
              },
              "response": [
                {
                  "id": "682640b6-de86-43d9-beb8-d7e710052f8b",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "78623cf6-c9f0-49bf-9f80-6b34efce4ef3",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                },
                {
                  "id": "7b781537-a46b-43f4-9cac-bb0c82fb708e",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "95ebda8b-9b18-4685-8d13-4cb1b6a4b15d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "9b430a12-d9ba-4e28-b5e3-556994fee36b",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "b4fa485d-8082-43b0-87b0-5c768838ec77",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "fd149b90-e5f0-43e1-99ee-a10d3a258413",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Previous Last Name",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "266763e0-3ef3-4913-bd3a-f3c175911c5b",
                    "exec": [
                      "try{",
                      "    pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST4: Response body check\", function() {",
                      "   pm.expect(responseBody).to.be.string; ",
                      "});",
                      "if (data.cnsmr_id!=null){",
                      "    pm.test(\"TEST5: Response verification against DB\", function() {",
                      "    pm.expect(responseBody).to.equal(data.prev_nm);",
                      "    });",
                      "}",
                      "console.log(responseody);",
                      "} catch (e) {}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "af267aca-1586-4928-8abb-2bec053b55fd",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "e41c0667-cf23-40d4-87bf-b4fba80743d3",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "correlation-id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/previouslastname",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "previouslastname"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Gets the consumers previous last name"
              },
              "response": [
                {
                  "id": "27e3fe62-2c42-4ad1-8968-dae1ebf8c901",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6a229eab-b556-43a9-baf2-d1e6b1f8e57c",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "72def00e-4250-4c2a-b061-0d3e1d4a5165",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7655ae0d-3381-4fac-b8a7-768460cedfb9",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "7c5981cd-c77f-4869-97ee-9b9ed430f9b3",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "abfb14b1-1ad0-4445-8e21-6bdf31f5c7d2",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "dc9c4c80-8ca6-4681-bdcc-04ded043fc72",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Review",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "266763e0-3ef3-4913-bd3a-f3c175911c5b",
                    "exec": [
                      "try{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST4: Response body check\", function() {",
                      "   pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[4]); ",
                      "});",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"consumerID\",",
                      "        \"reviewDate\",",
                      "        \"reviewDateSet\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"consumerID\": {",
                      "            \"$id\": \"#/properties/consumerID\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"reviewDate\": {",
                      "            \"$id\": \"#/properties/reviewDate\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"reviewDateSet\": {",
                      "            \"$id\": \"#/properties/reviewDateSet\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        }",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST5: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "if (data.cnsmr_id!=null){",
                      "    pm.test(\"TEST6: Response verification against DB\", function() {",
                      "    pm.expect(jsonData.reviewDate).to.equal(data.rev_dt);",
                      "    pm.expect(jsonData.reviewDateSet).to.equal(data.rev_dt_set);",
                      "    });",
                      "}",
                      "console.log(responseody);",
                      "} catch (e) {",
                      "    pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Set-Cookie', 'ARRAffinity=f598a5e67c332333c234dbc672c836a12d36737c036d6bf6d4b0058c249e5ed5;Path=/;HttpOnly;Domain=cabotapi-test-funcapp-consumer-ukwest.azurewebsites.net', 'Cache-Contro', 'no-cache, no-store', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6f3f4f80-29fd-48d9-a0e4-5828c5afe176",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "186a0855-124f-488c-bbee-58806a9a1ff4",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/review",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "review"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Gets the consumers previous last name"
              },
              "response": [
                {
                  "id": "3408ff6b-5712-4727-b5e8-6447ad425a70",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "9b1f28ad-5319-4a74-bfcf-4284f4d6d7e2",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "a065bd8f-e89f-4369-9287-2614eb298d51",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "bba2849a-00cb-4c1a-8109-08c7d196704a",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c5d728f8-3a2f-413c-b0df-c76833c17196",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "d14f2566-eefa-4127-b6d9-2a0e83adfa93",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "f9bfe380-4c60-46b0-91b4-c7d9549e642d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "get Third Party",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "266763e0-3ef3-4913-bd3a-f3c175911c5b",
                    "exec": [
                      "try{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST4: Response body check\", function() {",
                      "    if(jsonData[0]!=null){",
                      "        pm.expect(JSON.stringify(jsonData[0].consumerID)).to.deep.equal(query[4]); ",
                      "    }",
                      "});",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"consumerID\",",
                      "            \"reference\",",
                      "            \"startDate\",",
                      "            \"endDate\",",
                      "            \"expiryDate\",",
                      "            \"name\",",
                      "            \"dateOfBirth\",",
                      "            \"type\",",
                      "            \"addressLine1\",",
                      "            \"addressLine2\",",
                      "            \"addressLine3\",",
                      "            \"addressLine4\",",
                      "            \"postCode\",",
                      "            \"expenditure\",",
                      "            \"employed\",",
                      "            \"income\",",
                      "            \"mortgage\",",
                      "            \"telephoneNumber\",",
                      "            \"payAmount\",",
                      "            \"disposableIncome\",",
                      "            \"debtTotal\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"consumerID\": {",
                      "                \"$id\": \"#/items/properties/consumerID\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"reference\": {",
                      "                \"$id\": \"#/items/properties/reference\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"startDate\": {",
                      "                \"$id\": \"#/items/properties/startDate\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"endDate\": {",
                      "                \"$id\": \"#/items/properties/endDate\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"expiryDate\": {",
                      "                \"$id\": \"#/items/properties/expiryDate\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"name\": {",
                      "                \"$id\": \"#/items/properties/name\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"dateOfBirth\": {",
                      "                \"$id\": \"#/items/properties/dateOfBirth\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"type\": {",
                      "                \"$id\": \"#/items/properties/type\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"addressLine1\": {",
                      "                \"$id\": \"#/items/properties/addressLine1\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"addressLine2\": {",
                      "                \"$id\": \"#/items/properties/addressLine2\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"addressLine3\": {",
                      "                \"$id\": \"#/items/properties/addressLine3\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"addressLine4\": {",
                      "                \"$id\": \"#/items/properties/addressLine4\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"postCode\": {",
                      "                \"$id\": \"#/items/properties/postCode\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"expenditure\": {",
                      "                \"$id\": \"#/items/properties/expenditure\",",
                      "                \"type\": [\"number\",\"null\"]",
                      "            },",
                      "            \"employed\": {",
                      "                \"$id\": \"#/items/properties/employed\",",
                      "                \"type\": [\"boolean\",\"null\"]",
                      "            },",
                      "            \"income\": {",
                      "                \"$id\": \"#/items/properties/income\",",
                      "                \"type\": [\"number\",\"null\"]",
                      "            },",
                      "            \"mortgage\": {",
                      "                \"$id\": \"#/items/properties/mortgage\",",
                      "                \"type\": [\"integer\",\"null\", \"boolean\"]",
                      "            },",
                      "            \"telephoneNumber\": {",
                      "                \"$id\": \"#/items/properties/telephoneNumber\",",
                      "                \"type\": [\"string\",\"null\"]",
                      "            },",
                      "            \"payAmount\": {",
                      "                \"$id\": \"#/items/properties/payAmount\",",
                      "                \"type\": [\"number\",\"null\"]",
                      "            },",
                      "            \"disposableIncome\": {",
                      "                \"$id\": \"#/items/properties/disposableIncome\",",
                      "                \"type\": [\"number\",\"null\"]",
                      "            },",
                      "            \"debtTotal\": {",
                      "                \"$id\": \"#/items/properties/debtTotal\",",
                      "                \"type\": [\"number\",\"null\"]",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": [\"array\",\"null\"],",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST5: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "if (data.cnsmr_id!=null){",
                      "    pm.test(\"TEST6: Response verification against DB\", function() {",
                      "    if (jsonData[0].reference != null){",
                      "    pm.expect(jsonData[0].reference).to.equal(data.TPD_Ref);}",
                      "    if (jsonData[0].startDate != null){",
                      "    pm.expect(jsonData[0].startDate.split('T')[0]).to.equal(data.TPD_st_dt.split(' ')[0]);}",
                      "    if (jsonData[0].endDate != null){",
                      "    pm.expect(jsonData[0].endDate.split('T')[0]).to.equal(data.TPD_end_dt.split(' ')[0]);}",
                      "    if (jsonData[0].expiryDate != null){",
                      "    pm.expect(jsonData[0].expiryDate.split('T')[0]).to.equal(data.TPD_exp_dt.split(' ')[0]);}",
                      "    if (jsonData[0].name != null){",
                      "    pm.expect(jsonData[0].name).to.equal(data.TPD_nm);}",
                      "    if (jsonData[0].dateOfBirth != null){",
                      "    pm.expect(jsonData[0].dateOfBirth.split('T')[0]).to.equal(data.TPD_dob.split(' ')[0]);}",
                      "    if (jsonData[0].type != null){",
                      "    pm.expect(jsonData[0].type).to.equal(data.TPD_typ);}",
                      "    if (jsonData[0].addressLine1 != null){",
                      "    pm.expect(jsonData[0].addressLine1).to.equal(data.TPD_add1);}",
                      "    if (jsonData[0].addressLine2 != null){",
                      "    pm.expect(jsonData[0].addressLine2).to.equal(data.TPD_add2);}",
                      "    if (jsonData[0].addressLine3 != null){",
                      "    pm.expect(jsonData[0].addressLine3).to.equal(data.TPD_add3);}",
                      "    if (jsonData[0].addressLine4 != null){",
                      "    pm.expect(jsonData[0].addressLine4).to.equal(data.TPD_add4);}",
                      "    if (jsonData[0].postCode != null){",
                      "    pm.expect(jsonData[0].postCode).to.equal(data.TPD_postcode);}",
                      "    if (jsonData[0].expenditure != null){",
                      "    pm.expect(jsonData[0].expenditure).to.equal(data.TPD_expdtre);}",
                      "    if (jsonData[0].employed != null){",
                      "    pm.expect(jsonData[0].employed).to.equal(data.TPD_employment);}",
                      "    if (jsonData[0].income != null){",
                      "    pm.expect(jsonData[0].income).to.equal(data.TPD_income);}",
                      "    if (jsonData[0].mortgage != null){",
                      "    pm.expect(jsonData[0].mortgage).to.equal(data.TPD_mortgage);}",
                      "    if (jsonData[0].telephoneNumber != null){",
                      "    pm.expect(jsonData[0].telephoneNumber).to.equal(data.TPD_phn_num);}",
                      "    if (jsonData[0].payAmount != null){",
                      "    pm.expect(jsonData[0].payAmount).to.equal(data.TPD_pay_amnt);}",
                      "    if (jsonData[0].disposableIncome != null){",
                      "    pm.expect(jsonData[0].disposableIncome).to.equal(data.TPD_disp_income);}",
                      "    if (jsonData[0].debtTotal != null){",
                      "    pm.expect(jsonData[0].debtTotal).to.equal(data.TPD_debts);}",
                      "    });",
                      "}",
                      "console.log(responseody);",
                      "} catch (e) {}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "246ab7df-6878-4fdd-87f4-9b99574e92d9",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "29fb54b9-ed3d-46eb-b418-71d24104d4c1",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "correlation-id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/thirdparty",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "thirdparty"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Gets the consumers previous last name"
              },
              "response": [
                {
                  "id": "20b06804-25b6-4aa8-bd61-35b4acc119a8",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7064504a-1aee-4d9e-af29-3979f621a89b",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "76ebb151-c015-497f-a2c5-5ac6a1f901ae",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "bdfaa616-db1f-4e87-8b27-0443d93e8ede",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c3501efe-9e32-4c7f-96db-1d01df10cbea",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "cd0eb5d1-976f-4ad3-9ef6-9dd22fee77f7",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "fd45c8f1-fe0c-4f07-9c4f-19051b840409",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Vulnerable Status",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "266763e0-3ef3-4913-bd3a-f3c175911c5b",
                    "exec": [
                      "try{",
                      "",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"isVulnerableStatus\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"isVulnerableStatus\": {",
                      "            \"$id\": \"#/properties/isVulnerableStatus\",",
                      "            \"type\": \"boolean\"",
                      "        }",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST4: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "if (data.cnsmr_id!=null){",
                      "    pm.test(\"TEST5: Response verification against DB\", function() {",
                      "    if (data.WorkGroup==\"UCC\"){",
                      "        pm.expect(jsonData.isVulnerableStatus).to.be.true;",
                      "    }else{",
                      "        pm.expect(jsonData.isVulnerableStatus).to.be.false;",
                      "    }",
                      "    });",
                      "}",
                      "console.log(responseody);",
                      "} catch (e) {}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1bdd2f52-3b41-4fde-9635-18b9887caf90",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d8b66224-ceed-43f0-bc86-1c90b3a78ac6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/vulnerablestatus",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "vulnerablestatus"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Gets the consumers previous last name"
              },
              "response": [
                {
                  "id": "11239e5c-2141-4cce-a996-9943f35dc687",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "18dbb6d3-80fd-4748-bbd6-d8a6995c232d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "1cd5f471-a1cb-4091-8034-ca1a0b433c78",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "2c836af4-5123-419f-ad8c-bb2bde9b3442",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "4ca581f6-11bb-4209-8c7c-69bc7ef4b075",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "ab1fa902-5a07-43d8-a4c0-385b41493afc",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c6a7c9cb-6731-46d9-aac1-de4ee5d7afe4",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/previouslastname",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "previouslastname"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Account Owners",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12e6b8e7-94d3-4fe4-bef8-e4effd29bcee",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "/*pm.test(\"TEST1: Consumer ID Check\", function() {",
                      "    if (data.cnsmr_id==null){",
                      "    pm.expect(JSON.stringify(jsonData[0].consumerID)).to.deep.equal(query[4]);",
                      "    }else{",
                      "    pm.expect(jsonData[0].consumerID).to.deep.equal(data.cnsmr_id);",
                      "    }",
                      "});*/",
                      "",
                      "pm.test(\"TEST2: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"consumerAccountOwnerID\",",
                      "            \"consumerID\",",
                      "            \"legacyID\",",
                      "            \"consumerName\",",
                      "            \"consumerBirthDate\",",
                      "            \"ownership\",",
                      "            \"type\",",
                      "            \"attachDate\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"consumerAccountOwnerID\": {",
                      "                \"$id\": \"#/items/properties/consumerAccountOwnerID\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"consumerID\": {",
                      "                \"$id\": \"#/items/properties/consumerID\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"legacyID\": {",
                      "                \"$id\": \"#/items/properties/legacyID\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"consumerName\": {",
                      "                \"$id\": \"#/items/properties/consumerName\",",
                      "                \"type\": [\"string\", \"null\"]",
                      "            },",
                      "            \"consumerBirthDate\": {",
                      "                \"$id\": \"#/items/properties/consumerBirthDate\",",
                      "                \"type\": [\"string\", \"null\"]",
                      "            },",
                      "            \"ownership\": {",
                      "                \"$id\": \"#/items/properties/ownership\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"type\": {",
                      "                \"$id\": \"#/items/properties/type\",",
                      "                \"type\": [\"string\", \"null\"]",
                      "            },",
                      "            \"attachDate\": {",
                      "                \"$id\": \"#/items/properties/attachDate\",",
                      "                \"type\": [\"string\", \"null\"]",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": [\"object\", \"null\"]",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST5: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "} catch (e){",
                      "    ",
                      "    //negative Tests",
                      "    ",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "var cid = responseBody.split(':');",
                      "pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff','Strict-Transport-Security','max-age=31536000; includeSubDomains','Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie','');",
                      "});",
                      " pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "     pm.expect(responseCode.code).to.equal(400);",
                      "     pm.expect(responseBody).to.equal(\"Unable to find consumer with consumerId: \"+query[4]);",
                      "     pm.expect(cid[1]).to.deep.equal(\" \"+query[4]);",
                      "});",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d281dd98-c30d-43cc-b708-27ba22fac488",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "72867769-e7c8-4671-a8bc-80d9464388a8",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/account/:consumerAccountId/owner",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "account",
                    ":consumerAccountId",
                    "owner"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string"
                    },
                    {
                      "key": "consumerAccountId",
                      "value": "{{cnsmr_accnt_id}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Search for consumer by given ConsumerID"
              },
              "response": [
                {
                  "id": "07679d9b-5e03-407a-bc1e-4a9cf081c28d",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "1198c9e3-9717-42ca-a3a6-137d0e553a28",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6a0b4a7b-a66a-469a-b585-47f175c40347",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                },
                {
                  "id": "6e7f276b-3636-4cc5-bece-9d54304a4571",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "8b5cf766-6898-4244-9882-988e70909ccb",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "ea9c0e4c-e336-4a3b-9084-fd2d857480de",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "962c288a-10bb-49d1-9831-61170188d61c",
          "_postman_isSubFolder": true
        },
        {
          "name": "legacyid/{legacy Id}",
          "item": [
            {
              "name": "search By Legacy Id",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "12e6b8e7-94d3-4fe4-bef8-e4effd29bcee",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "pm.test(\"TEST1: legacy ID Check\", function() {",
                      "    if (data.cnsmr_id==null){",
                      "    pm.expect(jsonData.legacyID).to.deep.equal(query[5]);",
                      "    }else{",
                      "    pm.expect(jsonData.legacyID).to.deep.equal(JSON.stringify(data.legacyID));",
                      "    }",
                      "});",
                      "",
                      "if (data.cnsmr_id!=null){",
                      "    pm.test(\"TEST1A: AgencyID check\", function() {",
                      "        pm.expect(jsonData.agencyID).to.deep.equal(data.agencyID);",
                      "    });",
                      "    pm.test(\"TEST1B: consumerID check\", function() {",
                      "        pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                      "    });",
                      "    pm.test(\"TEST1C: firstName check\", function() {",
                      "        pm.expect(jsonData.firstName).to.deep.equal(data.firstname);",
                      "    });",
                      "    pm.test(\"TEST1D: lastName check\", function() {",
                      "        pm.expect(jsonData.lastName).to.deep.equal(data.surname);",
                      "    });",
                      "    pm.test(\"TEST1E: DOB check\", function() {",
                      "        pm.expect(jsonData.dateOfBirth.split('T')[0]).to.deep.equal(data.dob);",
                      "    });",
                      "}",
                      "",
                      "pm.test(\"TEST2: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"consumerID\",",
                      "        \"agencyID\",",
                      "        \"legacyID\",",
                      "        \"firstName\",",
                      "        \"lastName\",",
                      "        \"dateOfBirth\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"consumerID\": {",
                      "            \"$id\": \"#/properties/consumerID\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"agencyID\": {",
                      "            \"$id\": \"#/properties/agencyID\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"legacyID\": {",
                      "            \"$id\": \"#/properties/legacyID\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"firstName\": {",
                      "            \"$id\": \"#/properties/firstName\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"lastName\": {",
                      "            \"$id\": \"#/properties/lastName\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"dateOfBirth\": {",
                      "            \"$id\": \"#/properties/dateOfBirth\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST5: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "} catch (e){",
                      "    ",
                      "    //negative Tests",
                      "    ",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "var cid = responseBody.split(':');",
                      "pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff','Strict-Transport-Security','max-age=31536000; includeSubDomains','Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie','');",
                      "});",
                      " pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "     pm.expect(responseCode.code).to.equal(400);",
                      "     pm.expect(responseBody).to.equal(\"Unable to find consumer with legacyId: \"+query[5]);",
                      "     pm.expect(cid[1]).to.deep.equal(\" \"+query[5]);",
                      "});",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d281dd98-c30d-43cc-b708-27ba22fac488",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "97ea2b19-07f6-4540-9ff7-61a5e1d496df",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "{{$randomUserName}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "postman"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/legacyid/:legacyId",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "legacyid",
                    ":legacyId"
                  ],
                  "variable": [
                    {
                      "key": "legacyId",
                      "value": "{{legacyID}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Search for consumer by given ConsumerID"
              },
              "response": [
                {
                  "id": "2c7d7240-9bfb-4639-9b20-a3842262025e",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "3042b488-4df3-456f-afa8-79a54a5b5556",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7b92898c-1b96-4da1-8efe-06734ee2cead",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"agencyID\": \"<long>\",\n \"legacyID\": \"<string>\",\n \"firstName\": \"<string>\",\n \"lastName\": \"<string>\",\n \"dateOfBirth\": \"<dateTime>\"\n}"
                },
                {
                  "id": "cc23e60d-502d-4c05-b95c-ab9f0073f500",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "e3a7f3c0-362f-401d-b073-6e1e732a4db5",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "ffb7261a-7d19-41c6-86e6-89eb918dd7d8",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            }
          ],
          "_postman_id": "184f6efa-cb38-4896-87e4-7b8275d17ce5",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "2b19ae9d-4eb3-48c8-bf8b-059ce134493f"
    },
    {
      "name": "Consumer Address",
      "item": [
        {
          "name": "{consumer Id}/address",
          "item": [
            {
              "name": "correspondence",
              "item": [
                {
                  "name": "get Consumer Correspondence Address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8a2ba968-f9b1-4fa5-853b-fda31294172d",
                        "exec": [
                          "try {",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                          "        if (data.cnsmr_id == null) {",
                          "            pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[4]);",
                          "        } else {",
                          "            pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                          "        }",
                          "    });",
                          "",
                          "    if (data.cnsmr_id != null) {",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function () {",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.Corres_Add1);",
                          "        });",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function () {",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.Corres_Add2);",
                          "        });",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function () {",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.Corres_Add3);",
                          "        });",
                          "        pm.test(\"TEST1D: Address Line 4 check\", function () {",
                          "            pm.expect(jsonData.addressLine4).to.deep.equal(data.Corres_Add4);",
                          "        });",
                          "        pm.test(\"TEST1E: PostCode check\", function () {",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.Corres_postcode);",
                          "        });",
                          "        pm.test(\"TEST1F: Upsert UserID check\", function () {",
                          "            pm.expect(jsonData.upsertUserID).to.deep.equal(data.Corres_UserID);",
                          "        });",
                          "        pm.test(\"TEST1G: Upsert DTTM check\", function () {",
                          "            pm.expect(jsonData.upsertDateTime).to.deep.equal(data.Corres_upsrt_dttm);",
                          "        });",
                          "    }",
                          "",
                          "    pm.test(\"TEST2: Status code Check\", function () {",
                          "        pm.response.to.have.status(200);",
                          "    });",
                          "",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                          "    });",
                          "",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "",
                          "    var Ajv = require('ajv'),",
                          "        ajv = new Ajv({ logger: console }),",
                          "        schema = {",
                          "            \"required\": [",
                          "                \"consumerID\",",
                          "                \"addressLine1\",",
                          "                \"addressLine2\",",
                          "                \"addressLine3\",",
                          "                \"addressLine4\",",
                          "                \"postCode\"",
                          "            ],",
                          "            \"properties\": {",
                          "                \"consumerID\": {",
                          "                    \"$id\": \"#/properties/consumerID\",",
                          "                    \"type\": \"integer\"",
                          "                },",
                          "                \"addressLine1\": {",
                          "                    \"$id\": \"#/properties/addressLine1\",",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"addressLine2\": {",
                          "                    \"$id\": \"#/properties/addressLine2\",",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"addressLine3\": {",
                          "                    \"$id\": \"#/properties/addressLine3\",",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"addressLine4\": {",
                          "                    \"$id\": \"#/properties/addressLine4\",",
                          "                    \"type\": \"string\"",
                          "                },",
                          "                \"postCode\": {",
                          "                    \"$id\": \"#/properties/postCode\",",
                          "                    \"type\": \"string\"",
                          "                }",
                          "            },",
                          "            \"$id\": \"http://example.org/root.json#\",",
                          "            \"type\": \"object\",",
                          "            \"definitions\": {},",
                          "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                          "        };",
                          "    pm.test(\"TEST5: Schema Test\", function () {",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                          "    });",
                          "} catch (e) {",
                          "",
                          "    //negative Tests",
                          "",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    var cid = responseBody.split(':');",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "    pm.test(\"Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "    });",
                          "    pm.test(\"Status Code check\", function () {",
                          "        pm.expect(responseCode.code).to.equal(400);",
                          "    });",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                          "        pm.expect(responseCode.code).to.equal(400);",
                          "        pm.expect(responseBody).to.equal(\"Unable to find correspondence address associated with consumerID: \" + query[4]);",
                          "        pm.expect(cid[1]).to.equal(\" \" + query[4]);",
                          "    });",
                          "}",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "ca0c467d-2f93-47e4-94db-7965b190c16b",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6e6c3e63-7696-4628-a96c-fcfcbd2095ba",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "postman",
                        "type": "text"
                      },
                      {
                        "key": "correlation-id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/address/correspondence",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "address",
                        "correspondence"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the consumers correspondence address"
                  },
                  "response": [
                    {
                      "id": "189065b1-0562-4fe3-a943-a4f0434adc83",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "1e42a496-f45d-479b-b2a8-83a7d6b93bb4",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n \"consumerID\": \"<long>\",\n \"addressLine1\": \"<string>\",\n \"addressLine2\": \"<string>\",\n \"addressLine3\": \"<string>\",\n \"city\": \"<string>\",\n \"county\": \"<string>\",\n \"postCode\": \"<string>\",\n \"countryCode\": \"<integer>\"\n}"
                    },
                    {
                      "id": "33e50c6a-3445-4f4e-8923-3c275ddce24e",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "493a4993-808c-4a9f-986d-d095e12f19a2",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "51e509e8-8967-4edb-9a01-7a02ffacece6",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "cf64a508-3d1c-43e4-8dd2-37156c4a6b65",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "update Consumer Correspondence Address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "f4e2b47a-52e3-4b1b-bf08-540cb77455da",
                        "exec": [
                          "try{",
                          "    pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "        pm.response.to.have.status(202);",
                          "    });",
                          "    pm.test(\"TEST2: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function ()     {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {",
                          "        pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "    });",
                          "}catch(e){",
                          "        //negative Tests",
                          "",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    var cid = responseBody.split(':');",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "    pm.test(\"Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "    });",
                          "    pm.test(\"Status Code check\", function () {",
                          "        pm.expect(responseCode.code).to.equal(400);",
                          "    });",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                          "        pm.expect(responseCode.code).to.equal(400);",
                          "        pm.expect(responseBody).to.equal(\"Unable to find correspondence address associated with consumerID: \" + query[4]);",
                          "        pm.expect(cid[1]).to.equal(\" \" + query[4]);",
                          "    });",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f58d8c12-9ac9-4909-9eed-8937b46b9847",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1bf61e3d-d1c2-48d6-b278-9573b2e9b028",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "POST",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      },
                      {
                        "key": "correlation-id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"addressLine1\": \"{{AddressLine1}}\",\n    \"addressLine2\": \"{{AddressLine2}}\",\n    \"addressLine3\": \"{{AddressLine3}}\",\n    \"addressLine4\": \"{{City}}\",\n    \"postCode\": \"{{PostCode}}\",\n    \"consumerID\": \"{{cnsmr_id}}\",\n    \"applyToLinkedConsumers\": \"{{applyToLinkedConsumers}}\",\n    \"Correlation-Id\": \"{{guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/address/correspondence",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "address",
                        "correspondence"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Updates the consumers correspondence address"
                  },
                  "response": [
                    {
                      "id": "06d0eb91-1f67-4fd4-a81f-e6de7aba0765",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"addressLine4\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "0e450669-cdc3-4586-8983-b6c6c2b425b0",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"addressLine4\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "370dc891-5383-4963-813d-51beac76db0b",
                      "name": "Success",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"addressLine4\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "66400b63-a592-438b-9bf6-ace05e28a172",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"addressLine4\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "9b545d57-77e8-44a2-9930-2d9085bcfd73",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"addressLine4\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "f664d06a-6b05-4edc-b763-29f715e14ccf",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"addressLine4\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "delete Consumer Correspondence Address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "1a0b20d7-fbfb-4812-8b78-39b909ff6e71",
                        "exec": [
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4bac56fa-9f7f-4882-adf1-bcbdc7450da5",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "2391f07e-91a7-4c06-b5b8-61ae8c6ba4c5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      },
                      {
                        "key": "correlation-id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"{{cnsmr_id}}\",\n    \"applyToLinkedConsumers\": \"{{applyToLinkedConsumers}}\",\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/address/correspondence",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "address",
                        "correspondence"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Deletes the consumers correspondence address"
                  },
                  "response": [
                    {
                      "id": "4bde0105-003d-4d35-9f38-f717aadf7b21",
                      "name": "Success",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "7165cad9-c94f-4529-bcbb-6b7ccaa41ea4",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "b442b152-0c20-4c3c-88e1-b09c74acab8e",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "b629d7c1-dd3e-4717-bf60-9df19c518fed",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "d99d440b-f8f8-423f-aef9-3cb26a7a8668",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "e7db8efe-49ea-4ce1-955a-e9e09e227122",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/correspondence",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "correspondence"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                }
              ],
              "_postman_id": "fda10f12-893e-45c9-bd11-a53510e92e3f",
              "_postman_isSubFolder": true
            },
            {
              "name": "primary",
              "item": [
                {
                  "name": "get Consumer Primary Address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "77b15042-a73e-455b-a234-af1c852c89d8",
                        "exec": [
                          "try {",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                          "        if (data.cnsmr_id == null) {",
                          "            pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[4]);",
                          "        } else {",
                          "            pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                          "        }",
                          "    });",
                          "",
                          "    if (data.cnsmr_id != null) {",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function () {",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);",
                          "        });",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function () {",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);",
                          "        });",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function () {",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);",
                          "        });",
                          "        pm.test(\"TEST1D: City check\", function () {",
                          "            if (jsonData.city === null) {",
                          "                pm.expect((data.city).toUpperCase()).to.deep.equal(\"NULL\");",
                          "            } else {",
                          "                pm.expect(jsonData.city).to.deep.equal(data.City);",
                          "            }",
                          "            ",
                          "        });",
                          "        pm.test(\"TEST1E: County check\", function () {",
                          "            if (jsonData.County === null) {",
                          "                pm.expect((data.County).toUpperCase()).to.deep.equal(\"NULL\");",
                          "            } else {",
                          "                pm.expect(jsonData.county).to.deep.equal(data.County);",
                          "            }",
                          "        });",
                          "        pm.test(\"TEST1F: PostCode check\", function () {",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);",
                          "        });",
                          "        pm.test(\"TEST1G: Country Code check\", function () {",
                          "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);",
                          "        });",
                          "    }",
                          "",
                          "    pm.test(\"TEST2: Status code Check\", function () {",
                          "        pm.response.to.have.status(200);",
                          "    });",
                          "",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                          "    });",
                          "",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "",
                          "    var Ajv = require('ajv'),",
                          "        ajv = new Ajv({ logger: console }),",
                          "        schema = {",
                          "            \"required\": [",
                          "                \"consumerID\",",
                          "                \"addressLine1\",",
                          "                \"addressLine2\",",
                          "                \"addressLine3\",",
                          "                \"city\",",
                          "                \"county\",",
                          "                \"postCode\",",
                          "                \"countryCode\"",
                          "            ],",
                          "            \"properties\": {",
                          "                \"consumerID\": {",
                          "                    \"$id\": \"#/properties/consumerID\",",
                          "                    \"type\": \"integer\"",
                          "                },",
                          "                \"addressLine1\": {",
                          "                    \"$id\": \"#/properties/addressLine1\",",
                          "                    \"type\": [\"string\", \"null\"]",
                          "                },",
                          "                \"addressLine2\": {",
                          "                    \"$id\": \"#/properties/addressLine2\",",
                          "                    \"type\": [\"string\", \"null\"]",
                          "                },",
                          "                \"addressLine3\": {",
                          "                    \"$id\": \"#/properties/addressLine3\",",
                          "                    \"type\": [\"string\", \"null\"]",
                          "                },",
                          "                \"city\": {",
                          "                    \"$id\": \"#/properties/city\",",
                          "                    \"type\": [\"string\", \"null\"]",
                          "                },",
                          "                \"county\": {",
                          "                    \"$id\": \"#/properties/county\",",
                          "                    \"type\": [\"string\", \"null\"]",
                          "                },",
                          "                \"postCode\": {",
                          "                    \"$id\": \"#/properties/postCode\",",
                          "                    \"type\": [\"string\", \"null\"]",
                          "                },",
                          "                \"countryCode\": {",
                          "                    \"$id\": \"#/properties/countryCode\",",
                          "                    \"type\": [\"integer\", \"null\"]",
                          "                }",
                          "            },",
                          "            \"$id\": \"http://example.org/root.json#\",",
                          "            \"type\": \"object\",",
                          "            \"definitions\": {},",
                          "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                          "        };",
                          "    pm.test(\"TEST5: Schema Test\", function () {",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                          "    });",
                          "} catch (e) {",
                          "",
                          "    //negative Tests",
                          "",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    var cid = responseBody.split(':');",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "    pm.test(\"Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "    });",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                          "        pm.expect(responseCode.code).to.equal(400);",
                          "        pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);",
                          "        pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);",
                          "    });",
                          "}",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "0dd73714-6ae9-4c43-9769-a8a385b2f86f",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "a768b7fe-0924-4bc7-9f10-2f9f7bacf90b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/address/primary",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "address",
                        "primary"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the consumers primary address"
                  },
                  "response": [
                    {
                      "id": "55afceb0-1249-4cc5-8157-a0c0d750c750",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "8fd398cd-bf5b-427d-b1f7-2a7dc410da85",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "a3bb1068-b251-409d-a0d5-e5f88aa2880d",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "bdc3fd60-4c28-41b8-bebc-f09b00e33faf",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "e291f537-ad37-4829-af44-f51688ae3339",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n \"consumerID\": \"<long>\",\n \"addressLine1\": \"<string>\",\n \"addressLine2\": \"<string>\",\n \"addressLine3\": \"<string>\",\n \"city\": \"<string>\",\n \"county\": \"<string>\",\n \"postCode\": \"<string>\",\n \"countryCode\": \"<integer>\"\n}"
                    },
                    {
                      "id": "e5df071b-ccf9-4ad4-ad07-171baa4054fd",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "update Consumer Primary Address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "886422fd-0a35-4276-a6ec-67d9802d1da6",
                        "exec": [
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "72633d46-75d3-4a18-9c6b-dbce70c56e6e",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8fc3857d-194c-4cad-96ab-54670790ffce",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"addressLine1\": \"{{AddressLine1}}\",\n    \"addressLine2\": \"{{AddressLine2}}\",\n    \"addressLine3\": \"{{AddressLine3}}\",\n    \"city\": \"{{City}}\",\n    \"county\": \"{{County}}\",\n    \"postCode\": \"{{PostCode}}\",\n    \"countryCode\": {{countryCode}},\n    \"sourceCode\": {{add_sourceCode}},\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/address/primary",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "address",
                        "primary"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Updates the consumers primary address"
                  },
                  "response": [
                    {
                      "id": "0506dc0d-f5c0-4f6a-8010-5ce56e2dab75",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"city\": \"<string>\",\n    \"county\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"countryCode\": \"<integer>\",\n    \"sourceCode\": \"<integer>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "56f6acd2-b7a3-4b19-abfa-eea22357c138",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"city\": \"<string>\",\n    \"county\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"countryCode\": \"<integer>\",\n    \"sourceCode\": \"<integer>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "8b11cfe6-f0c3-437e-9386-ec931293ca00",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"city\": \"<string>\",\n    \"county\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"countryCode\": \"<integer>\",\n    \"sourceCode\": \"<integer>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "d99d26ba-e20a-4952-9c8f-266305dc4fc3",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"city\": \"<string>\",\n    \"county\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"countryCode\": \"<integer>\",\n    \"sourceCode\": \"<integer>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "e5508e10-5ff3-4cf3-81cb-0f44de7de140",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"city\": \"<string>\",\n    \"county\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"countryCode\": \"<integer>\",\n    \"sourceCode\": \"<integer>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "fa04ae34-a785-4fcc-be9f-fe5917743c44",
                      "name": "Success",
                      "originalRequest": {
                        "method": "POST",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"addressLine1\": \"<string>\",\n    \"addressLine2\": \"<string>\",\n    \"addressLine3\": \"<string>\",\n    \"city\": \"<string>\",\n    \"county\": \"<string>\",\n    \"postCode\": \"<string>\",\n    \"countryCode\": \"<integer>\",\n    \"sourceCode\": \"<integer>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "delete Consumer Primary Address",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "b29ef047-14c8-43da-9635-ecde2411cbca",
                        "exec": [
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "8d6fd154-c390-4853-8779-7e0d3472e613",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "855db6ec-b3b9-4759-81b3-b453ab1aca73",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/address/primary",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "address",
                        "primary"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Deletes the consumers primary address"
                  },
                  "response": [
                    {
                      "id": "0156ecfd-43b0-4735-9fd0-9f5c304dc041",
                      "name": "Success",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "0a20da22-197b-40a9-938c-be44b6c377dc",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "0b04de7d-6a13-41e8-aa92-b0dbaa2e080e",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "3252d6f4-69c5-45df-968b-ccc76e7a6e95",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "62f659ed-b881-4f78-8dbc-aec4d07dcddb",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "d2a4c6d7-ed12-407a-a3a6-9c321b5b2d60",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/address/primary",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "address",
                            "primary"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                }
              ],
              "_postman_id": "52160b61-3ee9-4daa-9722-0241eaea7ece",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "ab9d7c6f-48ef-474d-bd0a-e1facdba235e",
          "_postman_isSubFolder": true
        },
        {
          "name": "address",
          "item": [
            {
              "name": "get Address Source Reference",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "338471a4-2948-450b-b8c5-439ba0331b7c",
                    "exec": [
                      "try{",
                      "var jsonData = pm.response.json();",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"sourceCode\",",
                      "            \"valueText\",",
                      "            \"description\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"sourceCode\": {",
                      "                \"$id\": \"#/items/properties/sourceCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"valueText\": {",
                      "                \"$id\": \"#/items/properties/valueText\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"TEST05: Response values are correct\",function() {",
                      "    for (var i=0; i<jsonData.length; i++){",
                      "        pm.expect(jsonData[i].sourceCode).to.equal(i);",
                      "        switch(i){",
                      "            case 0:",
                      "                pm.expect(jsonData[i].valueText).to.equal(\"UNKNOWN\");",
                      "                pm.expect(jsonData[i].description).to.equal(\"UnKnown\");",
                      "                console.log(\"TEST\");",
                      "                break;",
                      "            case 2:",
                      "                pm.expect(jsonData[i].valueText).to.deep.equal(\"CLIENT\");",
                      "                pm.expect(jsonData[i].description).to.equal(\"Address obtained from client\");",
                      "                break;",
                      "            case 3:",
                      "                pm.expect(jsonData[i].valueText).to.equal(\"SKIPTRACE\");",
                      "                pm.expect(jsonData[i].description).to.equal(\"Address obtained from skiptrace module\");",
                      "                break;",
                      "            case 4:",
                      "                pm.expect(jsonData[i].valueText).to.equal(\"CONSUMERPORTAL\");",
                      "                pm.expect(jsonData[i].description).to.equal(\"Updated by Consumer Portal User\");",
                      "                break;",
                      "            case 5:",
                      "                pm.expect(jsonData[i].valueText).to.equal(\"PLATO\");",
                      "                pm.expect(jsonData[i].description).to.equal(\"Address obtained from Plato\");",
                      "                break;",
                      "            case 1:",
                      "                pm.expect(jsonData[i].valueText).to.equal(\"TYPEIN\");",
                      "                pm.expect(jsonData[i].description).to.equal(\"Typed in by collector or manually entered\");",
                      "                break;",
                      "                ",
                      "            }",
                      "        }",
                      "});",
                      "} catch (e) {",
                      "    pm.expect(responseCode).to.equal(500);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "542e53d9-a61f-4a6f-be55-125615a932d0",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8bb66c1a-4caf-46b8-99d5-8c98fd16cf64",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": "{{baseUrl}}/consumer/address/source",
                "description": "Get reference data concerning avaliable address sources within DebtManager"
              },
              "response": [
                {
                  "id": "285daa37-f8f1-4e7d-93e0-012b610b76c2",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/source"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "6859e1f2-a6b5-4f1a-8eaa-e69f2bc1989d",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/source"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "93b6ebc2-ab65-4e9f-8759-a23d063be5b5",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/source"
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "9d45927c-5121-431b-9c0d-a57aeb157e83",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/source"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"sourceCode\": \"<integer>\",\n \"valueText\": \"<string>\",\n \"description\": \"<string>\"\n}"
                },
                {
                  "id": "c0cb0696-c6dc-4127-8dc7-5e85f1993ef6",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/source"
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "d1b8dc61-3dba-408b-9f36-b0d8601fbc68",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/source"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Country Reference",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9fc2440e-c6c6-4afe-8d7a-be0a69139531",
                    "exec": [
                      "try{",
                      "let expectedResponse = ",
                      "[",
                      "    {",
                      "        \"countryCode\": 0,",
                      "        \"valueText\": \"UNKNOWN\",",
                      "        \"description\": \"Unknown\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 1,",
                      "        \"valueText\": \"AC\",",
                      "        \"description\": \"Ascension Island\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 2,",
                      "        \"valueText\": \"AD\",",
                      "        \"description\": \"Andorra\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 3,",
                      "        \"valueText\": \"AE\",",
                      "        \"description\": \"United Arab Emirates\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 4,",
                      "        \"valueText\": \"AF\",",
                      "        \"description\": \"Afghanistan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 5,",
                      "        \"valueText\": \"AG\",",
                      "        \"description\": \"Antigua and Barbuda\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 6,",
                      "        \"valueText\": \"AI\",",
                      "        \"description\": \"Anguilla\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 7,",
                      "        \"valueText\": \"AL\",",
                      "        \"description\": \"Albania\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 8,",
                      "        \"valueText\": \"AM\",",
                      "        \"description\": \"Armenia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 9,",
                      "        \"valueText\": \"AN\",",
                      "        \"description\": \"Netherlands Antilles\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 10,",
                      "        \"valueText\": \"AO\",",
                      "        \"description\": \"Angola\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 11,",
                      "        \"valueText\": \"AQ\",",
                      "        \"description\": \"Antarctica\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 12,",
                      "        \"valueText\": \"AR\",",
                      "        \"description\": \"Argentina\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 13,",
                      "        \"valueText\": \"AS\",",
                      "        \"description\": \"American Samoa\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 14,",
                      "        \"valueText\": \"AT\",",
                      "        \"description\": \"Austria\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 15,",
                      "        \"valueText\": \"AU\",",
                      "        \"description\": \"Australia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 16,",
                      "        \"valueText\": \"AW\",",
                      "        \"description\": \"Aruba\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 17,",
                      "        \"valueText\": \"AZ\",",
                      "        \"description\": \"Azerbaijan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 18,",
                      "        \"valueText\": \"AX\",",
                      "        \"description\": \"Aland Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 19,",
                      "        \"valueText\": \"BA\",",
                      "        \"description\": \"Bosnia and Herzegovina\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 20,",
                      "        \"valueText\": \"BB\",",
                      "        \"description\": \"Barbados\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 21,",
                      "        \"valueText\": \"BD\",",
                      "        \"description\": \"Bangladesh\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 22,",
                      "        \"valueText\": \"BE\",",
                      "        \"description\": \"Belgium\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 23,",
                      "        \"valueText\": \"BF\",",
                      "        \"description\": \"Burkina Faso\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 24,",
                      "        \"valueText\": \"BG\",",
                      "        \"description\": \"Bulgaria\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 25,",
                      "        \"valueText\": \"BH\",",
                      "        \"description\": \"Bahrain\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 26,",
                      "        \"valueText\": \"BI\",",
                      "        \"description\": \"Burundi\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 27,",
                      "        \"valueText\": \"BJ\",",
                      "        \"description\": \"Benin\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 28,",
                      "        \"valueText\": \"BM\",",
                      "        \"description\": \"Bermuda\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 29,",
                      "        \"valueText\": \"BN\",",
                      "        \"description\": \"Brunei Darussalam\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 30,",
                      "        \"valueText\": \"BO\",",
                      "        \"description\": \"Bolivia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 31,",
                      "        \"valueText\": \"BR\",",
                      "        \"description\": \"Brazil\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 32,",
                      "        \"valueText\": \"BS\",",
                      "        \"description\": \"Bahamas\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 33,",
                      "        \"valueText\": \"BT\",",
                      "        \"description\": \"Bhutan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 34,",
                      "        \"valueText\": \"BV\",",
                      "        \"description\": \"Bouvet Island\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 35,",
                      "        \"valueText\": \"BW\",",
                      "        \"description\": \"Botswana\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 36,",
                      "        \"valueText\": \"BY\",",
                      "        \"description\": \"Belarus\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 37,",
                      "        \"valueText\": \"BZ\",",
                      "        \"description\": \"Belize\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 38,",
                      "        \"valueText\": \"CA\",",
                      "        \"description\": \"Canada\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 39,",
                      "        \"valueText\": \"CC\",",
                      "        \"description\": \"Cocos (Keeling) Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 40,",
                      "        \"valueText\": \"CD\",",
                      "        \"description\": \"Congo, The Democratic Republic of the\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 41,",
                      "        \"valueText\": \"CF\",",
                      "        \"description\": \"Central African Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 42,",
                      "        \"valueText\": \"CG\",",
                      "        \"description\": \"Congo, Republic of\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 43,",
                      "        \"valueText\": \"CH\",",
                      "        \"description\": \"Switzerland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 44,",
                      "        \"valueText\": \"CI\",",
                      "        \"description\": \"Cote d Ivoire\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 45,",
                      "        \"valueText\": \"CK\",",
                      "        \"description\": \"Cook Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 46,",
                      "        \"valueText\": \"CL\",",
                      "        \"description\": \"Chile\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 47,",
                      "        \"valueText\": \"CM\",",
                      "        \"description\": \"Cameroon\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 48,",
                      "        \"valueText\": \"CN\",",
                      "        \"description\": \"China\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 49,",
                      "        \"valueText\": \"CO\",",
                      "        \"description\": \"Colombia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 50,",
                      "        \"valueText\": \"CR\",",
                      "        \"description\": \"Costa Rica\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 51,",
                      "        \"valueText\": \"CS\",",
                      "        \"description\": \"Serbia and Montenegro\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 52,",
                      "        \"valueText\": \"CU\",",
                      "        \"description\": \"Cuba\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 53,",
                      "        \"valueText\": \"CV\",",
                      "        \"description\": \"Cape Verde\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 54,",
                      "        \"valueText\": \"CX\",",
                      "        \"description\": \"Christmas Island\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 55,",
                      "        \"valueText\": \"CY\",",
                      "        \"description\": \"Cyprus\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 56,",
                      "        \"valueText\": \"CZ\",",
                      "        \"description\": \"Czech Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 57,",
                      "        \"valueText\": \"DE\",",
                      "        \"description\": \"Germany\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 58,",
                      "        \"valueText\": \"DJ\",",
                      "        \"description\": \"Djibouti\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 59,",
                      "        \"valueText\": \"DK\",",
                      "        \"description\": \"Denmark\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 60,",
                      "        \"valueText\": \"DM\",",
                      "        \"description\": \"Dominica\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 61,",
                      "        \"valueText\": \"DO\",",
                      "        \"description\": \"Dominican Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 62,",
                      "        \"valueText\": \"DZ\",",
                      "        \"description\": \"Algeria\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 63,",
                      "        \"valueText\": \"EC\",",
                      "        \"description\": \"Ecuador\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 64,",
                      "        \"valueText\": \"EE\",",
                      "        \"description\": \"Estonia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 65,",
                      "        \"valueText\": \"EG\",",
                      "        \"description\": \"Egypt\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 66,",
                      "        \"valueText\": \"EH\",",
                      "        \"description\": \"Western Sahara\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 67,",
                      "        \"valueText\": \"ER\",",
                      "        \"description\": \"Eritrea\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 68,",
                      "        \"valueText\": \"ES\",",
                      "        \"description\": \"Spain\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 69,",
                      "        \"valueText\": \"ET\",",
                      "        \"description\": \"Ethiopia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 70,",
                      "        \"valueText\": \"EU\",",
                      "        \"description\": \"European Union\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 71,",
                      "        \"valueText\": \"FI\",",
                      "        \"description\": \"Finland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 72,",
                      "        \"valueText\": \"FJ\",",
                      "        \"description\": \"Fiji\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 73,",
                      "        \"valueText\": \"FK\",",
                      "        \"description\": \"Falkland Islands (Malvinas)\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 74,",
                      "        \"valueText\": \"FM\",",
                      "        \"description\": \"Micronesia, Federal State of\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 75,",
                      "        \"valueText\": \"FO\",",
                      "        \"description\": \"Faroe Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 76,",
                      "        \"valueText\": \"FR\",",
                      "        \"description\": \"France\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 77,",
                      "        \"valueText\": \"GA\",",
                      "        \"description\": \"Gabon\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 79,",
                      "        \"valueText\": \"GD\",",
                      "        \"description\": \"Grenada\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 80,",
                      "        \"valueText\": \"GE\",",
                      "        \"description\": \"Georgia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 81,",
                      "        \"valueText\": \"GF\",",
                      "        \"description\": \"French Guiana\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 82,",
                      "        \"valueText\": \"GG\",",
                      "        \"description\": \"Guernsey\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 83,",
                      "        \"valueText\": \"GH\",",
                      "        \"description\": \"Ghana\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 84,",
                      "        \"valueText\": \"GI\",",
                      "        \"description\": \"Gibraltar\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 85,",
                      "        \"valueText\": \"GL\",",
                      "        \"description\": \"Greenland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 86,",
                      "        \"valueText\": \"GM\",",
                      "        \"description\": \"Gambia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 87,",
                      "        \"valueText\": \"GN\",",
                      "        \"description\": \"Guinea\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 88,",
                      "        \"valueText\": \"GP\",",
                      "        \"description\": \"Guadeloupe\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 89,",
                      "        \"valueText\": \"GQ\",",
                      "        \"description\": \"Equatorial Guinea\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 90,",
                      "        \"valueText\": \"GR\",",
                      "        \"description\": \"Greece\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 91,",
                      "        \"valueText\": \"GS\",",
                      "        \"description\": \"South Georgia and the South Sandwich Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 92,",
                      "        \"valueText\": \"GT\",",
                      "        \"description\": \"Guatemala\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 93,",
                      "        \"valueText\": \"GU\",",
                      "        \"description\": \"Guam\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 94,",
                      "        \"valueText\": \"GW\",",
                      "        \"description\": \"Guinea-Bissau\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 95,",
                      "        \"valueText\": \"GY\",",
                      "        \"description\": \"Guyana\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 96,",
                      "        \"valueText\": \"HK\",",
                      "        \"description\": \"Hong Kong\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 97,",
                      "        \"valueText\": \"HM\",",
                      "        \"description\": \"Heard and McDonald Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 98,",
                      "        \"valueText\": \"HN\",",
                      "        \"description\": \"Honduras\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 99,",
                      "        \"valueText\": \"HR\",",
                      "        \"description\": \"Croatia/Hrvatska\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 100,",
                      "        \"valueText\": \"HT\",",
                      "        \"description\": \"Haiti\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 101,",
                      "        \"valueText\": \"HU\",",
                      "        \"description\": \"Hungary\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 102,",
                      "        \"valueText\": \"ID\",",
                      "        \"description\": \"Indonesia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 103,",
                      "        \"valueText\": \"IE\",",
                      "        \"description\": \"Ireland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 104,",
                      "        \"valueText\": \"IL\",",
                      "        \"description\": \"Israel\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 105,",
                      "        \"valueText\": \"IM\",",
                      "        \"description\": \"Isle of Man\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 106,",
                      "        \"valueText\": \"IN\",",
                      "        \"description\": \"India\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 107,",
                      "        \"valueText\": \"IO\",",
                      "        \"description\": \"British Indian Ocean Territory\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 108,",
                      "        \"valueText\": \"IQ\",",
                      "        \"description\": \"Iraq\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 109,",
                      "        \"valueText\": \"IR\",",
                      "        \"description\": \"Iran, Islamic Republic of\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 110,",
                      "        \"valueText\": \"IS\",",
                      "        \"description\": \"Iceland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 111,",
                      "        \"valueText\": \"IT\",",
                      "        \"description\": \"Italy\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 112,",
                      "        \"valueText\": \"JE\",",
                      "        \"description\": \"Jersey\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 113,",
                      "        \"valueText\": \"JM\",",
                      "        \"description\": \"Jamaica\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 114,",
                      "        \"valueText\": \"JO\",",
                      "        \"description\": \"Jordan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 115,",
                      "        \"valueText\": \"JP\",",
                      "        \"description\": \"Japan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 116,",
                      "        \"valueText\": \"KE\",",
                      "        \"description\": \"Kenya\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 117,",
                      "        \"valueText\": \"KG\",",
                      "        \"description\": \"Kyrgyzstan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 118,",
                      "        \"valueText\": \"KH\",",
                      "        \"description\": \"Cambodia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 119,",
                      "        \"valueText\": \"KI\",",
                      "        \"description\": \"Kiribati\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 120,",
                      "        \"valueText\": \"KM\",",
                      "        \"description\": \"Comoros\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 121,",
                      "        \"valueText\": \"KN\",",
                      "        \"description\": \"Saint Kitts and Nevis\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 122,",
                      "        \"valueText\": \"KP\",",
                      "        \"description\": \"Korea, Democratic Peoples Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 123,",
                      "        \"valueText\": \"KR\",",
                      "        \"description\": \"Korea, Republic of\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 124,",
                      "        \"valueText\": \"KW\",",
                      "        \"description\": \"Kuwait\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 125,",
                      "        \"valueText\": \"KY\",",
                      "        \"description\": \"Cayman Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 126,",
                      "        \"valueText\": \"KZ\",",
                      "        \"description\": \"Kazakhstan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 127,",
                      "        \"valueText\": \"LA\",",
                      "        \"description\": \"Lao Peoples Democratic Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 128,",
                      "        \"valueText\": \"LB\",",
                      "        \"description\": \"Lebanon\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 129,",
                      "        \"valueText\": \"LC\",",
                      "        \"description\": \"Saint Lucia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 130,",
                      "        \"valueText\": \"LI\",",
                      "        \"description\": \"Liechtenstein\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 131,",
                      "        \"valueText\": \"LK\",",
                      "        \"description\": \"Sri Lanka\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 132,",
                      "        \"valueText\": \"LR\",",
                      "        \"description\": \"Liberia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 133,",
                      "        \"valueText\": \"LS\",",
                      "        \"description\": \"Lesotho\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 134,",
                      "        \"valueText\": \"LT\",",
                      "        \"description\": \"Lithuania\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 135,",
                      "        \"valueText\": \"LU\",",
                      "        \"description\": \"Luxembourg\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 136,",
                      "        \"valueText\": \"LV\",",
                      "        \"description\": \"Latvia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 137,",
                      "        \"valueText\": \"LY\",",
                      "        \"description\": \"Libyan Arab Jamahiriya\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 138,",
                      "        \"valueText\": \"MA\",",
                      "        \"description\": \"Morocco\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 139,",
                      "        \"valueText\": \"MC\",",
                      "        \"description\": \"Monaco\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 140,",
                      "        \"valueText\": \"MD\",",
                      "        \"description\": \"Moldova, Republic of\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 141,",
                      "        \"valueText\": \"MG\",",
                      "        \"description\": \"Madagascar\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 142,",
                      "        \"valueText\": \"MH\",",
                      "        \"description\": \"Marshall Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 143,",
                      "        \"valueText\": \"MK\",",
                      "        \"description\": \"Macedonia, The Former Yugoslav Republic of\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 144,",
                      "        \"valueText\": \"ML\",",
                      "        \"description\": \"Mali\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 145,",
                      "        \"valueText\": \"MM\",",
                      "        \"description\": \"Myanmar\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 146,",
                      "        \"valueText\": \"MN\",",
                      "        \"description\": \"Mongolia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 147,",
                      "        \"valueText\": \"MO\",",
                      "        \"description\": \"Macau\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 148,",
                      "        \"valueText\": \"MP\",",
                      "        \"description\": \"Northern Mariana Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 149,",
                      "        \"valueText\": \"MQ\",",
                      "        \"description\": \"Martinique\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 150,",
                      "        \"valueText\": \"MR\",",
                      "        \"description\": \"Mauritania\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 151,",
                      "        \"valueText\": \"MS\",",
                      "        \"description\": \"Montserrat\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 152,",
                      "        \"valueText\": \"MT\",",
                      "        \"description\": \"Malta\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 153,",
                      "        \"valueText\": \"MU\",",
                      "        \"description\": \"Mauritius\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 154,",
                      "        \"valueText\": \"MV\",",
                      "        \"description\": \"Maldives\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 155,",
                      "        \"valueText\": \"MW\",",
                      "        \"description\": \"Malawi\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 156,",
                      "        \"valueText\": \"MX\",",
                      "        \"description\": \"Mexico\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 157,",
                      "        \"valueText\": \"MY\",",
                      "        \"description\": \"Malaysia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 158,",
                      "        \"valueText\": \"MZ\",",
                      "        \"description\": \"Mozambique\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 159,",
                      "        \"valueText\": \"NA\",",
                      "        \"description\": \"Namibia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 160,",
                      "        \"valueText\": \"NC\",",
                      "        \"description\": \"New Caledonia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 161,",
                      "        \"valueText\": \"NE\",",
                      "        \"description\": \"Niger\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 162,",
                      "        \"valueText\": \"NF\",",
                      "        \"description\": \"Norfolk Island\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 163,",
                      "        \"valueText\": \"NG\",",
                      "        \"description\": \"Nigeria\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 164,",
                      "        \"valueText\": \"NI\",",
                      "        \"description\": \"Nicaragua\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 165,",
                      "        \"valueText\": \"NL\",",
                      "        \"description\": \"Netherlands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 166,",
                      "        \"valueText\": \"NO\",",
                      "        \"description\": \"Norway\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 167,",
                      "        \"valueText\": \"NP\",",
                      "        \"description\": \"Nepal\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 168,",
                      "        \"valueText\": \"NR\",",
                      "        \"description\": \"Nauru\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 169,",
                      "        \"valueText\": \"NU\",",
                      "        \"description\": \"Niue\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 170,",
                      "        \"valueText\": \"NZ\",",
                      "        \"description\": \"New Zealand\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 171,",
                      "        \"valueText\": \"OM\",",
                      "        \"description\": \"Oman\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 172,",
                      "        \"valueText\": \"PA\",",
                      "        \"description\": \"Panama\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 173,",
                      "        \"valueText\": \"PE\",",
                      "        \"description\": \"Peru\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 174,",
                      "        \"valueText\": \"PF\",",
                      "        \"description\": \"French Polynesia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 175,",
                      "        \"valueText\": \"PG\",",
                      "        \"description\": \"Papua New Guinea\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 176,",
                      "        \"valueText\": \"PH\",",
                      "        \"description\": \"Philippines\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 177,",
                      "        \"valueText\": \"PK\",",
                      "        \"description\": \"Pakistan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 178,",
                      "        \"valueText\": \"PL\",",
                      "        \"description\": \"Poland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 179,",
                      "        \"valueText\": \"PM\",",
                      "        \"description\": \"Saint Pierre and Miquelon\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 180,",
                      "        \"valueText\": \"PN\",",
                      "        \"description\": \"Pitcairn Island\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 181,",
                      "        \"valueText\": \"PR\",",
                      "        \"description\": \"Puerto Rico\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 182,",
                      "        \"valueText\": \"PS\",",
                      "        \"description\": \"Palestinian Territories\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 183,",
                      "        \"valueText\": \"PT\",",
                      "        \"description\": \"Portugal\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 184,",
                      "        \"valueText\": \"PW\",",
                      "        \"description\": \"Palau\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 185,",
                      "        \"valueText\": \"PY\",",
                      "        \"description\": \"Paraguay\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 186,",
                      "        \"valueText\": \"QA\",",
                      "        \"description\": \"Qatar\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 187,",
                      "        \"valueText\": \"RE\",",
                      "        \"description\": \"Reunion Island\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 188,",
                      "        \"valueText\": \"RO\",",
                      "        \"description\": \"Romania\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 189,",
                      "        \"valueText\": \"RU\",",
                      "        \"description\": \"Russian Federation\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 190,",
                      "        \"valueText\": \"RW\",",
                      "        \"description\": \"Rwanda\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 191,",
                      "        \"valueText\": \"SA\",",
                      "        \"description\": \"Saudi Arabia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 192,",
                      "        \"valueText\": \"SB\",",
                      "        \"description\": \"Solomon Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 193,",
                      "        \"valueText\": \"SC\",",
                      "        \"description\": \"Seychelles\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 194,",
                      "        \"valueText\": \"SD\",",
                      "        \"description\": \"Sudan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 195,",
                      "        \"valueText\": \"SE\",",
                      "        \"description\": \"Sweden\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 196,",
                      "        \"valueText\": \"SG\",",
                      "        \"description\": \"Singapore\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 197,",
                      "        \"valueText\": \"SH\",",
                      "        \"description\": \"Saint Helena\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 198,",
                      "        \"valueText\": \"SI\",",
                      "        \"description\": \"Slovenia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 199,",
                      "        \"valueText\": \"SJ\",",
                      "        \"description\": \"Svalbard and Jan Mayen Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 200,",
                      "        \"valueText\": \"SK\",",
                      "        \"description\": \"Slovak Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 201,",
                      "        \"valueText\": \"SL\",",
                      "        \"description\": \"Sierra Leone\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 202,",
                      "        \"valueText\": \"SM\",",
                      "        \"description\": \"San Marino\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 203,",
                      "        \"valueText\": \"SN\",",
                      "        \"description\": \"Senegal\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 204,",
                      "        \"valueText\": \"SO\",",
                      "        \"description\": \"Somalia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 205,",
                      "        \"valueText\": \"SR\",",
                      "        \"description\": \"Suriname\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 206,",
                      "        \"valueText\": \"ST\",",
                      "        \"description\": \"Sao Tome and Principe\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 207,",
                      "        \"valueText\": \"SV\",",
                      "        \"description\": \"El Salvador\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 208,",
                      "        \"valueText\": \"SY\",",
                      "        \"description\": \"Syrian Arab Republic\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 209,",
                      "        \"valueText\": \"SZ\",",
                      "        \"description\": \"Swaziland\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 210,",
                      "        \"valueText\": \"TC\",",
                      "        \"description\": \"Turks and Caicos Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 211,",
                      "        \"valueText\": \"TD\",",
                      "        \"description\": \"Chad\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 212,",
                      "        \"valueText\": \"TF\",",
                      "        \"description\": \"French Southern Territories\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 213,",
                      "        \"valueText\": \"TG\",",
                      "        \"description\": \"Togo\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 214,",
                      "        \"valueText\": \"TH\",",
                      "        \"description\": \"Thailand\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 215,",
                      "        \"valueText\": \"TJ\",",
                      "        \"description\": \"Tajikistan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 216,",
                      "        \"valueText\": \"TK\",",
                      "        \"description\": \"Tokelau\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 217,",
                      "        \"valueText\": \"TL\",",
                      "        \"description\": \"Timor-Leste\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 218,",
                      "        \"valueText\": \"TM\",",
                      "        \"description\": \"Turkmenistan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 219,",
                      "        \"valueText\": \"TN\",",
                      "        \"description\": \"Tunisia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 220,",
                      "        \"valueText\": \"TO\",",
                      "        \"description\": \"Tonga\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 221,",
                      "        \"valueText\": \"TP\",",
                      "        \"description\": \"East Timor\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 222,",
                      "        \"valueText\": \"TR\",",
                      "        \"description\": \"Turkey\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 223,",
                      "        \"valueText\": \"TT\",",
                      "        \"description\": \"Trinidad and Tobago\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 224,",
                      "        \"valueText\": \"TV\",",
                      "        \"description\": \"Tuvalu\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 225,",
                      "        \"valueText\": \"TW\",",
                      "        \"description\": \"Taiwan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 226,",
                      "        \"valueText\": \"TZ\",",
                      "        \"description\": \"Tanzania\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 227,",
                      "        \"valueText\": \"UA\",",
                      "        \"description\": \"Ukraine\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 228,",
                      "        \"valueText\": \"UG\",",
                      "        \"description\": \"Uganda\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 229,",
                      "        \"valueText\": \"UK\",",
                      "        \"description\": \"United Kingdom\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 230,",
                      "        \"valueText\": \"UM\",",
                      "        \"description\": \"United States Minor Outlying Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 231,",
                      "        \"valueText\": \"US\",",
                      "        \"description\": \"United States\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 232,",
                      "        \"valueText\": \"UY\",",
                      "        \"description\": \"Uruguay\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 233,",
                      "        \"valueText\": \"UZ\",",
                      "        \"description\": \"Uzbekistan\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 234,",
                      "        \"valueText\": \"VA\",",
                      "        \"description\": \"Holy See (Vatican City State)\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 235,",
                      "        \"valueText\": \"VC\",",
                      "        \"description\": \"Saint Vincent and the Grenadines\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 236,",
                      "        \"valueText\": \"VE\",",
                      "        \"description\": \"Venezuela\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 237,",
                      "        \"valueText\": \"VG\",",
                      "        \"description\": \"Virgin Islands, British\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 238,",
                      "        \"valueText\": \"VI\",",
                      "        \"description\": \"Virgin Islands, US\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 239,",
                      "        \"valueText\": \"VN\",",
                      "        \"description\": \"Vietnam\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 240,",
                      "        \"valueText\": \"VU\",",
                      "        \"description\": \"Vanuatu\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 241,",
                      "        \"valueText\": \"WF\",",
                      "        \"description\": \"Wallis and Futuna Islands\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 242,",
                      "        \"valueText\": \"WS\",",
                      "        \"description\": \"Samoa\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 243,",
                      "        \"valueText\": \"YE\",",
                      "        \"description\": \"Yemen\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 244,",
                      "        \"valueText\": \"YT\",",
                      "        \"description\": \"Mayotte\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 245,",
                      "        \"valueText\": \"YU\",",
                      "        \"description\": \"Yugoslavia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 246,",
                      "        \"valueText\": \"ZA\",",
                      "        \"description\": \"South Africa\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 247,",
                      "        \"valueText\": \"ZM\",",
                      "        \"description\": \"Zambia\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 248,",
                      "        \"valueText\": \"ZW\",",
                      "        \"description\": \"Zimbabwe\"",
                      "    },",
                      "    {",
                      "        \"countryCode\": 249,",
                      "        \"valueText\": \"GB\",",
                      "        \"description\": \"Great Britain\"",
                      "    }",
                      "];",
                      "console.log(expectedResponse);",
                      "var jsonData = pm.response.json();",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"countryCode\",",
                      "            \"valueText\",",
                      "            \"description\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"countryCode\": {",
                      "                \"$id\": \"#/items/properties/countryCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"valueText\": {",
                      "                \"$id\": \"#/items/properties/valueText\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"TEST05: Response values are correct\",function() {",
                      "    for (var i=0; i<jsonData.length; i++){",
                      "        if(i<78){",
                      "        pm.expect(jsonData[i].countryCode).to.equal(i);",
                      "        pm.expect(jsonData[i].valueText).to.deep.equal(expectedResponse[i].valueText);",
                      "        pm.expect(jsonData[i].description).to.deep.equal(expectedResponse[i].description);",
                      "        } else {",
                      "            pm.expect(jsonData[i].countryCode).to.equal(i+1);",
                      "            pm.expect(jsonData[i].valueText).to.deep.equal(expectedResponse[i].valueText);",
                      "        pm.expect(jsonData[i].description).to.deep.equal(expectedResponse[i].description);",
                      "        }",
                      "    }",
                      "});",
                      "} catch (e) {",
                      "    pm.expect(responseCode).to.equal(500);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bb491bec-59f4-48e4-9c20-c1f9ea594042",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "0e933ab5-a6fd-444d-be90-4cd5d7eff2bb",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": "{{baseUrl}}/consumer/address/country",
                "description": "Get reference data concerning avaliable countries within DebtManager"
              },
              "response": [
                {
                  "id": "08390199-17b6-41be-ae74-b9e92ad009bc",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/country"
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "3f64a5ef-63cf-45a7-9a72-2da2501a557c",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/country"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "47d23832-a88a-4e24-aef0-e0a69fa5ffc4",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/country"
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7038fa2e-d5e1-49d0-8670-49d239a25d55",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/country"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "74af0194-aff0-4b66-9d5e-ce25e2bb9552",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/country"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "f436535f-2b14-4842-a695-7aeed6a1cbfd",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/address/country"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"countryCode\": \"<integer>\",\n \"valueText\": \"<string>\",\n \"description\": \"<string>\"\n}"
                }
              ]
            }
          ],
          "_postman_id": "f983c41e-c61f-4737-9871-3d354895ce48",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "5508fb48-cb3a-4fd6-ae30-14459cd85f05"
    },
    {
      "name": "Consumer Email",
      "item": [
        {
          "name": "email",
          "item": [
            {
              "name": "common Domain List",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d58e1d4f-43f1-455b-a0b8-461f308f2b00",
                    "exec": [
                      "try{",
                      "let expectedResponse = [",
                      "    \"aol.com\",",
                      "    \"btinternet.com\",",
                      "    \"gmail.com\",",
                      "    \"googlemail.com\",",
                      "    \"hotmail.co.uk\",",
                      "    \"hotmail.com\",",
                      "    \"live.co.uk\",",
                      "    \"live.com\",",
                      "    \"msn.com\",",
                      "    \"outlook.com\",",
                      "    \"sky.com\",",
                      "    \"yahoo.co.uk\",",
                      "    \"yahoo.com\"",
                      "];",
                      "var jsonData = pm.response.json();",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"string\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"TEST05: Response values are correct\",function() {",
                      "    for (var i=0; i<jsonData.length; i++){",
                      "        pm.expect(jsonData[i]).to.deep.equal(expectedResponse[i]);",
                      "    }",
                      "});",
                      "} catch (e) {",
                      "    pm.expect(responseCode).to.equal(500);",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "8fc3b011-3075-40b8-92a1-743f9a619f77",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d1e31ecf-be90-47ce-b7f0-a47ebefc752a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": "{{baseUrl}}/consumer/email/domainlist",
                "description": "Get a pre-defined list of common EMail domains"
              },
              "response": [
                {
                  "id": "0675aff0-c27d-47e4-abb1-5e7f3fabb92d",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "109a3eda-cf7d-438f-8d7b-44a0551e7506",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "13c68410-1151-4fcb-817c-be597d569b8f",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "42e7a6bb-1c90-4484-8c30-98f0cf48286c",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "512c8241-787d-477e-a744-9049e516980a",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n \"<string>\",\n \"<string>\"\n]"
                },
                {
                  "id": "5eb869e1-8013-48c5-a786-bc50636c48d7",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c05564e2-d6ea-4e3b-95e8-9b537fa88759",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": "{{baseUrl}}/email/domainlist"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "4ab9c9f9-79fb-460e-8556-0c5b086aa707",
          "_postman_isSubFolder": true
        },
        {
          "name": "{consumer Id}/email",
          "item": [
            {
              "name": "previous",
              "item": [
                {
                  "name": "get Previous",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "621f4706-a559-418e-a7b2-a195df1e7fdd",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "b986df0a-f0aa-4141-8bda-648c51477588",
                        "exec": [
                          "try {",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                          "    var jsonData = JSON.parse(responseBody);",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                          "        if (data.cnsmr_id == null) {",
                          "            for (var i = 0; i < jsonData.length; i++) {",
                          "                pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);",
                          "            }",
                          "        } else {",
                          "            pm.expect(jsonData[0].consumerID).to.deep.equal(data.cnsmr_id);",
                          "        }",
                          "    });",
                          "",
                          "    /*if (data.cnsmr_id!=null){",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function() {",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);",
                          "        });",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function() {",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);",
                          "        });",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function() {",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);",
                          "        });",
                          "        pm.test(\"TEST1D: City check\", function() {",
                          "            pm.expect(jsonData.city).to.deep.equal(data.City);",
                          "        });",
                          "        pm.test(\"TEST1E: County check\", function() {",
                          "            pm.expect(jsonData.county).to.deep.equal(data.County);",
                          "        });",
                          "        pm.test(\"TEST1F: PostCode check\", function() {",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);",
                          "        });",
                          "        pm.test(\"TEST1G: Country Code check\", function() {",
                          "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);",
                          "        });",
                          "    }*/",
                          "",
                          "    pm.test(\"TEST2: Status code Check\", function () {",
                          "        pm.response.to.have.status(200);",
                          "    });",
                          "",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                          "    });",
                          "",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "",
                          "    var Ajv = require('ajv'),",
                          "        ajv = new Ajv({ logger: console }),",
                          "        schema = {",
                          "    \"items\": {",
                          "        \"required\": [",
                          "            \"consumerID\",",
                          "            \"emailAddress\",",
                          "            \"validityCode\",",
                          "            \"effectiveDate\",",
                          "            \"optIn\",",
                          "            \"optInDateTime\",",
                          "            \"confirmedDate\",",
                          "            \"auditDateTime\",",
                          "            \"auditUserID\",",
                          "            \"auditUsername\"",
                          "        ],",
                          "        \"properties\": {",
                          "            \"consumerID\": {",
                          "                \"$id\": \"#/items/properties/consumerID\",",
                          "                \"type\": \"integer\"",
                          "            },",
                          "            \"emailAddress\": {",
                          "                \"$id\": \"#/items/properties/emailAddress\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"validityCode\": {",
                          "                \"$id\": \"#/items/properties/validityCode\",",
                          "                \"type\": \"null\"",
                          "            },",
                          "            \"effectiveDate\": {",
                          "                \"$id\": \"#/items/properties/effectiveDate\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"optIn\": {",
                          "                \"$id\": \"#/items/properties/optIn\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"optInDateTime\": {",
                          "                \"$id\": \"#/items/properties/optInDateTime\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"confirmedDate\": {",
                          "                \"$id\": \"#/items/properties/confirmedDate\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"auditDateTime\": {",
                          "                \"$id\": \"#/items/properties/auditDateTime\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"auditUserID\": {",
                          "                \"$id\": \"#/items/properties/auditUserID\",",
                          "                \"type\": \"integer\"",
                          "            },",
                          "            \"auditUsername\": {",
                          "                \"$id\": \"#/items/properties/auditUsername\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            }",
                          "        },",
                          "        \"$id\": \"#/items\",",
                          "        \"type\": \"object\"",
                          "    },",
                          "    \"$id\": \"http://example.org/root.json#\",",
                          "    \"type\": \"array\",",
                          "    \"definitions\": {},",
                          "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                          "};",
                          "    pm.test(\"TEST5: Schema Test\", function () {",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                          "    });",
                          "} catch (e) {",
                          "",
                          "    //negative Tests",
                          "",
                          "    var req = request.url;",
                          "    var query = request.url.split('/');",
                          "    var cid = responseBody.split(':');",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "    pm.test(\"Response Header Checks\", function () {",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "    });",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                          "        pm.expect(responseCode.code).to.equal(204);",
                          "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);",
                          "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);",
                          "    });",
                          "}",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "629a9e9c-dbf2-45c7-b74d-1398f1c2092c",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/email/previous",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "email",
                        "previous"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the previous consumer email addresses"
                  },
                  "response": [
                    {
                      "id": "05364a1e-727a-49e6-8f9f-3efc23fe6855",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "0646e9ba-de41-4737-987f-f7630732a683",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "323f0a8a-1a7f-415b-9bfb-6b025475b2e8",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "5c3b5ac5-d5a8-49d2-8d6d-d3c95b50c06b",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n {\n  \"consumerID\": \"<long>\",\n  \"emailAddress\": \"<string>\",\n  \"validityCode\": \"<integer>\",\n  \"effectiveDate\": \"<dateTime>\",\n  \"optIn\": \"<boolean>\",\n  \"optInDateTime\": \"<dateTime>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerID\": \"<long>\",\n  \"emailAddress\": \"<string>\",\n  \"validityCode\": \"<integer>\",\n  \"effectiveDate\": \"<dateTime>\",\n  \"optIn\": \"<boolean>\",\n  \"optInDateTime\": \"<dateTime>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                    },
                    {
                      "id": "6af1ac4d-eb39-4a4b-9594-d9040e7462b1",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "76503ad0-2e1f-41f8-a70d-5f113c07a339",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "cb71f0ae-ccfa-4fcb-994c-783e2004f4e0",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "get Previous Invalid",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "c13e21ca-7f13-4832-91b4-123c0258b272",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d5fe4761-1eb8-43a3-a9a9-9cd3fa0b960d",
                        "exec": [
                          "try {\r",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {\r",
                          "        if (data.cnsmr_id == null) {\r",
                          "            for (var i = 0; i < jsonData.length; i++) {\r",
                          "                pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);\r",
                          "            }\r",
                          "        } else {\r",
                          "            pm.expect(jsonData[0].consumerID).to.deep.equal(data.cnsmr_id);\r",
                          "        }\r",
                          "    });\r",
                          "\r",
                          "    /*if (data.cnsmr_id!=null){\r",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);\r",
                          "        });\r",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);\r",
                          "        });\r",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);\r",
                          "        });\r",
                          "        pm.test(\"TEST1D: City check\", function() {\r",
                          "            pm.expect(jsonData.city).to.deep.equal(data.City);\r",
                          "        });\r",
                          "        pm.test(\"TEST1E: County check\", function() {\r",
                          "            pm.expect(jsonData.county).to.deep.equal(data.County);\r",
                          "        });\r",
                          "        pm.test(\"TEST1F: PostCode check\", function() {\r",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);\r",
                          "        });\r",
                          "        pm.test(\"TEST1G: Country Code check\", function() {\r",
                          "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);\r",
                          "        });\r",
                          "    }*/\r",
                          "\r",
                          "    pm.test(\"TEST2: Status code Check\", function () {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "\r",
                          "    var Ajv = require('ajv'),\r",
                          "        ajv = new Ajv({ logger: console }),\r",
                          "        schema = {\r",
                          "    \"items\": {\r",
                          "        \"required\": [\r",
                          "            \"consumerID\",\r",
                          "            \"emailAddress\",\r",
                          "            \"validityCode\",\r",
                          "            \"effectiveDate\",\r",
                          "            \"optIn\",\r",
                          "            \"optInDateTime\",\r",
                          "            \"confirmedDate\",\r",
                          "            \"auditDateTime\",\r",
                          "            \"auditUserID\",\r",
                          "            \"auditUsername\"\r",
                          "        ],\r",
                          "        \"properties\": {\r",
                          "            \"consumerID\": {\r",
                          "                \"$id\": \"#/items/properties/consumerID\",\r",
                          "                \"type\": \"integer\"\r",
                          "            },\r",
                          "            \"emailAddress\": {\r",
                          "                \"$id\": \"#/items/properties/emailAddress\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"validityCode\": {\r",
                          "                \"$id\": \"#/items/properties/validityCode\",\r",
                          "                \"type\": \"null\"\r",
                          "            },\r",
                          "            \"effectiveDate\": {\r",
                          "                \"$id\": \"#/items/properties/effectiveDate\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"optIn\": {\r",
                          "                \"$id\": \"#/items/properties/optIn\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"optInDateTime\": {\r",
                          "                \"$id\": \"#/items/properties/optInDateTime\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"confirmedDate\": {\r",
                          "                \"$id\": \"#/items/properties/confirmedDate\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"auditDateTime\": {\r",
                          "                \"$id\": \"#/items/properties/auditDateTime\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"auditUserID\": {\r",
                          "                \"$id\": \"#/items/properties/auditUserID\",\r",
                          "                \"type\": \"integer\"\r",
                          "            },\r",
                          "            \"auditUsername\": {\r",
                          "                \"$id\": \"#/items/properties/auditUsername\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            }\r",
                          "        },\r",
                          "        \"$id\": \"#/items\",\r",
                          "        \"type\": \"object\"\r",
                          "    },\r",
                          "    \"$id\": \"http://example.org/root.json#\",\r",
                          "    \"type\": \"array\",\r",
                          "    \"definitions\": {},\r",
                          "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                          "};\r",
                          "    pm.test(\"TEST5: Schema Test\", function () {\r",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                          "    });\r",
                          "} catch (e) {\r",
                          "\r",
                          "    //negative Tests\r",
                          "\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    var cid = responseBody.split(':');\r",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "    pm.test(\"Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                          "    });\r",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {\r",
                          "        pm.expect(responseCode.code).to.equal(204);\r",
                          "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);\r",
                          "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);\r",
                          "    });\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "1daa4f33-4f46-4a4e-b313-d6284fba7e40",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/email/previous/invalid",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "email",
                        "previous",
                        "invalid"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the previous invalid consumer email addresses"
                  },
                  "response": [
                    {
                      "id": "37ab985b-04d1-4695-b57d-159e30c516d1",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "3c83059c-e000-46e4-ace4-d416541250cf",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "3ea205bf-7288-43cc-9022-4ee40c70e8eb",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "412843a9-97da-493d-a860-b90768259e18",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "5327f31b-52ff-41df-a982-3d22774d8212",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n {\n  \"consumerID\": \"<long>\",\n  \"emailAddress\": \"<string>\",\n  \"validityCode\": \"<integer>\",\n  \"effectiveDate\": \"<dateTime>\",\n  \"optIn\": \"<boolean>\",\n  \"optInDateTime\": \"<dateTime>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerID\": \"<long>\",\n  \"emailAddress\": \"<string>\",\n  \"validityCode\": \"<integer>\",\n  \"effectiveDate\": \"<dateTime>\",\n  \"optIn\": \"<boolean>\",\n  \"optInDateTime\": \"<dateTime>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                    },
                    {
                      "id": "8d8ac682-dbc6-4e29-a243-9ab7533be91c",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "f9325ad4-2a8c-4260-9370-67c1dc8418df",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/invalid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "invalid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "get Previous Valid",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "95d26c9e-7b14-4624-95fd-1079a6708fd6",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "14f7b634-bc2e-458d-8e2c-44b76f793879",
                        "exec": [
                          "try {\r",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {\r",
                          "        if (data.cnsmr_id == null) {\r",
                          "            for (var i = 0; i < jsonData.length; i++) {\r",
                          "                pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);\r",
                          "            }\r",
                          "        } else {\r",
                          "            pm.expect(jsonData[0].consumerID).to.deep.equal(data.cnsmr_id);\r",
                          "        }\r",
                          "    });\r",
                          "\r",
                          "    /*if (data.cnsmr_id!=null){\r",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);\r",
                          "        });\r",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);\r",
                          "        });\r",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);\r",
                          "        });\r",
                          "        pm.test(\"TEST1D: City check\", function() {\r",
                          "            pm.expect(jsonData.city).to.deep.equal(data.City);\r",
                          "        });\r",
                          "        pm.test(\"TEST1E: County check\", function() {\r",
                          "            pm.expect(jsonData.county).to.deep.equal(data.County);\r",
                          "        });\r",
                          "        pm.test(\"TEST1F: PostCode check\", function() {\r",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);\r",
                          "        });\r",
                          "        pm.test(\"TEST1G: Country Code check\", function() {\r",
                          "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);\r",
                          "        });\r",
                          "    }*/\r",
                          "\r",
                          "    pm.test(\"TEST2: Status code Check\", function () {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "\r",
                          "    var Ajv = require('ajv'),\r",
                          "        ajv = new Ajv({ logger: console }),\r",
                          "        schema = {\r",
                          "    \"items\": {\r",
                          "        \"required\": [\r",
                          "            \"consumerID\",\r",
                          "            \"emailAddress\",\r",
                          "            \"validityCode\",\r",
                          "            \"effectiveDate\",\r",
                          "            \"optIn\",\r",
                          "            \"optInDateTime\",\r",
                          "            \"confirmedDate\",\r",
                          "            \"auditDateTime\",\r",
                          "            \"auditUserID\",\r",
                          "            \"auditUsername\"\r",
                          "        ],\r",
                          "        \"properties\": {\r",
                          "            \"consumerID\": {\r",
                          "                \"$id\": \"#/items/properties/consumerID\",\r",
                          "                \"type\": \"integer\"\r",
                          "            },\r",
                          "            \"emailAddress\": {\r",
                          "                \"$id\": \"#/items/properties/emailAddress\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"validityCode\": {\r",
                          "                \"$id\": \"#/items/properties/validityCode\",\r",
                          "                \"type\": \"null\"\r",
                          "            },\r",
                          "            \"effectiveDate\": {\r",
                          "                \"$id\": \"#/items/properties/effectiveDate\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"optIn\": {\r",
                          "                \"$id\": \"#/items/properties/optIn\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"optInDateTime\": {\r",
                          "                \"$id\": \"#/items/properties/optInDateTime\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"confirmedDate\": {\r",
                          "                \"$id\": \"#/items/properties/confirmedDate\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"auditDateTime\": {\r",
                          "                \"$id\": \"#/items/properties/auditDateTime\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            },\r",
                          "            \"auditUserID\": {\r",
                          "                \"$id\": \"#/items/properties/auditUserID\",\r",
                          "                \"type\": \"integer\"\r",
                          "            },\r",
                          "            \"auditUsername\": {\r",
                          "                \"$id\": \"#/items/properties/auditUsername\",\r",
                          "                \"type\": [\"string\", \"null\"]\r",
                          "            }\r",
                          "        },\r",
                          "        \"$id\": \"#/items\",\r",
                          "        \"type\": \"object\"\r",
                          "    },\r",
                          "    \"$id\": \"http://example.org/root.json#\",\r",
                          "    \"type\": \"array\",\r",
                          "    \"definitions\": {},\r",
                          "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                          "};\r",
                          "    pm.test(\"TEST5: Schema Test\", function () {\r",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                          "    });\r",
                          "} catch (e) {\r",
                          "\r",
                          "    //negative Tests\r",
                          "\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    var cid = responseBody.split(':');\r",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "    pm.test(\"Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                          "    });\r",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {\r",
                          "        pm.expect(responseCode.code).to.equal(204);\r",
                          "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);\r",
                          "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);\r",
                          "    });\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0c857e1b-0dd0-4c2f-9041-d29803673c4b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/email/previous/valid",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "email",
                        "previous",
                        "valid"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the previous valid consumer email addresses"
                  },
                  "response": [
                    {
                      "id": "0876a296-f3ba-4c9e-8645-1541c8672963",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "0f3c88ef-599a-4b4d-a050-4d8a88eb1f56",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "1605090f-d820-4af8-895c-d639f030ae8c",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n {\n  \"consumerID\": \"<long>\",\n  \"emailAddress\": \"<string>\",\n  \"validityCode\": \"<integer>\",\n  \"effectiveDate\": \"<dateTime>\",\n  \"optIn\": \"<boolean>\",\n  \"optInDateTime\": \"<dateTime>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerID\": \"<long>\",\n  \"emailAddress\": \"<string>\",\n  \"validityCode\": \"<integer>\",\n  \"effectiveDate\": \"<dateTime>\",\n  \"optIn\": \"<boolean>\",\n  \"optInDateTime\": \"<dateTime>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                    },
                    {
                      "id": "55f011ea-b39e-45e2-84d8-5e0993e22eda",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "94066afb-e87c-44db-87f1-ed087d8f4034",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "bf053efc-3c61-43e4-b25e-4c9b1de4560d",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "d3d41aee-240b-4fe3-8e44-75f3b92d333a",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/email/previous/valid",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "email",
                            "previous",
                            "valid"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                }
              ],
              "_postman_id": "f036fe0d-c897-4706-a928-243329853019",
              "_postman_isSubFolder": true
            },
            {
              "name": "get",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8cc1ba0-fb89-4c30-a0ea-997247f8c2c1",
                    "exec": [
                      "try {",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "    var jsonData = JSON.parse(responseBody);",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                      "        if (data.cnsmr_id == null) {",
                      "            pm.expect(JSON.stringify(jsonData.consumerID)).to.deep.equal(query[4]);",
                      "        } else {",
                      "            pm.expect(jsonData.consumerID).to.deep.equal(data.cnsmr_id);",
                      "        }",
                      "    });",
                      "",
                      "    if (data.cnsmr_id != null) {",
                      "        pm.test(\"TEST1A: email check\", function () {",
                      "            pm.expect(jsonData.emailAddress).to.deep.equal(data.email);",
                      "        });",
                      "        if (jsonData.validityCode != null) {",
                      "        pm.test(\"TEST1B: validity check\", function () {",
                      "            pm.expect(jsonData.validityCode).to.deep.equal(data.validityCode);",
                      "        });",
                      "        }",
                      "        if (jsonData.effectiveDate != null) {",
                      "            pm.test(\"TEST1C: effective date check\", function () {",
                      "                pm.expect(jsonData.effectiveDate).to.deep.equal(data.effectiveDate);",
                      "            });",
                      "        }",
                      "        pm.test(\"TEST1D: Opt in check\", function () {",
                      "            if (jsonData.optIn == false || jsonData.optIn == null) {",
                      "                pm.expect(data.optIn).to.deep.equal(\"N\");",
                      "            } else {",
                      "                pm.expect(data.optIn).to.deep.equal(\"Y\");",
                      "            }",
                      "        });",
                      "        if (jsonData.optInDateTime != null) {",
                      "            pm.test(\"TEST1E: Opt in date and time check\", function () {",
                      "                pm.expect(jsonData.optInDateTime).to.deep.equal(data.optInDateTime);",
                      "            });",
                      "        }",
                      "        if (jsonData.confirmedDate != null) {",
                      "            pm.test(\"TEST1F: confimred date check\", function () {",
                      "                pm.expect(jsonData.confirmedDate).to.deep.equal(data.confirmedDate);",
                      "            });",
                      "        }",
                      "    }",
                      "",
                      "    pm.test(\"TEST2: Status code Check\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "    });",
                      "",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "",
                      "    var Ajv = require('ajv'),",
                      "        ajv = new Ajv({ logger: console }),",
                      "        schema = {",
                      "            \"required\": [",
                      "                \"consumerID\",",
                      "                \"emailAddress\",",
                      "                \"validityCode\",",
                      "                \"effectiveDate\",",
                      "                \"optIn\",",
                      "                \"optInDateTime\",",
                      "                \"confirmedDate\"",
                      "            ],",
                      "            \"properties\": {",
                      "                \"consumerID\": {",
                      "                    \"$id\": \"#/properties/consumerID\",",
                      "                    \"type\": \"integer\"",
                      "                },",
                      "                \"emailAddress\": {",
                      "                    \"$id\": \"#/properties/emailAddress\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"validityCode\": {",
                      "                    \"$id\": \"#/properties/validityCode\",",
                      "                    \"type\": [\"integer\", \"null\"]",
                      "                },",
                      "                \"effectiveDate\": {",
                      "                    \"$id\": \"#/properties/effectiveDate\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"optIn\": {",
                      "                    \"$id\": \"#/properties/optIn\",",
                      "                    \"type\": [\"boolean\", \"null\"]",
                      "                },",
                      "                \"optInDateTime\": {",
                      "                    \"$id\": \"#/properties/optInDateTime\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                },",
                      "                \"confirmedDate\": {",
                      "                    \"$id\": \"#/properties/confirmedDate\",",
                      "                    \"type\": [\"string\", \"null\"]",
                      "                }",
                      "            },",
                      "            \"$id\": \"http://example.org/root.json#\",",
                      "            \"type\": \"object\",",
                      "            \"definitions\": {},",
                      "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "        };",
                      "    pm.test(\"TEST5: Schema Test\", function () {",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "    });",
                      "} catch(e) {",
                      "",
                      "    //negative Tests",
                      "",
                      "    var req = request.url;",
                      "    var query = request.url.split('/');",
                      "    var cid = responseBody.split(':');",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "    pm.test(\"Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "    });",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                      "        pm.expect(responseCode.code).to.equal(204);",
                      "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);",
                      "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);",
                      "    });",
                      "}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "539da8ea-8b8a-4572-bcac-3a769946ed58",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "da8a0dee-2590-4e97-aa27-6ef584a11f93",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/email",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "email"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "3170549",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Get a consumer email details"
              },
              "response": [
                {
                  "id": "1a23853c-87ec-47d9-adab-3d960e26af5e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "2095bfd8-74c1-4bb7-bd4c-70f25b743828",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "73ae1dbf-c98d-4e72-acfc-aad0bd180c0d",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c52125df-a985-49e3-9e19-6cc5355e8dfb",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "ce0c9351-147e-4485-904b-e62501d17689",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"emailAddress\": \"<string>\",\n \"validityCode\": \"<integer>\",\n \"effectiveDate\": \"<dateTime>\",\n \"optIn\": \"<boolean>\",\n \"optInDateTime\": \"<dateTime>\",\n \"confirmedDate\": \"<dateTime>\"\n}"
                },
                {
                  "id": "df61289f-f8c6-4dc1-b8ae-c45425f20f2f",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "e5bf3d25-b650-49ae-b1a8-ed35fe6ce7bc",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "update",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cbf16231-289f-4483-9b43-dd5a988e8048",
                    "exec": [
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "48220be7-049a-4ab1-ac1b-aa7b0eac656b",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "fae1d0f5-d3ee-4fc1-a64e-7bf50bb0d02a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"emailAddress\": \"test1@test.com\",\n    \"validityCode\": 1,\n    \"optIn\": true,\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/email",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "email"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Update consumer email"
              },
              "response": [
                {
                  "id": "401f7269-42d6-4cbc-a052-29586218a9d4",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"emailAddress\": \"<string>\",\n    \"validityCode\": \"<integer>\",\n    \"optIn\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "4654806b-e6d7-48a5-8731-ea15beb844e4",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"emailAddress\": \"<string>\",\n    \"validityCode\": \"<integer>\",\n    \"optIn\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6751e054-cb5c-4786-bfd0-72f470720ad2",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"emailAddress\": \"<string>\",\n    \"validityCode\": \"<integer>\",\n    \"optIn\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "69a78238-7fd0-4d4b-9bd4-8f31e6a31a02",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"emailAddress\": \"<string>\",\n    \"validityCode\": \"<integer>\",\n    \"optIn\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "9b458d0e-aaf7-4aea-a4d0-5b07b19680f9",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"emailAddress\": \"<string>\",\n    \"validityCode\": \"<integer>\",\n    \"optIn\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Accepted",
                  "code": 202,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "ee824c96-b70e-4fd0-ad9f-a1cd196723d3",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"emailAddress\": \"<string>\",\n    \"validityCode\": \"<integer>\",\n    \"optIn\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "delete",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f7c66871-cf5b-4d3e-8892-ec17bbcd0053",
                    "exec": [
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ed86db90-a7d3-44dc-bb93-bbf84e8e816d",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "3d6f56fe-5038-484a-b16e-f696507f8436",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/email",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "email"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Delete a consumer email"
              },
              "response": [
                {
                  "id": "0b0d6a18-6394-493b-aaeb-b1c1649e5a20",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "675f5ee7-23e8-4006-8adf-421c58964e5e",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7c95e39d-0240-4fc2-8f90-532d4770ab7c",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c37a0970-3374-48c7-97c6-e546621f7632",
                  "name": "Success",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Accepted",
                  "code": 202,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "cbf36396-8aba-40b9-a4df-1e33021c5ac0",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "f4edad15-b65d-4fae-aeda-e44db50f33bf",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "confirm",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "259fca11-46d7-4ca4-a903-9ac76a82de80",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6d1592a1-6b96-4985-90dd-8c484194b2ac",
                    "exec": [
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c7fddedd-a3c3-47c9-948c-0d85d9d9063b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"confirmationDate\": \"{{current_timestamp}}\",\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/email/confirm",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "email",
                    "confirm"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Confirm a consumer email"
              },
              "response": [
                {
                  "id": "39e1f326-7846-4cea-9bf9-0c9977d1ad1e",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "41186026-c2b6-47c5-9e64-0ff5e28030f3",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerID\": \"<long>\",\n \"emailAddress\": \"<string>\",\n \"validityCode\": \"<integer>\",\n \"effectiveDate\": \"<dateTime>\",\n \"optIn\": \"<boolean>\",\n \"optInDateTime\": \"<dateTime>\",\n \"confirmedDate\": \"<dateTime>\"\n}"
                },
                {
                  "id": "6884e652-f421-4a82-a8ce-41bd72e9f404",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "a657dd9f-ec4e-4719-a6ff-8c1c9aa5050f",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c169c7c7-fee9-44e9-bfbf-7e139c240e47",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "f402b00c-979f-4320-ba68-f0d62ea448dc",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "unconfirm",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "25d0ca12-b2e4-48b5-b121-73cce0d3077c",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "89dc3a8c-1e6f-4473-8708-6d7787a04aef",
                    "exec": [
                      "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                      "    pm.response.to.have.status(202);",
                      "});",
                      "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST3: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "d4248490-ea93-46f9-80e0-964ca71d123d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"confirmationDate\": \"{{current_timestamp}}\",\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/email/unconfirm",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "email",
                    "unconfirm"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Unconfirm a consumer email"
              },
              "response": [
                {
                  "id": "43cc1bc5-1757-412b-aea5-5b3be83295f6",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6f0adeb7-3f43-4a4f-98f5-4ee3d1128ab2",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "8a9ee9ab-1a78-4366-9424-b8d236694b21",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "98198dcc-e628-406f-8fd7-89d695d35a9b",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "bcb33f8f-1ca5-49cd-ab1b-209b4966fc19",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Accepted",
                  "code": 202,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "fb1c95a7-6b17-4f04-babc-4959fe8ba1d5",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/email/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "email",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "077362e7-37b4-4354-be9e-47c6ffb4c833",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "b87c240e-1495-48b8-b03f-45c966849822"
    },
    {
      "name": "Consumer Phone",
      "item": [
        {
          "name": "{consumer Id}/phone",
          "item": [
            {
              "name": "{consumer Phone Id}",
              "item": [
                {
                  "name": "update",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "2d9a50b7-2402-4205-a5ba-8dbf1a7c7ecc",
                        "exec": [
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "4ad79f26-a8e6-4415-90e1-c967193f21b9",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "9cb08cf9-66bc-4241-8e81-8e0de440a497",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerPhoneID\": {{consumerPhoneID}},\n    \"number\": \"{{phn_num}}\",\n    \"sourceCode\": {{phn_sourceCode}},\n    \"statusCode\": {{phn_statusCode}},\n    \"typeCode\": {{phn_typeCode}},\n    \"technologyTypeCode\": {{phn_techtypeCode}},\n    \"qualityScore\": {{phn_qualScore}},\n    \"consentGiven\": {{phn_consentGiven}},\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/phone/:consumerPhoneId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "phone",
                        ":consumerPhoneId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        },
                        {
                          "key": "consumerPhoneId",
                          "value": "{{consumerPhoneID}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Updates an existing Consumer Phone Number"
                  },
                  "response": [
                    {
                      "id": "3c121e91-9269-4503-991f-3ac3cbb506ca",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "c0dddc0f-c8c2-46ff-99ab-907d3bfcc1a0",
                      "name": "Success",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "da16af56-fdec-4f18-8b6c-ca1d89d0bd3d",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "dcb6ada4-189c-4d78-8e31-a6bb98fef67b",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "e8deb5c2-1c1f-4385-9895-d87a3b4520e0",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "ec7a0255-16c6-417e-987f-34542fc5444a",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "delete",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "9b631b67-88d3-4541-a7aa-3490fb712580",
                        "exec": [
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2901f57b-0a13-43fa-a524-041ac2cdebc0",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "643c9d78-8938-4aef-8b8a-2458587d7f0b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/phone/:consumerPhoneId",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "phone",
                        ":consumerPhoneId"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        },
                        {
                          "key": "consumerPhoneId",
                          "value": "{{consumerPhoneID}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Delete an existing Consumer Phone Number"
                  },
                  "response": [
                    {
                      "id": "3f99287e-fc84-4704-96b4-d3fe2c1fff9d",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "77ec6114-9f47-45e6-ad9c-3d488f18cff6",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "83ca1efc-b0a5-4723-9333-2d6af9076a50",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "a330aa48-1377-4c3a-b260-498214dca0d5",
                      "name": "Success",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "c7ed30df-74a2-48f2-8b30-5eafe93b4cd6",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "edd4886a-6f27-4787-9ea7-bfa251334500",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "confirm",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "14dca766-5165-439c-a454-255146f7ef6c",
                        "exec": [
                          "try{",
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {",
                          "    pm.response.to.have.status(202);",
                          "});",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});",
                          "}catch(e){",
                          "    pm.test(\"TEST1: Response Code Check\", function () {",
                          "        pm.response.to.have.status(400);",
                          "    });",
                          "    pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "    });",
                          "pm.test(\"TEST3: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                          "});",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fb45eaf5-db60-4356-97d0-3c9a6c92a873",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "0386f4e3-e6e8-4d98-a4bd-9fee8a8f9bf5",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerPhoneID\": {{consumerPhoneID}},\n    \"confirmedDate\": \"{{current_timestamp}}\",\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/phone/:consumerPhoneId/confirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "phone",
                        ":consumerPhoneId",
                        "confirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        },
                        {
                          "key": "consumerPhoneId",
                          "value": "{{consumerPhoneID}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Sets the Confirmation Date of the Consumer Phone Number"
                  },
                  "response": [
                    {
                      "id": "0c97ebf4-ccfa-49ed-a254-ad77a7bff966",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"confirmedDate\": \"<dateTime>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/confirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "confirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "4da17982-0dcf-440e-99eb-9e5743d19be0",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"confirmedDate\": \"<dateTime>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/confirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "confirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "5b2e01d0-1d05-44a7-b390-55f478aab93d",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"confirmedDate\": \"<dateTime>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/confirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "confirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "8c706b5a-8a72-4223-896d-c11403253a2d",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"confirmedDate\": \"<dateTime>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/confirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "confirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "cecd7829-6029-4b18-9456-1b60e9945a5a",
                      "name": "Success",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"confirmedDate\": \"<dateTime>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/confirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "confirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "db50dbad-ca0d-43a5-8b57-56033cbc9390",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"confirmedDate\": \"<dateTime>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/confirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "confirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "unconfirm",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "1ad226a1-5203-4a70-ba61-f60aec1fa296",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "d8c0456b-c0c9-4503-8a02-f1f7875afdf7",
                        "exec": [
                          "try{\r",
                          "pm.test(\"TEST1: Response Check \" + pm.response.status, function () {\r",
                          "    pm.response.to.have.status(202);\r",
                          "});\r",
                          "pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "pm.test(\"TEST3: Response Header Checks\", function() {\r",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                          "});\r",
                          "}catch(e){\r",
                          "    pm.test(\"TEST1: Response Code Check\", function () {\r",
                          "        pm.response.to.have.status(400);\r",
                          "    });\r",
                          "    pm.test(\"TEST2: Response time Check: Response Time - \"+(pm.response.responseTime)+\"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "pm.test(\"TEST3: Response Header Checks\", function() {\r",
                          "    pm.response.to.have.header('X-Content-Type-Options', 'nosniff', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                          "});\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "4051380b-ae74-48d0-92a9-6bbf7d58bae9",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "PUT",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"consumerPhoneID\": {{consumerPhoneID}},\n    \"confirmedDate\": \"{{current_timestamp}}\",\n    \"consumerID\": {{cnsmr_id}},\n    \"applyToLinkedConsumers\": {{applyToLinkedConsumers}},\n    \"Correlation-Id\": \"{{$guid}}\",\n    \"Cache-Control\": \"no-cache\"\n}",
                      "options": {
                        "raw": {}
                      }
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        ":consumerPhoneId",
                        "unconfirm"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        },
                        {
                          "key": "consumerPhoneId",
                          "value": "{{consumerPhoneID}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Sets the Confirmation Date of the Consumer Phone Number to NULL"
                  },
                  "response": [
                    {
                      "id": "2678eb42-4653-49c0-aecd-2ff165ff244b",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "unconfirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "60fa89b4-b37c-44aa-85d1-cd47b7bc380e",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "unconfirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "941d6c64-9f86-476a-ab64-0dbd0bcd8e25",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "unconfirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "b1b2aafe-b3d9-4a42-8efe-03e27f85fd27",
                      "name": "Success",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "unconfirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Accepted",
                      "code": 202,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "b8808f6d-911c-432b-b60d-9f7c5eb4a709",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "unconfirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "cd1dc324-0260-428c-8fb4-3a4d88dccb93",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "PUT",
                        "header": [],
                        "body": {
                          "mode": "raw",
                          "raw": "{\n    \"consumerPhoneID\": \"<long>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                        },
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/:consumerPhoneId/unconfirm",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            ":consumerPhoneId",
                            "unconfirm"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            },
                            {
                              "key": "consumerPhoneId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                }
              ],
              "_postman_id": "4a80984b-cd60-4975-a2e2-bad9bdbe14a6",
              "_postman_isSubFolder": true
            },
            {
              "name": "highestscoring",
              "item": [
                {
                  "name": "get Highest Scoring Landline",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "70f575ae-6691-4229-a53f-ba3242509801",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "22ba80e8-9f48-48c6-b7fc-47cc89279184",
                        "exec": [
                          "try {\r",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {\r",
                          "        for (var i = 0; i < jsonData.length; i++) {\r",
                          "            pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);\r",
                          "        }\r",
                          "    });\r",
                          "\r",
                          "    /*if (data.cnsmr_id!=null){\r",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);\r",
                          "        });\r",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);\r",
                          "        });\r",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);\r",
                          "        });\r",
                          "        pm.test(\"TEST1D: City check\", function() {\r",
                          "            pm.expect(jsonData.city).to.deep.equal(data.City);\r",
                          "        });\r",
                          "        pm.test(\"TEST1E: County check\", function() {\r",
                          "            pm.expect(jsonData.county).to.deep.equal(data.County);\r",
                          "        });\r",
                          "        pm.test(\"TEST1F: PostCode check\", function() {\r",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);\r",
                          "        });\r",
                          "        pm.test(\"TEST1G: Country Code check\", function() {\r",
                          "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);\r",
                          "        });\r",
                          "    }*/\r",
                          "\r",
                          "    pm.test(\"TEST2: Status code Check\", function () {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "\r",
                          "    var Ajv = require('ajv'),\r",
                          "        ajv = new Ajv({ logger: console }),\r",
                          "        schema = {\r",
                          "            \"items\": {\r",
                          "                \"required\": [\r",
                          "                    \"consumerPhoneID\",\r",
                          "                    \"consumerID\",\r",
                          "                    \"number\",\r",
                          "                    \"sourceCode\",\r",
                          "                    \"sourceValueText\",\r",
                          "                    \"statusCode\",\r",
                          "                    \"statusValueText\",\r",
                          "                    \"typeCode\",\r",
                          "                    \"typeValueText\",\r",
                          "                    \"countryCode\",\r",
                          "                    \"countryValueText\",\r",
                          "                    \"softDeleteFlag\",\r",
                          "                    \"qualityScoreNumber\",\r",
                          "                    \"consentFlag\",\r",
                          "                    \"consentDate\",\r",
                          "                    \"technologyTypeCode\",\r",
                          "                    \"technologyTypeValueText\",\r",
                          "                    \"confirmedDate\",\r",
                          "                    \"upsertUserID\",\r",
                          "                    \"upsertUsername\",\r",
                          "                    \"upsertDateTime\"\r",
                          "                ],\r",
                          "                \"properties\": {\r",
                          "                    \"consumerPhoneID\": {\r",
                          "                        \"$id\": \"#/items/properties/consumerPhoneID\",\r",
                          "                        \"type\": \"integer\"\r",
                          "                    },\r",
                          "                    \"consumerID\": {\r",
                          "                        \"$id\": \"#/items/properties/consumerID\",\r",
                          "                        \"type\": \"integer\"\r",
                          "                    },\r",
                          "                    \"number\": {\r",
                          "                        \"$id\": \"#/items/properties/number\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"sourceCode\": {\r",
                          "                        \"$id\": \"#/items/properties/sourceCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"sourceValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/sourceValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"statusCode\": {\r",
                          "                        \"$id\": \"#/items/properties/statusCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"statusValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/statusValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"typeCode\": {\r",
                          "                        \"$id\": \"#/items/properties/typeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"typeValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/typeValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"countryCode\": {\r",
                          "                        \"$id\": \"#/items/properties/countryCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"countryValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/countryValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"softDeleteFlag\": {\r",
                          "                        \"$id\": \"#/items/properties/softDeleteFlag\",\r",
                          "                        \"type\": [\"boolean\", \"null\"]\r",
                          "                    },\r",
                          "                    \"qualityScoreNumber\": {\r",
                          "                        \"$id\": \"#/items/properties/qualityScoreNumber\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"consentFlag\": {\r",
                          "                        \"$id\": \"#/items/properties/consentFlag\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"consentDate\": {\r",
                          "                        \"$id\": \"#/items/properties/consentDate\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"technologyTypeCode\": {\r",
                          "                        \"$id\": \"#/items/properties/technologyTypeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"technologyTypeValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/technologyTypeValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"confirmedDate\": {\r",
                          "                        \"$id\": \"#/items/properties/confirmedDate\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"upsertUserID\": {\r",
                          "                        \"$id\": \"#/items/properties/upsertUserID\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"upsertUsername\": {\r",
                          "                        \"$id\": \"#/items/properties/upsertUsername\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"upsertDateTime\": {\r",
                          "                        \"$id\": \"#/items/properties/upsertDateTime\",\r",
                          "                        \"type\": \"string\"\r",
                          "                    }\r",
                          "                },\r",
                          "                \"$id\": \"#/items\",\r",
                          "                \"type\": \"object\"\r",
                          "            },\r",
                          "            \"$id\": \"http://example.org/root.json#\",\r",
                          "            \"type\": \"array\",\r",
                          "            \"definitions\": {},\r",
                          "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                          "        };\r",
                          "    pm.test(\"TEST5: Schema Test\", function () {\r",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                          "    });\r",
                          "} catch (e) {\r",
                          "\r",
                          "    //negative Tests\r",
                          "\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    var cid = responseBody.split(':');\r",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "    pm.test(\"Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                          "    });\r",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {\r",
                          "        pm.expect(responseCode.code).to.equal(204);\r",
                          "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);\r",
                          "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);\r",
                          "    });\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b847db88-49f2-4b16-8d9a-1a6bddf40af3",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/phone/highestscoring/landline",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "phone",
                        "highestscoring",
                        "landline"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the consumers highest scoring landline number"
                  },
                  "response": [
                    {
                      "id": "040f80f9-695d-4ff3-9b9b-5e65dc59cd54",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                    },
                    {
                      "id": "09757d3d-0760-4546-8535-93fd7a543784",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "1027ba1d-7fd4-45ec-a658-2f201c2cca05",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "20d23876-938e-41c6-a75a-ca5ecbb480ec",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "2f4c253e-404d-465b-b943-dc225369c7e7",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "3f32f6a9-331c-4174-abed-4d474d5725b8",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "88eb6531-8445-4d34-90a5-3feb99f9fdc5",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/landline",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "landline"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    }
                  ]
                },
                {
                  "name": "get Highest Scoring Mobile",
                  "event": [
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "2039112c-76da-4a77-bde2-7c0403d49a0e",
                        "exec": [
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }else{\r",
                          "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                          "    }\r",
                          "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                          "    let clientId = pm.environment.get(\"clientId\");\r",
                          "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                          "    let scope = pm.environment.get(\"clientScope\");\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "//console.log(\"End of Pre-req script\");"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "test",
                      "script": {
                        "id": "80146cde-fdb9-4ef5-97c5-cb204cad0d0f",
                        "exec": [
                          "try {\r",
                          "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                          "    var jsonData = JSON.parse(responseBody);\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    pm.test(\"TEST1: Consumer ID Check\", function () {\r",
                          "        for (var i = 0; i < jsonData.length; i++) {\r",
                          "            pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);\r",
                          "        }\r",
                          "    });\r",
                          "\r",
                          "    /*if (data.cnsmr_id!=null){\r",
                          "        pm.test(\"TEST1A: Address Line 1 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);\r",
                          "        });\r",
                          "        pm.test(\"TEST1B: Address Line 2 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);\r",
                          "        });\r",
                          "        pm.test(\"TEST1C: Address Line 3 check\", function() {\r",
                          "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);\r",
                          "        });\r",
                          "        pm.test(\"TEST1D: City check\", function() {\r",
                          "            pm.expect(jsonData.city).to.deep.equal(data.City);\r",
                          "        });\r",
                          "        pm.test(\"TEST1E: County check\", function() {\r",
                          "            pm.expect(jsonData.county).to.deep.equal(data.County);\r",
                          "        });\r",
                          "        pm.test(\"TEST1F: PostCode check\", function() {\r",
                          "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);\r",
                          "        });\r",
                          "        pm.test(\"TEST1G: Country Code check\", function() {\r",
                          "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);\r",
                          "        });\r",
                          "    }*/\r",
                          "\r",
                          "    pm.test(\"TEST2: Status code Check\", function () {\r",
                          "        pm.response.to.have.status(200);\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST3: Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                          "    });\r",
                          "\r",
                          "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "\r",
                          "    var Ajv = require('ajv'),\r",
                          "        ajv = new Ajv({ logger: console }),\r",
                          "        schema = {\r",
                          "            \"items\": {\r",
                          "                \"required\": [\r",
                          "                    \"consumerPhoneID\",\r",
                          "                    \"consumerID\",\r",
                          "                    \"number\",\r",
                          "                    \"sourceCode\",\r",
                          "                    \"sourceValueText\",\r",
                          "                    \"statusCode\",\r",
                          "                    \"statusValueText\",\r",
                          "                    \"typeCode\",\r",
                          "                    \"typeValueText\",\r",
                          "                    \"countryCode\",\r",
                          "                    \"countryValueText\",\r",
                          "                    \"softDeleteFlag\",\r",
                          "                    \"qualityScoreNumber\",\r",
                          "                    \"consentFlag\",\r",
                          "                    \"consentDate\",\r",
                          "                    \"technologyTypeCode\",\r",
                          "                    \"technologyTypeValueText\",\r",
                          "                    \"confirmedDate\",\r",
                          "                    \"upsertUserID\",\r",
                          "                    \"upsertUsername\",\r",
                          "                    \"upsertDateTime\"\r",
                          "                ],\r",
                          "                \"properties\": {\r",
                          "                    \"consumerPhoneID\": {\r",
                          "                        \"$id\": \"#/items/properties/consumerPhoneID\",\r",
                          "                        \"type\": \"integer\"\r",
                          "                    },\r",
                          "                    \"consumerID\": {\r",
                          "                        \"$id\": \"#/items/properties/consumerID\",\r",
                          "                        \"type\": \"integer\"\r",
                          "                    },\r",
                          "                    \"number\": {\r",
                          "                        \"$id\": \"#/items/properties/number\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"sourceCode\": {\r",
                          "                        \"$id\": \"#/items/properties/sourceCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"sourceValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/sourceValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"statusCode\": {\r",
                          "                        \"$id\": \"#/items/properties/statusCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"statusValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/statusValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"typeCode\": {\r",
                          "                        \"$id\": \"#/items/properties/typeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"typeValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/typeValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"countryCode\": {\r",
                          "                        \"$id\": \"#/items/properties/countryCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"countryValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/countryValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"softDeleteFlag\": {\r",
                          "                        \"$id\": \"#/items/properties/softDeleteFlag\",\r",
                          "                        \"type\": [\"boolean\", \"null\"]\r",
                          "                    },\r",
                          "                    \"qualityScoreNumber\": {\r",
                          "                        \"$id\": \"#/items/properties/qualityScoreNumber\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"consentFlag\": {\r",
                          "                        \"$id\": \"#/items/properties/consentFlag\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"consentDate\": {\r",
                          "                        \"$id\": \"#/items/properties/consentDate\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"technologyTypeCode\": {\r",
                          "                        \"$id\": \"#/items/properties/technologyTypeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"technologyTypeValueText\": {\r",
                          "                        \"$id\": \"#/items/properties/technologyTypeValueText\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"confirmedDate\": {\r",
                          "                        \"$id\": \"#/items/properties/confirmedDate\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"upsertUserID\": {\r",
                          "                        \"$id\": \"#/items/properties/upsertUserID\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"upsertUsername\": {\r",
                          "                        \"$id\": \"#/items/properties/upsertUsername\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"upsertDateTime\": {\r",
                          "                        \"$id\": \"#/items/properties/upsertDateTime\",\r",
                          "                        \"type\": \"string\"\r",
                          "                    }\r",
                          "                },\r",
                          "                \"$id\": \"#/items\",\r",
                          "                \"type\": \"object\"\r",
                          "            },\r",
                          "            \"$id\": \"http://example.org/root.json#\",\r",
                          "            \"type\": \"array\",\r",
                          "            \"definitions\": {},\r",
                          "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                          "        };\r",
                          "    pm.test(\"TEST5: Schema Test\", function () {\r",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                          "    });\r",
                          "} catch (e) {\r",
                          "\r",
                          "    //negative Tests\r",
                          "\r",
                          "    var req = request.url;\r",
                          "    var query = request.url.split('/');\r",
                          "    var cid = responseBody.split(':');\r",
                          "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                          "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "    });\r",
                          "    pm.test(\"Response Header Checks\", function () {\r",
                          "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                          "    });\r",
                          "    pm.test(\"Incorrect Consumer ID should be not found\", function () {\r",
                          "        pm.expect(responseCode.code).to.equal(204);\r",
                          "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);\r",
                          "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);\r",
                          "    });\r",
                          "}\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "6ded77db-afd8-462d-b2ac-4b93317a2150",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}",
                        "type": "text"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}",
                        "type": "text"
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "{{$guid}}",
                        "type": "text"
                      },
                      {
                        "key": "Content-Type",
                        "value": "application/json",
                        "type": "text"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "{{$randomUserName}}",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/phone/highestscoring/mobile",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "phone",
                        "highestscoring",
                        "mobile"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmr_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Get the consumers highest scoring mobile number"
                  },
                  "response": [
                    {
                      "id": "0f921df1-dd2d-4633-b761-52a8f2f9de0b",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "[\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                    },
                    {
                      "id": "1bd63d81-a255-471b-8bb7-64d476f798bc",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "21e64449-269c-47d4-8ba7-e656d6da2d66",
                      "name": "Unauthorized",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Unauthorized",
                      "code": 401,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "431ed727-5045-4da2-b0e8-df60818174b9",
                      "name": "Forbidden",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Forbidden",
                      "code": 403,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "7bf2ba54-fb43-4b63-a624-75a2cd53ed79",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "9ad4f2c2-1ca2-4537-b3f0-1bfd1af17144",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Service Unavailable",
                      "code": 503,
                      "_postman_previewlanguage": "text",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "text/plain"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": ""
                    },
                    {
                      "id": "e9a0dce9-14dc-4cd1-b265-3103b1c66bb0",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [],
                        "url": {
                          "raw": "{{baseUrl}}/:consumerId/phone/highestscoring/mobile",
                          "host": [
                            "{{baseUrl}}"
                          ],
                          "path": [
                            ":consumerId",
                            "phone",
                            "highestscoring",
                            "mobile"
                          ],
                          "variable": [
                            {
                              "key": "consumerId"
                            }
                          ]
                        }
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                }
              ],
              "_postman_id": "5d31c7ff-cfb9-456c-b231-6fa02b63badd",
              "_postman_isSubFolder": true
            },
            {
              "name": "get",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "681705e0-a458-49df-94f7-6caa3fe6e672",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "da81db25-801e-4b30-afed-87024a4e7f0d",
                    "exec": [
                      "try {\r",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var req = request.url;\r",
                      "    var query = request.url.split('/');\r",
                      "    pm.test(\"TEST1: Consumer ID Check\", function () {\r",
                      "            for (var i = 0; i < jsonData.length; i++) {\r",
                      "                pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);\r",
                      "            }\r",
                      "    });\r",
                      "\r",
                      "    /*if (data.cnsmr_id!=null){\r",
                      "        pm.test(\"TEST1A: Address Line 1 check\", function() {\r",
                      "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);\r",
                      "        });\r",
                      "        pm.test(\"TEST1B: Address Line 2 check\", function() {\r",
                      "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);\r",
                      "        });\r",
                      "        pm.test(\"TEST1C: Address Line 3 check\", function() {\r",
                      "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);\r",
                      "        });\r",
                      "        pm.test(\"TEST1D: City check\", function() {\r",
                      "            pm.expect(jsonData.city).to.deep.equal(data.City);\r",
                      "        });\r",
                      "        pm.test(\"TEST1E: County check\", function() {\r",
                      "            pm.expect(jsonData.county).to.deep.equal(data.County);\r",
                      "        });\r",
                      "        pm.test(\"TEST1F: PostCode check\", function() {\r",
                      "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);\r",
                      "        });\r",
                      "        pm.test(\"TEST1G: Country Code check\", function() {\r",
                      "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);\r",
                      "        });\r",
                      "    }*/\r",
                      "\r",
                      "    pm.test(\"TEST2: Status code Check\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {\r",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "\r",
                      "    var Ajv = require('ajv'),\r",
                      "        ajv = new Ajv({ logger: console }),\r",
                      "        schema = {\r",
                      "    \"items\": {\r",
                      "        \"required\": [\r",
                      "            \"consumerPhoneID\",\r",
                      "            \"consumerID\",\r",
                      "            \"number\",\r",
                      "            \"sourceCode\",\r",
                      "            \"sourceValueText\",\r",
                      "            \"statusCode\",\r",
                      "            \"statusValueText\",\r",
                      "            \"typeCode\",\r",
                      "            \"typeValueText\",\r",
                      "            \"countryCode\",\r",
                      "            \"countryValueText\",\r",
                      "            \"softDeleteFlag\",\r",
                      "            \"qualityScoreNumber\",\r",
                      "            \"consentFlag\",\r",
                      "            \"consentDate\",\r",
                      "            \"technologyTypeCode\",\r",
                      "            \"technologyTypeValueText\",\r",
                      "            \"confirmedDate\",\r",
                      "            \"upsertUserID\",\r",
                      "            \"upsertUsername\",\r",
                      "            \"upsertDateTime\"\r",
                      "        ],\r",
                      "        \"properties\": {\r",
                      "            \"consumerPhoneID\": {\r",
                      "                \"$id\": \"#/items/properties/consumerPhoneID\",\r",
                      "                \"type\": \"integer\"\r",
                      "            },\r",
                      "            \"consumerID\": {\r",
                      "                \"$id\": \"#/items/properties/consumerID\",\r",
                      "                \"type\": \"integer\"\r",
                      "            },\r",
                      "            \"number\": {\r",
                      "                \"$id\": \"#/items/properties/number\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"sourceCode\": {\r",
                      "                \"$id\": \"#/items/properties/sourceCode\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"sourceValueText\": {\r",
                      "                \"$id\": \"#/items/properties/sourceValueText\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"statusCode\": {\r",
                      "                \"$id\": \"#/items/properties/statusCode\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"statusValueText\": {\r",
                      "                \"$id\": \"#/items/properties/statusValueText\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"typeCode\": {\r",
                      "                \"$id\": \"#/items/properties/typeCode\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"typeValueText\": {\r",
                      "                \"$id\": \"#/items/properties/typeValueText\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"countryCode\": {\r",
                      "                \"$id\": \"#/items/properties/countryCode\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"countryValueText\": {\r",
                      "                \"$id\": \"#/items/properties/countryValueText\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"softDeleteFlag\": {\r",
                      "                \"$id\": \"#/items/properties/softDeleteFlag\",\r",
                      "                \"type\": [\"boolean\",\"null\"]\r",
                      "            },\r",
                      "            \"qualityScoreNumber\": {\r",
                      "                \"$id\": \"#/items/properties/qualityScoreNumber\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"consentFlag\": {\r",
                      "                \"$id\": \"#/items/properties/consentFlag\",\r",
                      "                \"type\": [\"boolean\",\"null\"]\r",
                      "            },\r",
                      "            \"consentDate\": {\r",
                      "                \"$id\": \"#/items/properties/consentDate\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"technologyTypeCode\": {\r",
                      "                \"$id\": \"#/items/properties/technologyTypeCode\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"technologyTypeValueText\": {\r",
                      "                \"$id\": \"#/items/properties/technologyTypeValueText\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"confirmedDate\": {\r",
                      "                \"$id\": \"#/items/properties/confirmedDate\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"upsertUserID\": {\r",
                      "                \"$id\": \"#/items/properties/upsertUserID\",\r",
                      "                \"type\": [\"integer\",\"null\"]\r",
                      "            },\r",
                      "            \"upsertUsername\": {\r",
                      "                \"$id\": \"#/items/properties/upsertUsername\",\r",
                      "                \"type\": [\"string\",\"null\"]\r",
                      "            },\r",
                      "            \"upsertDateTime\": {\r",
                      "                \"$id\": \"#/items/properties/upsertDateTime\",\r",
                      "                \"type\": \"string\"\r",
                      "            }\r",
                      "        },\r",
                      "        \"$id\": \"#/items\",\r",
                      "        \"type\": \"object\"\r",
                      "    },\r",
                      "    \"$id\": \"http://example.org/root.json#\",\r",
                      "    \"type\": \"array\",\r",
                      "    \"definitions\": {},\r",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                      "};\r",
                      "    pm.test(\"TEST5: Schema Test\", function () {\r",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                      "    });\r",
                      "} catch (e) {\r",
                      "\r",
                      "    //negative Tests\r",
                      "\r",
                      "    var req = request.url;\r",
                      "    var query = request.url.split('/');\r",
                      "    var cid = responseBody.split(':');\r",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "    pm.test(\"Response Header Checks\", function () {\r",
                      "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                      "    });\r",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {\r",
                      "        pm.expect(responseCode.code).to.equal(204);\r",
                      "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);\r",
                      "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "b42ef167-05c4-435e-a741-52cc64cccf52",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/phone",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "phone"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Get all Consumer Phone Numbers"
              },
              "response": [
                {
                  "id": "452da33e-c24e-4751-9603-bc225aba726c",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                },
                {
                  "id": "49de7675-ddd8-4807-b41b-9bec83912fed",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "638ac7a9-5101-4de5-aae8-9c7a2140f6a6",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "dc732aa8-24b4-4d8c-b705-9ea3bf7b4e39",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "e84454ca-2af9-4e8c-90e0-14eea28f6cdb",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "fb37dbb2-ae24-4148-8d8f-718a5c9cfd3a",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "create",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9e85e060-8d6b-42d1-ad8b-f8301c30ac73",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "bb6f9d96-fb7e-4a0a-8314-a06a2a6da58c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "{{baseUrl}}/:consumerId/phone",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    ":consumerId",
                    "phone"
                  ],
                  "variable": [
                    {
                      "id": "5acee70d-db4c-4f55-b31a-5b09d52dccf4",
                      "key": "consumerId",
                      "value": "<long>",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Create a new Consumer Phone Number"
              },
              "response": [
                {
                  "id": "34305f17-d622-409d-95e7-310fc0ee322c",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "630e5689-de9c-4bba-82e5-06003df5791a",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7033882a-c816-4291-b76f-f5631107b2c5",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "e5a63aab-5ccf-4d4e-bff4-d61fc568b751",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "ec3c0350-a327-4a03-bbd6-96cb016e7ff9",
                  "name": "Success",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Accepted",
                  "code": 202,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "fbb7e1a6-2e74-47af-a207-33c16c65b910",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"number\": \"<string>\",\n    \"sourceCode\": \"<integer>\",\n    \"statusCode\": \"<integer>\",\n    \"typeCode\": \"<integer>\",\n    \"technologyTypeCode\": \"<integer>\",\n    \"qualityScore\": \"<long>\",\n    \"consentGiven\": \"<boolean>\",\n    \"consumerID\": \"<long>\",\n    \"applyToLinkedConsumers\": \"<boolean>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "get Confirmed",
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "725c4425-b435-4105-8ddf-67a4b3144fb2",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d070516b-774b-4c24-8107-6fd353b1aee0",
                    "exec": [
                      "try {\r",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var req = request.url;\r",
                      "    var query = request.url.split('/');\r",
                      "    pm.test(\"TEST1: Consumer ID Check\", function () {\r",
                      "        for (var i = 0; i < jsonData.length; i++) {\r",
                      "            pm.expect(JSON.stringify(jsonData[i].consumerID)).to.deep.equal(query[4]);\r",
                      "        }\r",
                      "    });\r",
                      "\r",
                      "    /*if (data.cnsmr_id!=null){\r",
                      "        pm.test(\"TEST1A: Address Line 1 check\", function() {\r",
                      "            pm.expect(jsonData.addressLine1).to.deep.equal(data.AddressLine1);\r",
                      "        });\r",
                      "        pm.test(\"TEST1B: Address Line 2 check\", function() {\r",
                      "            pm.expect(jsonData.addressLine2).to.deep.equal(data.AddressLine2);\r",
                      "        });\r",
                      "        pm.test(\"TEST1C: Address Line 3 check\", function() {\r",
                      "            pm.expect(jsonData.addressLine3).to.deep.equal(data.AddressLine3);\r",
                      "        });\r",
                      "        pm.test(\"TEST1D: City check\", function() {\r",
                      "            pm.expect(jsonData.city).to.deep.equal(data.City);\r",
                      "        });\r",
                      "        pm.test(\"TEST1E: County check\", function() {\r",
                      "            pm.expect(jsonData.county).to.deep.equal(data.County);\r",
                      "        });\r",
                      "        pm.test(\"TEST1F: PostCode check\", function() {\r",
                      "            pm.expect(jsonData.postCode).to.deep.equal(data.PostCode);\r",
                      "        });\r",
                      "        pm.test(\"TEST1G: Country Code check\", function() {\r",
                      "            pm.expect(jsonData.countryCode).to.deep.equal(data.countryCode);\r",
                      "        });\r",
                      "    }*/\r",
                      "\r",
                      "    pm.test(\"TEST2: Status code Check\", function () {\r",
                      "        pm.response.to.have.status(200);\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {\r",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                      "    });\r",
                      "\r",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "\r",
                      "    var Ajv = require('ajv'),\r",
                      "        ajv = new Ajv({ logger: console }),\r",
                      "        schema = {\r",
                      "            \"items\": {\r",
                      "                \"required\": [\r",
                      "                    \"consumerPhoneID\",\r",
                      "                    \"consumerID\",\r",
                      "                    \"number\",\r",
                      "                    \"sourceCode\",\r",
                      "                    \"sourceValueText\",\r",
                      "                    \"statusCode\",\r",
                      "                    \"statusValueText\",\r",
                      "                    \"typeCode\",\r",
                      "                    \"typeValueText\",\r",
                      "                    \"countryCode\",\r",
                      "                    \"countryValueText\",\r",
                      "                    \"softDeleteFlag\",\r",
                      "                    \"qualityScoreNumber\",\r",
                      "                    \"consentFlag\",\r",
                      "                    \"consentDate\",\r",
                      "                    \"technologyTypeCode\",\r",
                      "                    \"technologyTypeValueText\",\r",
                      "                    \"confirmedDate\",\r",
                      "                    \"upsertUserID\",\r",
                      "                    \"upsertUsername\",\r",
                      "                    \"upsertDateTime\"\r",
                      "                ],\r",
                      "                \"properties\": {\r",
                      "                    \"consumerPhoneID\": {\r",
                      "                        \"$id\": \"#/items/properties/consumerPhoneID\",\r",
                      "                        \"type\": \"integer\"\r",
                      "                    },\r",
                      "                    \"consumerID\": {\r",
                      "                        \"$id\": \"#/items/properties/consumerID\",\r",
                      "                        \"type\": \"integer\"\r",
                      "                    },\r",
                      "                    \"number\": {\r",
                      "                        \"$id\": \"#/items/properties/number\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"sourceCode\": {\r",
                      "                        \"$id\": \"#/items/properties/sourceCode\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"sourceValueText\": {\r",
                      "                        \"$id\": \"#/items/properties/sourceValueText\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"statusCode\": {\r",
                      "                        \"$id\": \"#/items/properties/statusCode\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"statusValueText\": {\r",
                      "                        \"$id\": \"#/items/properties/statusValueText\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"typeCode\": {\r",
                      "                        \"$id\": \"#/items/properties/typeCode\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"typeValueText\": {\r",
                      "                        \"$id\": \"#/items/properties/typeValueText\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"countryCode\": {\r",
                      "                        \"$id\": \"#/items/properties/countryCode\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"countryValueText\": {\r",
                      "                        \"$id\": \"#/items/properties/countryValueText\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"softDeleteFlag\": {\r",
                      "                        \"$id\": \"#/items/properties/softDeleteFlag\",\r",
                      "                        \"type\": [\"boolean\", \"null\"]\r",
                      "                    },\r",
                      "                    \"qualityScoreNumber\": {\r",
                      "                        \"$id\": \"#/items/properties/qualityScoreNumber\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"consentFlag\": {\r",
                      "                        \"$id\": \"#/items/properties/consentFlag\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"consentDate\": {\r",
                      "                        \"$id\": \"#/items/properties/consentDate\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"technologyTypeCode\": {\r",
                      "                        \"$id\": \"#/items/properties/technologyTypeCode\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"technologyTypeValueText\": {\r",
                      "                        \"$id\": \"#/items/properties/technologyTypeValueText\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"confirmedDate\": {\r",
                      "                        \"$id\": \"#/items/properties/confirmedDate\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"upsertUserID\": {\r",
                      "                        \"$id\": \"#/items/properties/upsertUserID\",\r",
                      "                        \"type\": [\"integer\", \"null\"]\r",
                      "                    },\r",
                      "                    \"upsertUsername\": {\r",
                      "                        \"$id\": \"#/items/properties/upsertUsername\",\r",
                      "                        \"type\": [\"string\", \"null\"]\r",
                      "                    },\r",
                      "                    \"upsertDateTime\": {\r",
                      "                        \"$id\": \"#/items/properties/upsertDateTime\",\r",
                      "                        \"type\": \"string\"\r",
                      "                    }\r",
                      "                },\r",
                      "                \"$id\": \"#/items\",\r",
                      "                \"type\": \"object\"\r",
                      "            },\r",
                      "            \"$id\": \"http://example.org/root.json#\",\r",
                      "            \"type\": \"array\",\r",
                      "            \"definitions\": {},\r",
                      "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                      "        };\r",
                      "    pm.test(\"TEST5: Schema Test\", function () {\r",
                      "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                      "    });\r",
                      "} catch (e) {\r",
                      "\r",
                      "    //negative Tests\r",
                      "\r",
                      "    var req = request.url;\r",
                      "    var query = request.url.split('/');\r",
                      "    var cid = responseBody.split(':');\r",
                      "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "    });\r",
                      "    pm.test(\"Response Header Checks\", function () {\r",
                      "        pm.response.to.have.header('Cache-Control', 'no-cache, no-store', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');\r",
                      "    });\r",
                      "    pm.test(\"Incorrect Consumer ID should be not found\", function () {\r",
                      "        pm.expect(responseCode.code).to.equal(204);\r",
                      "        //pm.expect(responseBody).to.equal(\"Unable to find consumer address associated with consumerID: \" + query[4]);\r",
                      "        //pm.expect(cid[1]).to.deep.equal(\" \" + query[4]);\r",
                      "    });\r",
                      "}\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "37d34eff-4c6b-4f09-8c42-260899271971",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{$guid}}",
                    "type": "text"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "{{$randomUserName}}",
                    "type": "text"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/consumer/:consumerId/phone/confirmed",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    ":consumerId",
                    "phone",
                    "confirmed"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Get all confirmed Consumer Phone Numbers"
              },
              "response": [
                {
                  "id": "100ea6bf-9d9c-4aab-8d00-e9e2577b41c9",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/confirmed",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        "confirmed"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "1129a69b-4f79-44a3-b941-c4ebbddd98ea",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/confirmed",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        "confirmed"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "cd6066bb-6096-4e07-8774-799046b0e527",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/confirmed",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        "confirmed"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "dabac838-5f1e-414b-9136-a55383ba950b",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/confirmed",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        "confirmed"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "e203e9b4-ec1f-483d-a832-0e6ed33111a8",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/confirmed",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        "confirmed"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n },\n {\n  \"consumerPhoneID\": \"<long>\",\n  \"consumerID\": \"<long>\",\n  \"number\": \"<string>\",\n  \"sourceCode\": \"<integer>\",\n  \"sourceValueText\": \"<string>\",\n  \"statusCode\": \"<integer>\",\n  \"statusValueText\": \"<string>\",\n  \"typeCode\": \"<integer>\",\n  \"typeValueText\": \"<string>\",\n  \"countryCode\": \"<integer>\",\n  \"countryValueText\": \"<string>\",\n  \"softDeleteFlag\": \"<string>\",\n  \"qualityScoreNumber\": \"<long>\",\n  \"consentFlag\": \"<string>\",\n  \"consentDate\": \"<dateTime>\",\n  \"technologyTypeCode\": \"<integer>\",\n  \"technologyTypeValueText\": \"<string>\",\n  \"confirmedDate\": \"<dateTime>\"\n }\n]"
                },
                {
                  "id": "f95525bc-3201-48d9-b380-81955443c584",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "GET",
                    "header": [],
                    "url": {
                      "raw": "{{baseUrl}}/:consumerId/phone/confirmed",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        ":consumerId",
                        "phone",
                        "confirmed"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            }
          ],
          "_postman_id": "d3eafcab-5711-45c4-9f20-40e05ed9c490",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "5f327b7a-1c13-4f1d-a02e-195b399c3c5b"
    },
    {
      "name": "UDP",
      "item": [
        {
          "name": "instance",
          "item": [
            {
              "name": "addudpdata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e4d3b514-1859-4ea6-892d-a37fd0f26f5d",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = JSON.parse(responseBody);",
                      "var reqData = JSON.parse(request.data);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"id\",",
                      "        \"cnsmr_id\",",
                      "        \"udeftransactioN_DATE\",",
                      "        \"udeftransactioN_AMOUNT\",",
                      "        \"udeftransactioN_PAYMENTMETHOD\",",
                      "        \"udeftransactioN_DESCRIPTION\",",
                      "        \"upsrT_DTTM\",",
                      "        \"upsrT_SOFT_COMP_ID\",",
                      "        \"upsrT_TRNSCTN_NMBR\",",
                      "        \"upsrT_USR_ID\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"id\": {",
                      "            \"$id\": \"#/properties/id\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"cnsmr_id\": {",
                      "            \"$id\": \"#/properties/cnsmr_id\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"udeftransactioN_DATE\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_DATE\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"udeftransactioN_AMOUNT\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_AMOUNT\",",
                      "            \"type\": [\"number\", \"null\"]",
                      "        },",
                      "        \"udeftransactioN_PAYMENTMETHOD\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_PAYMENTMETHOD\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"udeftransactioN_DESCRIPTION\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_DESCRIPTION\",",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"upsrT_DTTM\": {",
                      "            \"$id\": \"#/properties/upsrT_DTTM\",",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"upsrT_SOFT_COMP_ID\": {",
                      "            \"$id\": \"#/properties/upsrT_SOFT_COMP_ID\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"upsrT_TRNSCTN_NMBR\": {",
                      "            \"$id\": \"#/properties/upsrT_TRNSCTN_NMBR\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"upsrT_USR_ID\": {",
                      "            \"$id\": \"#/properties/upsrT_USR_ID\",",
                      "            \"type\": \"integer\"",
                      "        }",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST4: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"TEST5: Cnsmr_id Validation\", function(){",
                      "    pm.expect(jsonData.cnsmr_id).to.equal(reqData.Data.cnsmr_id);",
                      "});",
                      "",
                      "",
                      "} catch (e){}",
                      "",
                      "pm.environment.set(\"new_data_id\", jsonData.id);",
                      "pm.environment.set(\"cnsmr_id\", jsonData.cnsmr_id);"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "be249a1f-1caf-4a4e-bcde-9b4629e9c73d",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                      "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c8996106-6b2b-4fd1-adc1-814d21eafe95",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "correlation-id",
                    "value": "{{Correlation-Id}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "username",
                    "value": "Mike",
                    "type": "text"
                  },
                  {
                    "key": "origin",
                    "value": "Postman",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"UDPID\": {{udp_id}},\r\n\t\"Data\": {\r\n\t\t\"id\": {{data_id}},\r\n        \"cnsmr_id\": {{cnsmr_id}},\r\n        \"udeftransactioN_DATE\": \"2017-05-22T22:20:57.963\",\r\n        \"udeftransactioN_AMOUNT\": \"57.63\",\r\n        \"udeftransactioN_PAYMENTMETHOD\": \"Cash\",\r\n        \"udeftransactioN_DESCRIPTION\": \"Test desc\",\r\n        \"upsrT_DTTM\": \"2017-05-16T22:20:57.963\",\r\n        \"upsrT_SOFT_COMP_ID\": 999,\r\n        \"upsrT_TRNSCTN_NMBR\": 0,\r\n        \"upsrT_USR_ID\": 1\r\n\t}\r\n} ",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{BaseURL}}/udp/instance",
                "description": "Create new UDP row"
              },
              "response": [
                {
                  "id": "0772f257-c1ad-4355-889b-f7656be1461f",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "15fdc94b-d79c-48f8-b897-0673eaecbbed",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "2eb7916e-518b-4bd9-89db-2a9431f176bf",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "37bc7d0b-c15c-456c-9b88-7cdf43f2cabc",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "48922d7c-e208-4fc9-bd2b-242aafc3fac3",
                  "name": "Success",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "4a6e2cb8-d3c5-4744-80d7-8b6f90d6040f",
                  "name": "Success",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<object>\""
                },
                {
                  "id": "c046684d-741f-4b0d-8f32-151927a23400",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "POST",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "updateudpdata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "8a0ecead-f598-4c3f-9680-0848ccd62f49",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = JSON.parse(responseBody);",
                      "var reqData = JSON.parse(request.data);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"id\",",
                      "        \"cnsmr_id\",",
                      "        \"udeftransactioN_DATE\",",
                      "        \"udeftransactioN_AMOUNT\",",
                      "        \"udeftransactioN_PAYMENTMETHOD\",",
                      "        \"udeftransactioN_DESCRIPTION\",",
                      "        \"upsrT_DTTM\",",
                      "        \"upsrT_SOFT_COMP_ID\",",
                      "        \"upsrT_TRNSCTN_NMBR\",",
                      "        \"upsrT_USR_ID\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"id\": {",
                      "            \"$id\": \"#/properties/id\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"cnsmr_id\": {",
                      "            \"$id\": \"#/properties/cnsmr_id\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"udeftransactioN_DATE\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_DATE\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"udeftransactioN_AMOUNT\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_AMOUNT\",",
                      "            \"type\": [\"number\", \"null\"]",
                      "        },",
                      "        \"udeftransactioN_PAYMENTMETHOD\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_PAYMENTMETHOD\",",
                      "            \"type\": [\"string\", \"null\"]",
                      "        },",
                      "        \"udeftransactioN_DESCRIPTION\": {",
                      "            \"$id\": \"#/properties/udeftransactioN_DESCRIPTION\",",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"upsrT_DTTM\": {",
                      "            \"$id\": \"#/properties/upsrT_DTTM\",",
                      "            \"type\": \"string\"",
                      "        },",
                      "        \"upsrT_SOFT_COMP_ID\": {",
                      "            \"$id\": \"#/properties/upsrT_SOFT_COMP_ID\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"upsrT_TRNSCTN_NMBR\": {",
                      "            \"$id\": \"#/properties/upsrT_TRNSCTN_NMBR\",",
                      "            \"type\": \"integer\"",
                      "        },",
                      "        \"upsrT_USR_ID\": {",
                      "            \"$id\": \"#/properties/upsrT_USR_ID\",",
                      "            \"type\": \"integer\"",
                      "        }",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST4: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"TEST5: Cnsmr_id Validation\", function(){",
                      "    pm.expect(jsonData.cnsmr_id).to.equal(reqData.Data.cnsmr_id);",
                      "});",
                      "",
                      "",
                      "} catch (e){}",
                      "",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "34b1afe7-9fa4-4898-8394-259efc857738",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                      "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "982e3701-b3b6-48d0-ba8a-97205cf074b7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "correlation-id",
                    "value": "{{Correlation-Id}}",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "username",
                    "value": "Mike",
                    "type": "text"
                  },
                  {
                    "key": "origin",
                    "value": "Postman",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\r\n\t\"UDPID\": {{udp_id}},\r\n\t\"Data\": {\r\n\t\t\"id\": {{data_id}},\r\n        \"cnsmr_id\": {{cnsmr_id}},\r\n        \"udeftransactioN_DATE\": null,\r\n        \"udeftransactioN_AMOUNT\": null,\r\n        \"udeftransactioN_PAYMENTMETHOD\": null,\r\n        \"udeftransactioN_DESCRIPTION\": \"Test desc updated\",\r\n        \"upsrT_DTTM\": \"2017-05-16T22:20:57.963\",\r\n        \"upsrT_SOFT_COMP_ID\": 999,\r\n        \"upsrT_TRNSCTN_NMBR\": 0,\r\n        \"upsrT_USR_ID\": 1\r\n\t}\r\n} ",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{BaseURL}}/udp/instance",
                "description": "Updates an existing UDP row"
              },
              "response": [
                {
                  "id": "130c07ee-2b6d-4a00-a0dc-bfda4674b408",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "30321255-79fd-4aef-93dd-0767b9299352",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "49d74f6e-b4f6-44c9-bfd8-82306afffe39",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<object>\""
                },
                {
                  "id": "53b0da8b-491b-48cf-aeec-f82143b13edb",
                  "name": "Success",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "6298c018-42f5-44d8-9dff-2d30b68a3761",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "a666eeae-fde1-4fc6-a001-ddab3d4e1751",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c4aa0bd5-2294-4664-b08f-df8d51dcc060",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "PUT",
                    "header": [],
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                }
              ]
            },
            {
              "name": "deletedata",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "97843443-1044-4157-9a9b-bae187168f30",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(204);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Cache-Control', 'no-cache, no-store');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "} catch (e){}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b5530993-5dca-4f62-b6ca-9da2d6a3a7bc",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                      "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "017072d7-2766-46ea-89ca-827261682351",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "correlation-id",
                    "value": "{{Correlation-Id}}",
                    "type": "text"
                  },
                  {
                    "key": "ocp-apim-subscription-key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "type": "text"
                  },
                  {
                    "key": "username",
                    "value": "Mike",
                    "type": "text"
                  },
                  {
                    "key": "origin",
                    "value": "Postman",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"udpid\": \"{{udp_id}}\",\n    \"rowID\": \"{{new_data_id}}\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "{{BaseURL}}/udp/instance",
                "description": "Deletes a UDP row"
              },
              "response": [
                {
                  "id": "41e36367-3d84-4f9e-9d79-c668b12c1587",
                  "name": "Success",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<object>\""
                },
                {
                  "id": "4ecfb4c7-7f00-4c8c-af5a-5f24b7abb0e6",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "50f09a0c-4aec-4485-aed8-77d3a0e931c8",
                  "name": "Forbidden",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Forbidden",
                  "code": 403,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "577550c2-37fe-4884-80b6-621b72652399",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Service Unavailable",
                  "code": 503,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "7c217b49-d7ef-471e-9d77-a0c44e0d1d1a",
                  "name": "Success",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "No Content",
                  "code": 204,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "dcff6c38-016a-4e74-8068-1ae8c81804bf",
                  "name": "Unauthorized",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Unauthorized",
                  "code": 401,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "eacb5fe9-600d-4310-8fb0-78291dcd3a4e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "DELETE",
                    "header": [],
                    "body": {
                      "mode": "raw",
                      "raw": "{\n    \"udpid\": \"<long>\",\n    \"rowID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                    },
                    "url": "{{baseUrl}}/instance"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "29ddc0c4-47c3-4bb7-8acd-3796900fd59e",
          "_postman_isSubFolder": true
        },
        {
          "name": "getudplist",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "db0be917-96a3-4d4a-bfa5-2489bd2634f7",
                "exec": [
                  "try{",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "//console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "/////////////////////////////////////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "let expectedresponse = {",
                  "    \"udpTables\": [",
                  "        {",
                  "            \"udpid\": 7,",
                  "            \"udpName\": \"TPDM_Details\",",
                  "            \"displayName\": \"3PDM Details\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 304,",
                  "            \"udpName\": \"ACCOUNT_IN_CREDIT\",",
                  "            \"displayName\": \"Account In Credit\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 144,",
                  "            \"udpName\": \"BOOKONPREDEFAULT\",",
                  "            \"displayName\": \"Additional Book On Fields for Pre-Default\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 8,",
                  "            \"udpName\": \"Agreement_Details\",",
                  "            \"displayName\": \"Agreement Details\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 9,",
                  "            \"udpName\": \"Arrears_Statements\",",
                  "            \"displayName\": \"Arrears and Annual Statements\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 10,",
                  "            \"udpName\": \"Auto_Finance\",",
                  "            \"displayName\": \"Auto Finance\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 1,",
                  "            \"udpName\": \"Aux1\",",
                  "            \"displayName\": \"Aux1\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 341,",
                  "            \"udpName\": \"BOOKON_RELEASE\",",
                  "            \"displayName\": \"Bookon Release\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 285,",
                  "            \"udpName\": \"BOOKON_TRANSACTIONS\",",
                  "            \"displayName\": \"BookOn Transactions\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 345,",
                  "            \"udpName\": \"CAMPAIGN\",",
                  "            \"displayName\": \"Campaign\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 268,",
                  "            \"udpName\": \"COLLEX_NOTE\",",
                  "            \"displayName\": \"Collex Note\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 68,",
                  "            \"udpName\": \"CPage\",",
                  "            \"displayName\": \"Complaints Notes Page\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 259,",
                  "            \"udpName\": \"CONSUMER_CONSENT\",",
                  "            \"displayName\": \"CONSUMER CONSENT\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 342,",
                  "            \"udpName\": \"CONSUMER_PREFERENCE\",",
                  "            \"displayName\": \"Consumer Preference\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 131,",
                  "            \"udpName\": \"CORRESPONDENCEADDRESS\",",
                  "            \"displayName\": \"Correspondence Address\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 11,",
                  "            \"udpName\": \"Credit_Reporting\",",
                  "            \"displayName\": \"Credit Reporting\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 18,",
                  "            \"udpName\": \"Debt_Purchase\",",
                  "            \"displayName\": \"Debt Purchase Data\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 12,",
                  "            \"udpName\": \"Deceased_Details\",",
                  "            \"displayName\": \"Deceased Details\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 64,",
                  "            \"udpName\": \"Dialler_IDs\",",
                  "            \"displayName\": \"Dialler IDs\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 168,",
                  "            \"udpName\": \"DIALLER_SCORE\",",
                  "            \"displayName\": \"DIALLER SCORE UDP\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 20,",
                  "            \"udpName\": \"Discounted_Interest\",",
                  "            \"displayName\": \"Discounted Interest\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 73,",
                  "            \"udpName\": \"Disputes\",",
                  "            \"displayName\": \"Disputes and Document Requests\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 67,",
                  "            \"udpName\": \"FPage\",",
                  "            \"displayName\": \"Financial Notes Page\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 347,",
                  "            \"udpName\": \"FRAUD_CASES\",",
                  "            \"displayName\": \"Fraud Cases\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 13,",
                  "            \"udpName\": \"Insolvency_Data\",",
                  "            \"displayName\": \"Insolvency Data\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 14,",
                  "            \"udpName\": \"KEY_ACTIVITY\",",
                  "            \"displayName\": \"Key Activity\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 19,",
                  "            \"udpName\": \"Litigation\",",
                  "            \"displayName\": \"Litigation\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 270,",
                  "            \"udpName\": \"NAPSTESTUDP\",",
                  "            \"displayName\": \"napsUDP\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 266,",
                  "            \"udpName\": \"NEXT_STRATEGY\",",
                  "            \"displayName\": \"Next Strategy\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 5,",
                  "            \"udpName\": \"OPage\",",
                  "            \"displayName\": \"Other Page\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 15,",
                  "            \"udpName\": \"Outsource\",",
                  "            \"displayName\": \"Outsource\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 143,",
                  "            \"udpName\": \"OVERRIDEPREDEFAULT\",",
                  "            \"displayName\": \"Override Pre-Default\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 305,",
                  "            \"udpName\": \"PAYMENT_PLAN_LETTER_VARS\",",
                  "            \"displayName\": \"PAYMENT_PLAN_LETTER_VARIABLES\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 346,",
                  "            \"udpName\": \"PIFSIF\",",
                  "            \"displayName\": \"PIFSIF\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 160,",
                  "            \"udpName\": \"PLACEMENT\",",
                  "            \"displayName\": \"Placement\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 184,",
                  "            \"udpName\": \"PLN_PMY_TYP\",",
                  "            \"displayName\": \"Plan Payment Method Entry\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 269,",
                  "            \"udpName\": \"PLATOTEST2\",",
                  "            \"displayName\": \"PLATOTEST2\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 142,",
                  "            \"udpName\": \"PREDEFAULT\",",
                  "            \"displayName\": \"Pre-Default\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 16,",
                  "            \"udpName\": \"Property_Data\",",
                  "            \"displayName\": \"Property Data\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 254,",
                  "            \"udpName\": \"RECONNECT_CLOSURES\",",
                  "            \"displayName\": \"Reconnect Closures\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 17,",
                  "            \"udpName\": \"Scottish_Litigation\",",
                  "            \"displayName\": \"Scottish Litigation\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 186,",
                  "            \"udpName\": \"SENSITIVE_SUPPORT2\",",
                  "            \"displayName\": \"Sensitive Support\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 132,",
                  "            \"udpName\": \"SETTLEMENT\",",
                  "            \"displayName\": \"Settlement Options\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 338,",
                  "            \"udpName\": \"SUGGESTED_REPAYMENT\",",
                  "            \"displayName\": \"Suggested Repayment\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 66,",
                  "            \"udpName\": \"Third_Party_Details\",",
                  "            \"displayName\": \"Third Party Details\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 271,",
                  "            \"udpName\": \"TRACE_LAS\",",
                  "            \"displayName\": \"Trace_LAS\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 200,",
                  "            \"udpName\": \"UNDERWRITING_FAILURES\",",
                  "            \"displayName\": \"Underwriting Failures\",",
                  "            \"multiInstance\": true,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        },",
                  "        {",
                  "            \"udpid\": 288,",
                  "            \"udpName\": \"WRITE_DOWN\",",
                  "            \"displayName\": \"Write Down\",",
                  "            \"multiInstance\": false,",
                  "            \"accessLevel\": \"ReadWrite\"",
                  "        }",
                  "    ]",
                  "};",
                  "",
                  "pm.test(\"TEST1: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schema = {",
                  "    \"required\": [",
                  "        \"udpTables\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"udpTables\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"udpid\",",
                  "                    \"udpName\",",
                  "                    \"displayName\",",
                  "                    \"multiInstance\",",
                  "                    \"accessLevel\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"udpid\": {",
                  "                        \"$id\": \"#/properties/udpTables/items/properties/udpid\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"udpName\": {",
                  "                        \"$id\": \"#/properties/udpTables/items/properties/udpName\",",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"displayName\": {",
                  "                        \"$id\": \"#/properties/udpTables/items/properties/displayName\",",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"multiInstance\": {",
                  "                        \"$id\": \"#/properties/udpTables/items/properties/multiInstance\",",
                  "                        \"type\": \"boolean\"",
                  "                    },",
                  "                    \"accessLevel\": {",
                  "                        \"$id\": \"#/properties/udpTables/items/properties/accessLevel\",",
                  "                        \"type\": \"string\",",
                  "                        \"enum\": [",
                  "                        \"ReadOnly\", \"ReadWrite\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/udpTables/items\",",
                  "                \"type\": \"object\"",
                  "            },",
                  "            \"$id\": \"#/properties/udpTables\",",
                  "            \"type\": \"array\"",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"TEST4: Schema Test\", function(){",
                  "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "pm.test(\"TEST5: elements check\", function(){",
                  "    for(var i=0; i<jsonData.udpTables.length; i++){",
                  "        pm.expect(jsonData.udpTables[i].udpid).to.equal(expectedresponse.udpTables[i].udpid);",
                  "        pm.expect(jsonData.udpTables[i].udpName).to.equal(expectedresponse.udpTables[i].udpName);",
                  "        pm.expect(jsonData.udpTables[i].displayName).to.equal(expectedresponse.udpTables[i].displayName);",
                  "        pm.expect(jsonData.udpTables[i].multiInstance).to.equal(expectedresponse.udpTables[i].multiInstance);",
                  "        pm.expect(jsonData.udpTables[i].accessLevel).to.equal(expectedresponse.udpTables[i].accessLevel);",
                  "    }",
                  "});",
                  "/*pm.test(\"TEST6: Data check\", function(){",
                  "    for(var i=0; i<jsonData.udpTables.length; i++){",
                  "        pm.expect(jsonData.udpTables[i].udpid).to.equal(data[i].agncy_dfnd_tbl_id);",
                  "        pm.expect(jsonData.udpTables[i].udpid).to.equal(data.udpTables[i].udpid);",
                  "    }",
                  "});*/",
                  "} catch (e){}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b9594882-e4e8-4de2-9ec4-35b04a947c58",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }else{\r",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                  "    }\r",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "eec346bb-4d4b-4b88-b6b1-60e5afb7680f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "correlation-id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "ocp-apim-subscription-key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "username",
                "value": "Mike",
                "type": "text"
              }
            ],
            "url": "{{BaseURL}}/udp/udplist/consumer",
            "description": "Get list of UDPs"
          },
          "response": [
            {
              "id": "0e6519b8-fed5-4f41-92c6-a838bafa8dc4",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "344703fc-536f-460a-b0cf-a0cb1d006c4c",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "3ac52714-dd5c-49b8-bcca-5d82f918f791",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "a41dd6d4-ab60-4f34-b9a9-c2b65c3825bd",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "d06093a4-c00b-4185-bfd2-a5adc3d06183",
              "name": "Forbidden",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "d3f18ffb-3eed-405f-9f65-4ff6c605f8d7",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"udpTables\": [\n  {\n   \"udpid\": \"<long>\",\n   \"udpName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"multiInstance\": \"<boolean>\",\n   \"accessLevel\": \"<string>\"\n  },\n  {\n   \"udpid\": \"<long>\",\n   \"udpName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"multiInstance\": \"<boolean>\",\n   \"accessLevel\": \"<string>\"\n  }\n ]\n}"
            },
            {
              "id": "e5d35808-0fcb-443c-8b95-4b289cd19935",
              "name": "Unauthorized",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/udplist/consumer"
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "consumer",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e9581755-6a20-44c2-ae22-b0deec57f53d",
                "exec": [
                  "try{",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "/////////////////////////////////////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "console.log(query);",
                  "",
                  "pm.test(\"TEST1: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schema = {",
                  "    \"required\": [",
                  "        \"UDPTable\",",
                  "        \"UDPColumns\",",
                  "        \"Data\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"UDPTable\": {",
                  "            \"required\": [",
                  "                \"UDPID\",",
                  "                \"UDPName\",",
                  "                \"DisplayName\",",
                  "                \"MultiInstance\",",
                  "                \"AccessLevel\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"UDPID\": {",
                  "                    \"$id\": \"#/properties/UDPTable/properties/UDPID\",",
                  "                    \"type\": \"integer\"",
                  "                },",
                  "                \"UDPName\": {",
                  "                    \"$id\": \"#/properties/UDPTable/properties/UDPName\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"DisplayName\": {",
                  "                    \"$id\": \"#/properties/UDPTable/properties/DisplayName\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"MultiInstance\": {",
                  "                    \"$id\": \"#/properties/UDPTable/properties/MultiInstance\",",
                  "                    \"type\": \"boolean\"",
                  "                },",
                  "                \"AccessLevel\": {",
                  "                    \"$id\": \"#/properties/UDPTable/properties/AccessLevel\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/UDPTable\",",
                  "            \"type\": \"object\"",
                  "        },",
                  "        \"UDPColumns\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"UDPColumnID\",",
                  "                    \"ColumnName\",",
                  "                    \"DisplayName\",",
                  "                    \"ColumnType\",",
                  "                    \"ColumnLength\",",
                  "                    \"ColumnOrder\",",
                  "                    \"KeyUDPColumnID\",",
                  "                    \"ReferenceUDPColumnID\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"UDPColumnID\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/UDPColumnID\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"ColumnName\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/ColumnName\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"DisplayName\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/DisplayName\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"ColumnType\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/ColumnType\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"ColumnLength\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/ColumnLength\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"ColumnOrder\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/ColumnOrder\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"KeyUDPColumnID\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/KeyUDPColumnID\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"ReferenceUDPColumnID\": {",
                  "                        \"$id\": \"#/properties/UDPColumns/items/properties/ReferenceUDPColumnID\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/UDPColumns/items\",",
                  "                \"type\": \"object\"",
                  "            },",
                  "            \"$id\": \"#/properties/UDPColumns\",",
                  "            \"type\": \"array\"",
                  "        },",
                  "        \"Data\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"id\",",
                  "                    \"cnsmr_id\",",
                  "                    \"UDEFTRANSACTION_DATE\",",
                  "                    \"UDEFTRANSACTION_AMOUNT\",",
                  "                    \"UDEFTRANSACTION_PAYMENTMETHOD\",",
                  "                    \"UDEFTRANSACTION_DESCRIPTION\",",
                  "                    \"upsrt_dttm\",",
                  "                    \"upsrt_soft_comp_id\",",
                  "                    \"upsrt_trnsctn_nmbr\",",
                  "                    \"upsrt_usr_id\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"id\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/id\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"cnsmr_id\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/cnsmr_id\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"UDEFTRANSACTION_DATE\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/UDEFTRANSACTION_DATE\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"UDEFTRANSACTION_AMOUNT\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/UDEFTRANSACTION_AMOUNT\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"UDEFTRANSACTION_PAYMENTMETHOD\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/UDEFTRANSACTION_PAYMENTMETHOD\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"UDEFTRANSACTION_DESCRIPTION\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/UDEFTRANSACTION_DESCRIPTION\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"upsrt_dttm\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/upsrt_dttm\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"upsrt_soft_comp_id\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/upsrt_soft_comp_id\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"upsrt_trnsctn_nmbr\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/upsrt_trnsctn_nmbr\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"upsrt_usr_id\": {",
                  "                        \"$id\": \"#/properties/Data/items/properties/upsrt_usr_id\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/Data/items\",",
                  "                \"type\": \"object\"",
                  "            },",
                  "            \"$id\": \"#/properties/Data\",",
                  "            \"type\": \"array\"",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"TEST4: Schema Test\", function(){",
                  "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "} catch (e){}",
                  "/*",
                  "pm.environment.set(\"data_id\", jsonData.data[0].id);",
                  "pm.environment.set(\"cnsmr_id\", jsonData.data[0].cnsmr_id);",
                  "pm.environment.set(\"udp_id\", jsonData.udpTable.udpid);*/"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "122ceaec-8095-45b2-a55b-a6c156760f76",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "ebb512f3-d725-4dbb-aa7c-351ba4bd8558",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "correlation-id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "ocp-apim-subscription-key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "username",
                "value": "Mike",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BaseURL}}/udp/udptable/:udpid/:cnsmr_id",
              "host": [
                "{{BaseURL}}"
              ],
              "path": [
                "udp",
                "udptable",
                ":udpid",
                ":cnsmr_id"
              ],
              "variable": [
                {
                  "key": "udpid",
                  "value": "{{udp_id}}",
                  "type": "string"
                },
                {
                  "key": "cnsmr_id",
                  "value": "{{cnsmr_id}}",
                  "type": "string"
                }
              ]
            },
            "description": "Gets column definition and data for given UDP and Consumer ID"
          },
          "response": [
            {
              "id": "09bd78fb-4169-44be-a820-b9d52b1f6dcf",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "222fea0c-139e-4c9e-8b60-5f8f3db8514d",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "4134d00c-3b3d-4c92-88c8-e60c2c0ca21e",
              "name": "Unauthorized",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "86789b66-0b27-4cb2-a417-cb45f47cf653",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "8dbb0e56-b165-448a-9fe4-9863576d85c5",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"valueID\": \"<long>\",\n \"valueText\": \"<string>\"\n}"
            },
            {
              "id": "9f60c127-a38c-4999-869f-8cf263eebac9",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "ff013d7d-6b94-4936-96e5-e5ff4aaeccc3",
              "name": "Forbidden",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/udptable/:udpid/:consumerid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "udptable",
                    ":udpid",
                    ":consumerid"
                  ],
                  "variable": [
                    {
                      "key": "udpid"
                    },
                    {
                      "key": "consumerid"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "getvaluelist",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ef92af42-77ef-4b7d-8270-1335db3c2184",
                "exec": [
                  "try{",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "/////////////////////////////////////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "console.log(query);",
                  "",
                  "pm.test(\"TEST1: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schema = {",
                  "    \"items\": {",
                  "        \"required\": [",
                  "            \"valueID\",",
                  "            \"valueText\"",
                  "        ],",
                  "        \"properties\": {",
                  "            \"valueID\": {",
                  "                \"$id\": \"#/items/properties/valueID\",",
                  "                \"type\": \"string\"",
                  "            },",
                  "            \"valueText\": {",
                  "                \"$id\": \"#/items/properties/valueText\",",
                  "                \"type\": \"string\"",
                  "            }",
                  "        },",
                  "        \"$id\": \"#/items\",",
                  "        \"type\": \"object\"",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"array\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"TEST4: Schema Test\", function(){",
                  "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "} catch (e){}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "e793e54c-b9ee-4030-9904-6606a6d4ac0e",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "40d44133-003b-4637-b224-137a331eb503",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "correlation-id",
                "value": "{{Correlation-Id}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "ocp-apim-subscription-key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "username",
                "value": "Mike",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BaseURL}}/udp/values/3528",
              "host": [
                "{{BaseURL}}"
              ],
              "path": [
                "udp",
                "values",
                "3528"
              ],
              "query": [
                {
                  "key": "",
                  "value": "",
                  "type": "text",
                  "disabled": true
                }
              ]
            },
            "description": "Get list of UDP column Values"
          },
          "response": [
            {
              "id": "11bfffa8-0431-415e-ae14-ecd8ddbdefa3",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "1496f735-a4d4-495f-b1b5-7305ee5bc07b",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "19a9ec8d-503e-4ae9-851e-ef39343769ac",
              "name": "Forbidden",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "8eb592a6-24b4-42ed-b28e-1f40d18b9141",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "a0101166-0d35-479e-9738-c14aa9e41ffa",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"valueID\": \"<long>\",\n  \"valueText\": \"<string>\"\n },\n {\n  \"valueID\": \"<long>\",\n  \"valueText\": \"<string>\"\n }\n]"
            },
            {
              "id": "c1a0be71-f75d-4f3a-b0c0-a79e8a24ad9f",
              "name": "Unauthorized",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "d11a0089-88ba-416a-9195-54080578c0b7",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/values/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "values",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "getreferencelist",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "8d64f6be-3403-44e9-9ce1-dca9d1e4cc0c",
                "exec": [
                  "try{",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "/////////////////////////////////////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "console.log(query);",
                  "",
                  "pm.test(\"TEST1: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schema = {",
                  "    \"items\": {",
                  "        \"required\": [",
                  "            \"referenceValueID\",",
                  "            \"referenceValueText\"",
                  "        ],",
                  "        \"properties\": {",
                  "            \"referenceValueID\": {",
                  "                \"$id\": \"#/items/properties/referenceValueID\",",
                  "                \"type\": \"string\"",
                  "            },",
                  "            \"referenceValueText\": {",
                  "                \"$id\": \"#/items/properties/referenceValueText\",",
                  "                \"type\": \"string\"",
                  "            }",
                  "        },",
                  "        \"$id\": \"#/items\",",
                  "        \"type\": \"object\"",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"array\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"TEST4: Schema Test\", function(){",
                  "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "} catch (e){}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0916094a-3907-42fd-8e97-eebde4ed0504",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "a7abfc47-1179-4265-9ced-3a808394bc55",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "correlation-id",
                "value": "{{Correlation-Id}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "ocp-apim-subscription-key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "username",
                "value": "Mike",
                "type": "text"
              }
            ],
            "url": "{{BaseURL}}/udp/referencevalues/70",
            "description": "Get list of UDP Reference Values"
          },
          "response": [
            {
              "id": "0490cbfa-013d-43a9-85a9-ce9f7ceeed59",
              "name": "Unauthorized",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "2fe10125-176f-4d26-a239-c9e64092e6ff",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"referenceValueID\": \"<string>\",\n  \"referenceValueText\": \"<string>\"\n },\n {\n  \"referenceValueID\": \"<string>\",\n  \"referenceValueText\": \"<string>\"\n }\n]"
            },
            {
              "id": "4916acfc-f460-4b82-8438-ab0ba11284b7",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "51064eb4-071f-43bb-9a8a-979e493202dc",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "9f3f3a4e-1d38-4774-b4a2-f17db884e7cc",
              "name": "Forbidden",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "b6c08180-c28a-433b-87aa-6fcd64e1b075",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "d149ecd3-78b8-407f-b36d-596baaef9a08",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/referencevalues/:columnid",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "referencevalues",
                    ":columnid"
                  ],
                  "variable": [
                    {
                      "key": "columnid"
                    }
                  ]
                }
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "/swagger",
          "_postman_id": "54ee8516-0ed6-4aa4-b333-88910c9e9bde",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IllNRUxIVDBndmIwbXhvU0RvWWZvbWpxZmpZVSIsImtpZCI6IllNRUxIVDBndmIwbXhvU0RvWWZvbWpxZmpZVSJ9.eyJhdWQiOiJhcGk6Ly84MTE2N2QzZC04NTNmLTQyMDctODBmYS0zMjI1YTQ5MjdhY2EiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC8zNjQ3ZTlmNy0wMzA1LTRhYjYtYjA2Zi00YjM2YTM1NDk3OTMvIiwiaWF0IjoxNTg2Mjc1Nzk0LCJuYmYiOjE1ODYyNzU3OTQsImV4cCI6MTU4NjI3OTY5NCwiYWlvIjoiNDJkZ1lFaGsvT2E1TWR4eGxweDJRS1RZdi9CUEFBPT0iLCJhcHBpZCI6IjIxYjhmYmVmLTcyNmItNDdhNC04MTM1LTFiY2ZlMmJhOWE5OCIsImFwcGlkYWNyIjoiMSIsImlkcCI6Imh0dHBzOi8vc3RzLndpbmRvd3MubmV0LzM2NDdlOWY3LTAzMDUtNGFiNi1iMDZmLTRiMzZhMzU0OTc5My8iLCJvaWQiOiI4ZWVmMzgyOS04MDNlLTQzN2UtYTQ5NC01NzQ1NzVkNTBlZTgiLCJzdWIiOiI4ZWVmMzgyOS04MDNlLTQzN2UtYTQ5NC01NzQ1NzVkNTBlZTgiLCJ0aWQiOiIzNjQ3ZTlmNy0wMzA1LTRhYjYtYjA2Zi00YjM2YTM1NDk3OTMiLCJ1dGkiOiIwbEZqUHQ1ZnFrYXUzVXQ1aFZRYUFBIiwidmVyIjoiMS4wIn0.JYl7DKA7lGq3rsg_XXiv9Z14DbCnJDe7xG1Yjtk6vvZEIs72oFh4gxl9eK8gs0A-RHnMkMp8ZW60jFRqS7sZJfvkcWx7W5DGxbfmfYmHB6cJ2QM2BY1cYPvo9HU5mTL7fWf1-JqNHxPUyFAfpFKRoefF6vG-_cuF1A864etxhZiROvG-LVMpVNWVrfa3Zzge1dLgiKNI1cWZijFn2N2jroBoqd7kC98xob5O4eDaHlRH-Z_E3V8rnDhR4T7aScRjSr3Urw-kE9exVEowe6aMSklVBAyVSkW3SDc1gze0dlAkOCj1s6wVysSIp1NvarNAz1nFCRdYbgjwl7n3XcFRkA",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": ""
              }
            ],
            "url": "{{BaseURL}}/udp/swagger"
          },
          "response": [
            {
              "id": "3acc986b-e2a6-4e0a-9a91-fb07de86dc75",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/swagger"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "291d380c-1eb3-4c33-9087-1bc55336b018"
    },
    {
      "name": "Linked Consumer",
      "item": [
        {
          "name": "consumer/{consumer Id}",
          "item": [
            {
              "name": "getconsumergroup",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "77f03941-2bb3-48d0-847b-e3348868dde0",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"groupID\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"groupID\": {",
                      "            \"$id\": \"#/properties/groupID\",",
                      "            \"type\": \"string\"",
                      "        }",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST4: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "} catch (e){}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "bc357e4f-3ff9-45df-a3c6-9a0e1eb087c0",
                    "exec": [
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }else{\r",
                      "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                      "    }\r",
                      "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "017192d8-7df7-4936-b7f9-f794a7132816",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "",
                    "disabled": true
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "description": "(Required) "
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "description": "(Required) "
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{Correlation-Id}}",
                    "description": "(Required) "
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "description": "(Required) "
                  },
                  {
                    "key": "Username",
                    "value": "Mike",
                    "description": "(Required) "
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/linkedconsumer/consumer/:consumerId/group",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "linkedconsumer",
                    "consumer",
                    ":consumerId",
                    "group"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string",
                      "description": "(Required) "
                    }
                  ]
                },
                "description": "Gets consumer group assoisated with the given consumer ID"
              },
              "response": [
                {
                  "id": "4923f97f-cbc6-4390-b401-84c2d5cc3613",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Origin",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Username",
                        "value": "<string>",
                        "description": "(Required) "
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/group",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "group"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "5822d41a-54fa-47d4-8e23-434d7fd3b526",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Origin",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Username",
                        "value": "<string>",
                        "description": "(Required) "
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/group",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "group"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"groupID\": \"<uuid>\"\n}"
                },
                {
                  "id": "c95b693d-7e08-4998-bfcc-1589af8cbc16",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Origin",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Username",
                        "value": "<string>",
                        "description": "(Required) "
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/group",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "group"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "getlinkedconsumers",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "41580d2e-472b-4c7d-a29b-0570e48486b3",
                    "exec": [
                      "try{",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = JSON.parse(responseBody);",
                      "var req = request.url;",
                      "var query = request.url.split('/');",
                      "console.log(query);",
                      "",
                      "pm.test(\"TEST1: Status code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST2: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console}),",
                      "schema = {",
                      "    \"required\": [",
                      "        \"consumerGroups\",",
                      "        \"groupID\"",
                      "    ],",
                      "    \"properties\": {",
                      "        \"consumerGroups\": {",
                      "            \"items\": {",
                      "                \"required\": [",
                      "                    \"consumerID\",",
                      "                    \"legacyID\",",
                      "                    \"confirmed\",",
                      "                    \"dateModified\"",
                      "                ],",
                      "                \"properties\": {",
                      "                    \"consumerID\": {",
                      "                        \"$id\": \"#/properties/consumerGroups/items/properties/consumerID\",",
                      "                        \"type\": \"integer\"",
                      "                    },",
                      "                    \"legacyID\": {",
                      "                        \"$id\": \"#/properties/consumerGroups/items/properties/legacyID\",",
                      "                        \"type\": \"string\"",
                      "                    },",
                      "                    \"confirmed\": {",
                      "                        \"$id\": \"#/properties/consumerGroups/items/properties/confirmed\",",
                      "                        \"type\": \"boolean\"",
                      "                    },",
                      "                    \"dateModified\": {",
                      "                        \"$id\": \"#/properties/consumerGroups/items/properties/dateModified\",",
                      "                        \"type\": \"string\"",
                      "                    }",
                      "                },",
                      "                \"$id\": \"#/properties/consumerGroups/items\",",
                      "                \"type\": \"object\"",
                      "            },",
                      "            \"$id\": \"#/properties/consumerGroups\",",
                      "            \"type\": \"array\"",
                      "        },",
                      "        \"groupID\": {",
                      "            \"$id\": \"#/properties/groupID\",",
                      "            \"type\": \"string\"",
                      "        }",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"object\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "pm.test(\"TEST4: Schema Test\", function(){",
                      "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                      "});",
                      "} catch (e){}",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "502e8eeb-137c-4cb0-9a59-3eddce9018b4",
                    "exec": [
                      "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                      "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                      "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                      "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "var noDate = 0;\r",
                      "var tokenDate = new Date(2010, 1, 1);\r",
                      "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "if (tokenTimestamp) {\r",
                      "    tokenDate = Date.parse(tokenTimestamp);\r",
                      "} else { noDate = 1 };\r",
                      "//console.log(\"timestamp is\"+tokenDate);\r",
                      "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "if (!expiresInTime) {\r",
                      "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "}\r",
                      "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                      "if ((new Date() - tokenDate) >= expiresInTime || noDate == 1) {\r",
                      "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                      "    let clientId = pm.environment.get(\"clientId\");\r",
                      "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                      "    let scope = pm.environment.get(\"clientScope\");\r",
                      "    let getTokenRequest = {\r",
                      "        method: 'POST',\r",
                      "        url: tokenUrl,\r",
                      "        auth: {\r",
                      "            type: \"basic\",\r",
                      "            basic: [\r",
                      "                { key: \"username\", value: clientId },\r",
                      "                { key: \"password\", value: clientSecret }\r",
                      "            ]\r",
                      "        },\r",
                      "        body: {\r",
                      "            mode: 'formdata',\r",
                      "            formdata: [\r",
                      "                { key: 'grant_type', value: 'client_credentials' },\r",
                      "                { key: 'scope', value: scope }\r",
                      "            ]\r",
                      "        }\r",
                      "    };\r",
                      "    pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "        let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "        //console.log({ err, jsonResponse, newAccessToken });\r",
                      "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                      "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "    });\r",
                      "    //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");"
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "cc7d46cd-f55c-4378-b0e0-b1aeccca772c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "",
                    "disabled": true
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}",
                    "description": "(Required) "
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}",
                    "description": "(Required) "
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "{{Correlation-Id}}",
                    "description": "(Required) "
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "description": "(Required) "
                  },
                  {
                    "key": "Username",
                    "value": "Mike",
                    "description": "(Required) "
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/linkedconsumer/consumer/:consumerId/links",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "linkedconsumer",
                    "consumer",
                    ":consumerId",
                    "links"
                  ],
                  "variable": [
                    {
                      "key": "consumerId",
                      "value": "{{cnsmr_id}}",
                      "type": "string"
                    }
                  ]
                },
                "description": "Gets consumers linked to the given consumer ID"
              },
              "response": [
                {
                  "id": "8af775ea-6ba0-451f-99fe-51619d867280",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Origin",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Username",
                        "value": "<string>",
                        "description": "(Required) "
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/links",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "links"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "text",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "text/plain"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": ""
                },
                {
                  "id": "c1547094-fb80-4ab7-ad1e-54918cb6e981",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Origin",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Username",
                        "value": "<string>",
                        "description": "(Required) "
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/links",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "links"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"consumerGroups\": [\n  {\n   \"consumerID\": \"<long>\",\n   \"legacyID\": \"<string>\",\n   \"confirmed\": \"<boolean>\",\n   \"dateModified\": \"<dateTime>\"\n  },\n  {\n   \"consumerID\": \"<long>\",\n   \"legacyID\": \"<string>\",\n   \"confirmed\": \"<boolean>\",\n   \"dateModified\": \"<dateTime>\"\n  }\n ],\n \"groupID\": \"<uuid>\"\n}"
                },
                {
                  "id": "ef26c2b4-30a5-49cc-91c1-49038ce538af",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Correlation-Id",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Origin",
                        "value": "<string>",
                        "description": "(Required) "
                      },
                      {
                        "key": "Username",
                        "value": "<string>",
                        "description": "(Required) "
                      }
                    ],
                    "url": {
                      "raw": "{{baseUrl}}/consumer/:consumerId/links",
                      "host": [
                        "{{baseUrl}}"
                      ],
                      "path": [
                        "consumer",
                        ":consumerId",
                        "links"
                      ],
                      "variable": [
                        {
                          "key": "consumerId"
                        }
                      ]
                    }
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "43033d21-af09-4406-a17f-6db2239ece62",
          "_postman_isSubFolder": true
        },
        {
          "name": "addconsumerlink",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d35b25a0-aa79-4729-bdbc-6d7a7beb1825",
                "exec": [
                  "try{",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "",
                  "/////////////////////////////////////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var reqData = JSON.parse(request.data);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "",
                  "pm.test(\"TEST1: Status code Check\", function() {",
                  "    pm.response.to.have.status(202);",
                  "});",
                  "",
                  "pm.test(\"TEST2: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "",
                  "} catch (e){",
                  "    var req = JSON.parse(request.data);",
                  "    console.log(req);",
                  "    var cid = responseBody.split(':');",
                  "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                  "        pm.expect(responseCode.code).to.equal(400);",
                  "        pm.expect(responseBody).to.equal(\"User Account Record not found for consumerID: \" + req.fromConsumerID);",
                  "        pm.expect(cid[1]).to.deep.equal(\" \" + req.fromConsumerID);",
                  "    });",
                  "        pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                  "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "    });",
                  "    pm.test(\"Response Header Checks\", function () {",
                  "        pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ebc3f215-e769-466b-a07e-50826533cd0c",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "//console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "//console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "//console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010, 1, 1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if (tokenTimestamp) {\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "} else { noDate = 1 };\r",
                  "//console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if (!expiresInTime) {\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if ((new Date() - tokenDate) >= expiresInTime || noDate == 1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "            type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "    pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "        let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "    //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8f975af9-c484-469a-a1e8-443780b2bff8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "",
                "disabled": true
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "description": "(Required) "
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "description": "(Required) "
              },
              {
                "key": "Correlation-Id",
                "value": "{{Correlation-Id}}",
                "description": "(Required) "
              },
              {
                "key": "Origin",
                "value": "External",
                "description": "(Required) "
              },
              {
                "key": "Username",
                "value": "Mike",
                "description": "(Required) "
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"fromConsumerID\": \"2005366\",\n    \"toConsumerID\": \"2037556\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/linkedconsumer/consumerlink",
            "description": "Create a new link between Consumers"
          },
          "response": [
            {
              "id": "48da5a10-972c-4625-b912-f84777094b70",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Origin",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Username",
                    "value": "<string>",
                    "description": "(Required) "
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"fromConsumerID\": \"<long>\",\n    \"toConsumerID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/consumerlink"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "912cd87c-f32b-49eb-aa34-5f77a9416650",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Origin",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Username",
                    "value": "<string>",
                    "description": "(Required) "
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"fromConsumerID\": \"<long>\",\n    \"toConsumerID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/consumerlink"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "c042ce45-c6c5-42bb-a105-c46da98e4bf7",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Correlation-Id",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Origin",
                    "value": "<string>",
                    "description": "(Required) "
                  },
                  {
                    "key": "Username",
                    "value": "<string>",
                    "description": "(Required) "
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"fromConsumerID\": \"<long>\",\n    \"toConsumerID\": \"<long>\",\n    \"Correlation-Id\": \"<string>\",\n    \"Cache-Control\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/consumerlink"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/plain"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "10a5c421-9e41-4edb-ac8a-27dc55f4fdd9"
    },
    {
      "name": "Advanced Search",
      "item": [
        {
          "name": "Get Search Fields Copy",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "65da4369-3439-43f2-989f-418e5664cd88",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "",
                  "var Ajv = require ('ajv'),",
                  "ajv = new Ajv ({logger:console}),",
                  "expectedResponseSchema = {",
                  "    \"items\": {",
                  "        \"required\": [",
                  "            \"id\",",
                  "            \"searchBy\"",
                  "        ],",
                  "        \"properties\": {",
                  "            \"id\": {",
                  "                \"$id\": \"#/items/properties/id\",",
                  "                \"type\": \"number\"",
                  "            },",
                  "            \"searchBy\": {",
                  "                \"$id\": \"#/items/properties/searchBy\",",
                  "                \"type\": \"string\"",
                  "            }",
                  "        },",
                  "        \"$id\": \"#/items\",",
                  "        \"type\": \"object\"",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"array\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "",
                  "var currentSchPmExpTest;",
                  "try{",
                  "    currentSchPmExpTest = \" expectedResponseSchema variable\";",
                  "    pm.expect(ajv.validate(expectedResponseSchema, jsonData)).to.be.true;",
                  "    pm.test('Test 1 - PASSED - expectedResponseSchema variable data matches schema returned by body response!', () => true);",
                  "    pm.test(\"TEST02: Response Header Checks\", function() {",
                  "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "    });",
                  "",
                  "    pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "    });",
                  "}catch(e){",
                  "    pm.test('Test 1 - FAILED - Expected data does not match response body data!', () => {",
                  "        throw new Error(e.message + \" in \" + currentSchPmExpTest)});",
                  "    console.log('Test 1 - FAILED - Expected data does not match response body data!' + \"\\n\\n\" +",
                  "    e.message + \" in \" + currentSchPmExpTest); ",
                  "    pm.test(\"TEST02: Response Header Checks\", function() {",
                  "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "    });",
                  "",
                  "    pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "    });   ",
                  "}",
                  "",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "031da742-ca5a-4b57-bbe9-eb11ba9499ea",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010,1,1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if(tokenTimestamp){\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "}else {noDate = 1};\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if(!expiresInTime){\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                  "    let clientId = pm.environment.get(\"clientId\"); \r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                  "    let scope = pm.environment.get(\"clientScope\"); \r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "           type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "    let jsonResponse = response.json(),\r",
                  "        newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "700b4f1f-7ede-40ea-a58d-e141430517e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "url": "{{baseUrl}}/advancesearch/search/fields",
            "description": "Get Search Fields"
          },
          "response": [
            {
              "id": "12592974-866a-4fdb-a889-90bf01322637",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/search/fields"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"id\": \"<integer>\",\n  \"searchBy\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"searchBy\": \"<string>\"\n }\n]"
            },
            {
              "id": "219ac91f-7af1-45c9-bfe6-92ffad657d96",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/search/fields"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "bf9eca15-c43b-4248-a594-b5b0aaaf266f",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": "{{baseUrl}}/search/fields"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            }
          ]
        },
        {
          "name": "Get Consumer Details",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8834452c-8cab-4009-9c70-0322cca4719c",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010,1,1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if(tokenTimestamp){\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "}else {noDate = 1};\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if(!expiresInTime){\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                  "    let clientId = pm.environment.get(\"clientId\"); \r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                  "    let scope = pm.environment.get(\"clientScope\"); \r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "           type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "    let jsonResponse = response.json(),\r",
                  "        newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "76ab90f3-e371-4b4d-8f31-100a168f5419",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                  "var Ajv = require('ajv'),\r",
                  "ajv = new Ajv({logger: console}),\r",
                  "schema = \r",
                  "{\r",
                  "    \"items\": {\r",
                  "        \"required\": [\r",
                  "            \"firstName\",\r",
                  "            \"lastName\",\r",
                  "            \"legacyId\",\r",
                  "            \"consumerId\"\r",
                  "        ],\r",
                  "        \"properties\": {\r",
                  "            \"firstName\": {\r",
                  "                \"$id\": \"#/items/properties/firstName\",\r",
                  "                \"type\": \"string\"\r",
                  "            },\r",
                  "            \"lastName\": {\r",
                  "                \"$id\": \"#/items/properties/lastName\",\r",
                  "                \"type\": \"string\"\r",
                  "            },\r",
                  "            \"legacyId\": {\r",
                  "                \"$id\": \"#/items/properties/legacyId\",\r",
                  "                \"type\": [\"string\", \"null\"]\r",
                  "            },\r",
                  "            \"consumerId\": {\r",
                  "                \"$id\": \"#/items/properties/consumerId\",\r",
                  "                \"type\": \"integer\"\r",
                  "            }\r",
                  "        },\r",
                  "        \"$id\": \"#/items\",\r",
                  "        \"type\": \"object\"\r",
                  "    },\r",
                  "    \"$id\": \"http://example.org/root.json#\",\r",
                  "    \"type\": \"array\",\r",
                  "    \"definitions\": {},\r",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                  "};\r",
                  "\r",
                  "pm.test(\"TEST01: Status Code Check\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST02: Response Header Checks\", function() {\r",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                  "});\r",
                  "pm.test(\"TEST04: Response Schema is valid\", function() {\r",
                  "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;\r",
                  "});\r",
                  "///NEGATIVE TESTS\r",
                  "\r",
                  "pm.test(\"Neg Test 01: Check if array is empty\", function () {\r",
                  "     pm.expect(schema).to.not.be.empty;\r",
                  "});\r",
                  " pm.test(\"Neg Test 02: Check if string is empty\", function () {\r",
                  "     pm.expect('description').to.not.be.empty;\r",
                  "});\r",
                  " pm.test(\"Neg Test 03: Check keylinkID isn't empty\", function () {\r",
                  "     pm.expect('preferenceTypeID').to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Incorrect field examaple\", function() {\r",
                  "    var pID = schema.items.preferenceTypeID;\r",
                  "    var booleanV = Boolean;\r",
                  "    pm.expect(pID).to.not.equal(booleanV);\r",
                  "    console.log(jsonData.toString());\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "fa05b992-4031-42b1-a44b-d1b385bbf88e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "username",
                "value": "\"username\"",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/advancesearch/consumer/details/:SearchById/:SearchText",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "advancesearch",
                "consumer",
                "details",
                ":SearchById",
                ":SearchText"
              ],
              "variable": [
                {
                  "key": "SearchById",
                  "value": "{{id}}",
                  "type": "string",
                  "description": "(Required) "
                },
                {
                  "key": "SearchText",
                  "value": "{{txt}}",
                  "type": "string",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "id": "287da9f6-5e7e-407a-a0ba-23840fd03f6f",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/consumer/details/:SearchById/:SearchText",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "details",
                    ":SearchById",
                    ":SearchText"
                  ],
                  "variable": [
                    {
                      "key": "SearchById"
                    },
                    {
                      "key": "SearchText"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            },
            {
              "id": "c2295c40-8e22-4926-8b53-46419277d6bc",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/consumer/details/:SearchById/:SearchText",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "details",
                    ":SearchById",
                    ":SearchText"
                  ],
                  "variable": [
                    {
                      "key": "SearchById"
                    },
                    {
                      "key": "SearchText"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "d9951a6c-d7dc-4618-af40-dacd7443baa7",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/consumer/details/:SearchById/:SearchText",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "details",
                    ":SearchById",
                    ":SearchText"
                  ],
                  "variable": [
                    {
                      "key": "SearchById"
                    },
                    {
                      "key": "SearchText"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"legacyId\": \"<string>\",\n  \"consumerId\": \"<long>\"\n },\n {\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"legacyId\": \"<string>\",\n  \"consumerId\": \"<long>\"\n }\n]"
            }
          ]
        },
        {
          "name": "Get Consumer Details FINAL",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8834452c-8cab-4009-9c70-0322cca4719c",
                "exec": [
                  "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
                  "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
                  "console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "var noDate = 0;\r",
                  "var tokenDate = new Date(2010,1,1);\r",
                  "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "if(tokenTimestamp){\r",
                  "    tokenDate = Date.parse(tokenTimestamp);\r",
                  "}else {noDate = 1};\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "if(!expiresInTime){\r",
                  "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "}\r",
                  "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
                  "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
                  "    let clientId = pm.environment.get(\"clientId\"); \r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
                  "    let scope = pm.environment.get(\"clientScope\"); \r",
                  "    let getTokenRequest = {\r",
                  "        method: 'POST',\r",
                  "        url: tokenUrl,\r",
                  "        auth: {\r",
                  "           type: \"basic\",\r",
                  "            basic: [\r",
                  "                { key: \"username\", value: clientId },\r",
                  "                { key: \"password\", value: clientSecret }\r",
                  "            ]\r",
                  "        },\r",
                  "        body: {\r",
                  "            mode: 'formdata',\r",
                  "            formdata: [\r",
                  "                { key: 'grant_type', value: 'client_credentials' },\r",
                  "                { key: 'scope', value: scope }\r",
                  "            ]\r",
                  "        }\r",
                  "    };\r",
                  "pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "    let jsonResponse = response.json(),\r",
                  "        newAccessToken = jsonResponse.access_token;\r",
                  "        //console.log({ err, jsonResponse, newAccessToken });\r",
                  "        pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "    });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "76ab90f3-e371-4b4d-8f31-100a168f5419",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                  "var Ajv = require('ajv'),\r",
                  "ajv = new Ajv({logger: console}),\r",
                  "schema = \r",
                  "{\r",
                  "    \"items\": {\r",
                  "        \"required\": [\r",
                  "            \"firstName\",\r",
                  "            \"lastName\",\r",
                  "            \"legacyId\",\r",
                  "            \"consumerId\"\r",
                  "        ],\r",
                  "        \"properties\": {\r",
                  "            \"firstName\": {\r",
                  "                \"$id\": \"#/items/properties/firstName\",\r",
                  "                \"type\": \"string\"\r",
                  "            },\r",
                  "            \"lastName\": {\r",
                  "                \"$id\": \"#/items/properties/lastName\",\r",
                  "                \"type\": \"string\"\r",
                  "            },\r",
                  "            \"legacyId\": {\r",
                  "                \"$id\": \"#/items/properties/legacyId\",\r",
                  "                \"type\": [\"string\", \"null\"]\r",
                  "            },\r",
                  "            \"consumerId\": {\r",
                  "                \"$id\": \"#/items/properties/consumerId\",\r",
                  "                \"type\": \"integer\"\r",
                  "            }\r",
                  "        },\r",
                  "        \"$id\": \"#/items\",\r",
                  "        \"type\": \"object\"\r",
                  "    },\r",
                  "    \"$id\": \"http://example.org/root.json#\",\r",
                  "    \"type\": \"array\",\r",
                  "    \"definitions\": {},\r",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                  "};\r",
                  "\r",
                  "pm.test(\"TEST01: Status Code Check\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST02: Response Header Checks\", function() {\r",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                  "});\r",
                  "pm.test(\"TEST04: Response Schema is valid\", function() {\r",
                  "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;\r",
                  "});\r",
                  "///NEGATIVE TESTS\r",
                  "\r",
                  "pm.test(\"Neg Test 01: Check if array is empty\", function () {\r",
                  "     pm.expect(schema).to.not.be.empty;\r",
                  "});\r",
                  " pm.test(\"Neg Test 02: Check if string is empty\", function () {\r",
                  "     pm.expect('description').to.not.be.empty;\r",
                  "});\r",
                  " pm.test(\"Neg Test 03: Check keylinkID isn't empty\", function () {\r",
                  "     pm.expect('preferenceTypeID').to.not.be.empty;\r",
                  "});\r",
                  "pm.test(\"Incorrect field examaple\", function() {\r",
                  "    var pID = schema.items.preferenceTypeID;\r",
                  "    var booleanV = Boolean;\r",
                  "    pm.expect(pID).to.not.equal(booleanV);\r",
                  "    console.log(jsonData.toString());\r",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "263703ff-b409-4d3a-83f2-2810bf28dc6f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "username",
                "value": "\"username\"",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/advancesearch/consumer/details/:SearchById/:SearchText",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "advancesearch",
                "consumer",
                "details",
                ":SearchById",
                ":SearchText"
              ],
              "variable": [
                {
                  "key": "SearchById",
                  "value": "{{id}}",
                  "type": "string",
                  "description": "(Required) "
                },
                {
                  "key": "SearchText",
                  "value": "{{txt}}",
                  "type": "string",
                  "description": "(Required) "
                }
              ]
            }
          },
          "response": [
            {
              "id": "1447d246-1018-48e7-9b21-6ddedcf96fc2",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/consumer/details/:SearchById/:SearchText",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "details",
                    ":SearchById",
                    ":SearchText"
                  ],
                  "variable": [
                    {
                      "key": "SearchById"
                    },
                    {
                      "key": "SearchText"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"legacyId\": \"<string>\",\n  \"consumerId\": \"<long>\"\n },\n {\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"legacyId\": \"<string>\",\n  \"consumerId\": \"<long>\"\n }\n]"
            },
            {
              "id": "3de38e1d-1634-4a75-b63f-2ab731213762",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/consumer/details/:SearchById/:SearchText",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "details",
                    ":SearchById",
                    ":SearchText"
                  ],
                  "variable": [
                    {
                      "key": "SearchById"
                    },
                    {
                      "key": "SearchText"
                    }
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "947be52a-a486-4529-8bc0-62772f6bc1f4",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/consumer/details/:SearchById/:SearchText",
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "path": [
                    "consumer",
                    "details",
                    ":SearchById",
                    ":SearchText"
                  ],
                  "variable": [
                    {
                      "key": "SearchById"
                    },
                    {
                      "key": "SearchText"
                    }
                  ]
                }
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            }
          ]
        }
      ],
      "_postman_id": "232f4bdd-4882-44ce-b228-f77b830d27fd"
    },
    {
      "name": "Account Information",
      "item": [
        {
          "name": "Get Consumer Account information",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "88c2670a-d888-4d71-8aa2-3e9b61d90d0b",
                "exec": [
                  "try {",
                  "    pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));",
                  "    pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));",
                  "    console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "    var jsonData = JSON.parse(responseBody);",
                  "    var req = request.url;",
                  "    var query = request.url.split('/');",
                  "    console.log(query);",
                  "    pm.test(\"TEST1: Consumer ID Check\", function () {",
                  "        if (data.cnsmr_id == null) {",
                  "            pm.expect(JSON.stringify(jsonData[0].consumerID)).to.equal(query[5]);",
                  "        } else {",
                  "            pm.expect(jsonData[0].consumerID).to.equal(data.cnsmr_id);",
                  "        }",
                  "    });",
                  "    //console.log(JSON.stringify(jsonData[0].title).toUpperCase());",
                  "    if (data.cnsmr_id != null) {",
                  "        pm.test(\"TEST1A: Title check\", function () {",
                  "            if (jsonData[0].title === null) {",
                  "                pm.expect((data.title).toUpperCase()).to.equal(\"NULL\");",
                  "            } else {",
                  "                pm.expect((jsonData[0].title).toUpperCase()).to.equal((data.title).toUpperCase());",
                  "            }",
                  "        });",
                  "        pm.test(\"TEST1B: legacyID check\", function () {",
                  "            pm.expect(jsonData[0].legacyID).to.equal(JSON.stringify(data.legacyID));",
                  "        });",
                  "        pm.test(\"TEST1C: firstName check\", function () {",
                  "            if(jsonData[0].firstName=== null){",
                  "            pm.expect(JSON.stringify(jsonData[0].firstName).toUpperCase()).to.equal((data.firstname).toUpperCase());",
                  "            }else{",
                  "                pm.expect(jsonData[0].firstName).to.equal(data.firstname);",
                  "            }",
                  "        });",
                  "        pm.test(\"TEST1D: lastName check\", function () {",
                  "            if(jsonData[0].lastName=== null){",
                  "            pm.expect(JSON.stringify(jsonData[0].lastName).toUpperCase()).to.equal((data.surname).toUpperCase());",
                  "            }else{",
                  "                pm.expect(jsonData[0].lastName).to.equal(data.surname);",
                  "            }",
                  "        });",
                  "        pm.test(\"TEST1E: Consumer Account ID check\", function () {",
                  "            pm.expect(jsonData[0].consumerAccountID).to.equal(data.cnsmr_accnt_id);",
                  "        });",
                  "        pm.test(\"TEST1F: BookOn Date check\", function () {",
                  "            pm.expect(jsonData[0].bookOnDate.split('T')[0]).to.equal(data.bookondt.split(' ')[0]);",
                  "            pm.expect(jsonData[0].terminationDate.split('T')[0]).to.equal(data.terminationdt.split(' ')[0]);",
                  "            pm.expect(jsonData[0].lastPaymentDate.split('T')[0]).to.equal(data.lastPaymentDate.split(' ')[0]);",
                  "        });",
                  "        pm.test(\"TEST1G: consumer address check\", function () {",
                  "            if (jsonData[0].consumerAddress != null) {",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.addressLine1).toUpperCase()).to.equal(data.AddressLine1.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.addressLine2).toUpperCase()).to.equal(data.AddressLine2.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.addressLine3).toUpperCase()).to.equal(data.AddressLine3.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.city).toUpperCase()).to.equal(data.City.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.state).toUpperCase()).to.equal(data.State.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.county).toUpperCase()).to.equal(data.County.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.postCode).toUpperCase()).to.equal(data.PostCode.toUpperCase());",
                  "                pm.expect(JSON.stringify(jsonData[0].consumerAddress.country).toUpperCase()).to.equal(data.Country.toUpperCase());",
                  "            }",
                  "        });",
                  "        pm.test(\"TEST1H: Third Party check\", function() {",
                  "            if(jsonData[0].thirdPartyInformation.thirdPartyName===null){",
                  "                pm.expect(JSON.stringify(jsonData[0].thirdPartyInformation.thirdPartyName).toUpperCase()).to.equal(data.TPA_nm.toUpperCase);",
                  "            } else{",
                  "                pm.expect(jsonData[0].thirdPartyInformation.thirdPartyName.toUpperCase()).to.equal(data.TPA_nm.toUpperCase);    ",
                  "            }",
                  "        });",
                  "        pm.test(\"TEST1I: consumer Accounts check\", function () {",
                  "            pm.expect(jsonData[0].balanceInformation.currentBalance).to.equal(data.Curr_Bal);",
                  "            pm.expect(jsonData[0].balanceInformation.originalBalance).to.equal(data.Orig_Bal);",
                  "            pm.expect(jsonData[0].balanceInformation.totalPayment).to.equal(data.Total_Payment);",
                  "        });",
                  "        pm.test(\"TEST1J: Account Type/status check\", function () {",
                  "            if (data.AccountType === 1) { pm.expect(jsonData[0].jointAccountType).to.equal(\"Primary\"); }",
                  "            else { pm.expect(jsonData[0].jointAccountType).to.equal(\"Secondary\"); }",
                  "            if (data.WorkGroup === \"PreDefC\") {",
                  "                pm.expect(jsonData[0].accountStatus).to.equal(\"PreDefault\");",
                  "            } else { pm.expect(jsonData[0].accountStatus).to.be.null; }",
                  "        });",
                  "        pm.test(\"TEST1K: creditor check\", function () {",
                  "            pm.expect(jsonData[0].regarding).to.equal(data.regarding);",
                  "            pm.expect(jsonData[0].productType).to.equal(data.productType);",
                  "            pm.expect(jsonData[0].vendor).to.equal(data.vendor);",
                  "        });",
                  "        pm.test(\"TEST1L: Strategy check\", function () {",
                  "            pm.expect(JSON.stringify(jsonData[0].strategy.strategyName).toUpperCase()).to.equal(data.strategyName);",
                  "            pm.expect(JSON.stringify(jsonData[0].strategy.strategyDescription).toUpperCase()).to.equal(data.strategyDescription);",
                  "",
                  "        });",
                  "        pm.test(\"TEST1M: Workgroup check\", function () {",
                  "            pm.expect(jsonData[0].workgroup.workgroupName).to.equal(data.workgroupName);",
                  "            pm.expect(jsonData[0].workgroup.workgroupShortName).to.equal(data.workgroupShortName);",
                  "        });",
                  "        pm.test(\"TEST1N: Balance Information check\", function () {",
                  "            pm.expect(jsonData[0].balanceInformation.originalBalance).to.equal(data.Orig_Bal);",
                  "            pm.expect(jsonData[0].balanceInformation.currentBalance).to.equal(data.Curr_Bal);",
                  "            pm.expect(jsonData[0].balanceInformation.totalPayment).to.equal(data.Total_Payment);",
                  "        });",
                  "        pm.test(\"TEST1O: SettlementOffer check\", function () {",
                  "            if (jsonData[0].settlementOffer.amountSaved===null){",
                  "                pm.expect(data.amnt_svd.toUpperCase()).to.equal(\"NULL\");",
                  "            }else{",
                  "            pm.expect(jsonData[0].settlementOffer.amountSaved).to.equal(data.amnt_svd);",
                  "            }",
                  "            if (jsonData[0].settlementOffer.settlementOffer===null){",
                  "                pm.expect(data.sment_offr.toUpperCase()).to.equal(\"NULL\");",
                  "            }else{",
                  "            pm.expect(jsonData[0].settlementOffer.settlementOffer).to.equal(data.sment_offr);",
                  "            }",
                  "            if (jsonData[0].settlementOffer.settlementPercentage===null){",
                  "                pm.expect(data.smet_pcnt.toUpperCase()).to.equal(\"NULL\");",
                  "            }else{",
                  "            pm.expect(jsonData[0].settlementOffer.settlementPercentage).to.equal(data.smet_pcnt);",
                  "            }",
                  "            if (jsonData[0].settlementOffer.amountToPay===null){",
                  "                pm.expect(data.amnt_to_pay.toUpperCase()).to.equal(\"NULL\");",
                  "            }else{",
                  "            pm.expect(jsonData[0].settlementOffer.amountToPay).to.equal(data.amnt_to_pay);",
                  "            }",
                  "        });",
                  "        pm.test(\"TEST1P: Interest and Remediation check\", function () {",
                  "            if (data.tot_interest===null){",
                  "                pm.expect(jsonData[0].totalInterestApplied).to.equal(0.0);",
                  "            }else{",
                  "                pm.expect(jsonData[0].totalInterestApplied).to.equal(data.tot_interest);",
                  "            }",
                  "            if (data.tot_interest===null){",
                  "                pm.expect(jsonData[0].totalRemediationApplied).to.equal(0.0);",
                  "            }else{",
                  "                pm.expect(jsonData[0].totalRemediationApplied).to.equal(data.tot_interest);",
                  "            }",
                  "        });",
                  "    }",
                  "",
                  "    pm.test(\"TEST2: Status code Check\", function () {",
                  "        pm.response.to.have.status(200);",
                  "    });",
                  "",
                  "    pm.test(\"TEST3: Response Header Checks\", function () {",
                  "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "    });",
                  "",
                  "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                  "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "    });",
                  "",
                  "    var Ajv = require('ajv'),",
                  "        ajv = new Ajv({ logger: console }),",
                  "        schema = {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"consumerID\",",
                  "                    \"legacyID\",",
                  "                    \"consumerAccountID\",",
                  "                    \"title\",",
                  "                    \"firstName\",",
                  "                    \"lastName\",",
                  "                    \"regarding\",",
                  "                    \"productType\",",
                  "                    \"vendor\",",
                  "                    \"accountStatus\",",
                  "                    \"strategy\",",
                  "                    \"accountOwnership\",",
                  "                    \"workgroup\",",
                  "                    \"balanceInformation\",",
                  "                    \"totalInterestApplied\",",
                  "                    \"totalRemediationApplied\",",
                  "                    \"bookOnDate\",",
                  "                    \"terminationDate\",",
                  "                    \"lastPaymentDate\",",
                  "                    \"settlementOffer\",",
                  "                    \"thirdPartyInformation\",",
                  "                    \"jointAccounts\",",
                  "                    \"activePaymentPlan\",",
                  "                    \"reminders\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"consumerID\": {",
                  "                        \"$id\": \"#/items/properties/consumerID\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"legacyID\": {",
                  "                        \"$id\": \"#/items/properties/legacyID\",",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"consumerAccountID\": {",
                  "                        \"$id\": \"#/items/properties/consumerAccountID\",",
                  "                        \"type\": \"integer\"",
                  "                    },",
                  "                    \"title\": {",
                  "                        \"$id\": \"#/items/properties/title\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"firstName\": {",
                  "                        \"$id\": \"#/items/properties/firstName\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"lastName\": {",
                  "                        \"$id\": \"#/items/properties/lastName\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"regarding\": {",
                  "                        \"$id\": \"#/items/properties/regarding\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"productType\": {",
                  "                        \"$id\": \"#/items/properties/productType\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"vendor\": {",
                  "                        \"$id\": \"#/items/properties/vendor\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"accountStatus\": {",
                  "                        \"$id\": \"#/items/properties/accountStatus\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"strategy\": {",
                  "                        \"required\": [",
                  "                            \"strategyName\",",
                  "                            \"strategyDescription\",",
                  "                            \"strategyNextStepName\",",
                  "                            \"strategyNextStepDescription\"",
                  "                        ],",
                  "                        \"properties\": {",
                  "                            \"strategyName\": {",
                  "                                \"$id\": \"#/items/properties/strategy/properties/strategyName\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            },",
                  "                            \"strategyDescription\": {",
                  "                                \"$id\": \"#/items/properties/strategy/properties/strategyDescription\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            },",
                  "                            \"strategyNextStepName\": {",
                  "                                \"$id\": \"#/items/properties/strategy/properties/strategyNextStepName\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            },",
                  "                            \"strategyNextStepDescription\": {",
                  "                                \"$id\": \"#/items/properties/strategy/properties/strategyNextStepDescription\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            }",
                  "                        },",
                  "                        \"$id\": \"#/items/properties/strategy\",",
                  "                        \"type\": \"object\"",
                  "                    },",
                  "                \"accountOwnership\": {",
                  "                    \"properties\": {",
                  "                        \"ownershipClaimedDate\": {",
                  "                            \"$id\": \"#/items/properties/accountOwnership/properties/ownershipClaimedDate\",",
                  "                            \"type\": [\"string\",\"null\"]",
                  "                        },",
                  "                    \"ownershipExpiresDate\": {",
                  "                        \"$id\": \"#/items/properties/accountOwnership/properties/ownershipExpiresDate\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"operatorID\": {",
                  "                        \"$id\": \"#/items/properties/accountOwnership/properties/operatorID\",",
                  "                        \"type\": [\"integer\",\"null\"]",
                  "                    },",
                  "                    \"operatorName\": {",
                  "                        \"$id\": \"#/items/properties/accountOwnership/properties/operatorName\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/items/properties/accountOwnership\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "                    \"workgroup\": {",
                  "                        \"required\": [",
                  "                            \"workgroupName\",",
                  "                            \"workgroupShortName\"",
                  "                        ],",
                  "                        \"properties\": {",
                  "                            \"workgroupName\": {",
                  "                                \"$id\": \"#/items/properties/workgroup/properties/workgroupName\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            },",
                  "                            \"workgroupShortName\": {",
                  "                                \"$id\": \"#/items/properties/workgroup/properties/workgroupShortName\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            }",
                  "                        },",
                  "                        \"$id\": \"#/items/properties/workgroup\",",
                  "                        \"type\": \"object\"",
                  "                    },",
                  "                    \"balanceInformation\": {",
                  "                        \"required\": [",
                  "                            \"originalBalance\",",
                  "                            \"currentBalance\",",
                  "                            \"totalPayment\"",
                  "                        ],",
                  "                        \"properties\": {",
                  "                            \"originalBalance\": {",
                  "                                \"$id\": \"#/items/properties/balanceInformation/properties/originalBalance\",",
                  "                                \"type\": \"number\"",
                  "                            },",
                  "                            \"currentBalance\": {",
                  "                                \"$id\": \"#/items/properties/balanceInformation/properties/currentBalance\",",
                  "                                \"type\": \"number\"",
                  "                            },",
                  "                            \"totalPayment\": {",
                  "                                \"$id\": \"#/items/properties/balanceInformation/properties/totalPayment\",",
                  "                                \"type\": \"number\"",
                  "                            }",
                  "                        },",
                  "                        \"$id\": \"#/items/properties/balanceInformation\",",
                  "                        \"type\": \"object\"",
                  "                    },",
                  "                    \"totalInterestApplied\": {",
                  "                        \"$id\": \"#/items/properties/totalInterestApplied\",",
                  "                        \"type\": \"number\"",
                  "                    },",
                  "                    \"totalRemediationApplied\": {",
                  "                        \"$id\": \"#/items/properties/totalRemediationApplied\",",
                  "                        \"type\": \"number\"",
                  "                    },",
                  "                    \"bookOnDate\": {",
                  "                        \"$id\": \"#/items/properties/bookOnDate\",",
                  "                        \"type\": \"string\"",
                  "                    },",
                  "                    \"terminationDate\": {",
                  "                        \"$id\": \"#/items/properties/terminationDate\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"lastPaymentDate\": {",
                  "                        \"$id\": \"#/items/properties/lastPaymentDate\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"settlementOffer\": {",
                  "                        \"required\": [",
                  "                            \"amountSaved\",",
                  "                            \"settlementOffer\",",
                  "                            \"settlementPercentage\",",
                  "                            \"amountToPay\"",
                  "                        ],",
                  "                        \"properties\": {",
                  "                            \"amountSaved\": {",
                  "                                \"$id\": \"#/items/properties/settlementOffer/properties/amountSaved\",",
                  "                                \"type\": [\"number\", \"null\"]",
                  "                            },",
                  "                            \"settlementOffer\": {",
                  "                                \"$id\": \"#/items/properties/settlementOffer/properties/settlementOffer\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            },",
                  "                            \"settlementPercentage\": {",
                  "                                \"$id\": \"#/items/properties/settlementOffer/properties/settlementPercentage\",",
                  "                                \"type\": [\"number\", \"null\"]",
                  "                            },",
                  "                            \"amountToPay\": {",
                  "                                \"$id\": \"#/items/properties/settlementOffer/properties/amountToPay\",",
                  "                                \"type\": [\"number\", \"null\"]",
                  "                            }",
                  "                        },",
                  "                        \"$id\": \"#/items/properties/settlementOffer\",",
                  "                        \"type\": [\"object\", \"null\"]",
                  "                    },",
                  "                    \"thirdPartyInformation\": {",
                  "                        \"required\": [",
                  "                            \"thirdPartyName\"",
                  "                        ],",
                  "                        \"properties\": {",
                  "                            \"thirdPartyName\": {",
                  "                                \"$id\": \"#/items/properties/thirdPartyInformation/properties/thirdPartyName\",",
                  "                                \"type\": [\"string\", \"null\"]",
                  "                            }",
                  "                        },",
                  "                        \"$id\": \"#/items/properties/thirdPartyInformation\",",
                  "                        \"type\": \"object\"",
                  "                    },",
                  "                    \"jointAccounts\": {",
                  "                        \"$id\": \"#/items/properties/jointAccounts\",",
                  "                        \"type\": \"array\"",
                  "                    },",
                  "                    \"activePaymentPlan\": {",
                  "                    \"properties\": {",
                  "                        \"paymentPlanID\": {",
                  "                            \"$id\": \"#/items/properties/activePaymentPlan/properties/paymentPlanID\",",
                  "                            \"type\": \"integer\"",
                  "                        },",
                  "                        \"planType\": {",
                  "                            \"$id\": \"#/items/properties/activePaymentPlan/properties/planType\",",
                  "                            \"type\": \"string\"",
                  "                        },",
                  "                        \"runningPercentage\": {",
                  "                            \"$id\": \"#/items/properties/activePaymentPlan/properties/runningPercentage\",",
                  "                            \"type\": \"null\"",
                  "                        },",
                  "                        \"nextPaymentDate\": {",
                  "                            \"$id\": \"#/items/properties/activePaymentPlan/properties/nextPaymentDate\",",
                  "                            \"type\": \"string\"",
                  "                        }",
                  "                    },",
                  "                    \"$id\": \"#/items/properties/activePaymentPlan\",",
                  "                    \"type\": [\"object\",\"null\"]",
                  "                    },",
                  "                    \"reminders\": {",
                  "                    \"items\": {",
                  "                    \"properties\": {",
                  "                        \"reminderID\": {",
                  "                            \"$id\": \"#/items/properties/reminders/items/properties/reminderID\",",
                  "                            \"type\": \"integer\"",
                  "                        },",
                  "                        \"reminderTime\": {",
                  "                            \"$id\": \"#/items/properties/reminders/items/properties/reminderTime\",",
                  "                            \"type\": [\"string\", \"null\"]",
                  "                        },",
                  "                        \"userID\": {",
                  "                            \"$id\": \"#/items/properties/reminders/items/properties/userID\",",
                  "                            \"type\": \"integer\"",
                  "                        },",
                  "                        \"userName\": {",
                  "                            \"$id\": \"#/items/properties/reminders/items/properties/userName\",",
                  "                            \"type\": [\"string\", \"null\"]",
                  "                        },",
                  "                        \"subject\": {",
                  "                            \"$id\": \"#/items/properties/reminders/items/properties/subject\",",
                  "                            \"type\": [\"string\", \"null\"]",
                  "                        },",
                  "                        \"comment\": {",
                  "                            \"$id\": \"#/items/properties/reminders/items/properties/comment\",",
                  "                            \"type\": [\"string\", \"null\"]",
                  "                        }",
                  "                    },",
                  "                    \"$id\": \"#/items/properties/reminders/items\",",
                  "                    \"type\": [\"object\",\"null\"]",
                  "                },",
                  "                \"$id\": \"#/items/properties/reminders\",",
                  "                \"type\": \"array\"",
                  "            }",
                  "                },",
                  "                \"$id\": \"#/items\",",
                  "                \"type\": \"object\"",
                  "            },",
                  "            \"$id\": \"http://example.org/root.json#\",",
                  "            \"type\": \"array\",",
                  "            \"definitions\": {},",
                  "            \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "        };",
                  "    pm.test(\"TEST5: Schema Test\", function () {",
                  "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "    });",
                  "} catch (e) {",
                  "",
                  "    //negative Tests",
                  "",
                  "    var req = request.url;",
                  "    var query = request.url.split('/');",
                  "    var cid = responseBody.split(':');",
                  "    pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                  "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "    });",
                  "    pm.test(\"Response Header Checks\", function () {",
                  "        pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff', 'Strict-Transport-Security', 'max-age=31536000; includeSubDomains', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie', '');",
                  "    });",
                  "    pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                  "        pm.expect(responseCode.code).to.equal(400);",
                  "        pm.expect(responseBody).to.equal(\"Unable to find consumer with consumerID: \" + query[5]);",
                  "        pm.expect(cid[1]).to.equal(\" \" + query[5]);",
                  "    });",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "f2ac779e-8c3e-483e-84f4-1817fe1edca8",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }else{\r",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                  "    }\r",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "71031e9b-d8b8-4c94-865e-2e2543438f3f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BaseURL}}/accountinformation/consumer/:consumerId",
              "host": [
                "{{BaseURL}}"
              ],
              "path": [
                "accountinformation",
                "consumer",
                ":consumerId"
              ],
              "variable": [
                {
                  "key": "consumerId",
                  "value": "{{cnsmr_id}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "d7d2a948-4505-4edd-a132-96a0738e0ec7"
    },
    {
      "name": "Reporting",
      "item": [
        {
          "name": "getWhitedatabyLegacyId",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d3d75acc-a350-4de0-94f3-1825218b713a",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");",
                  "    if(tokenTimestamp){",
                  "        tokenDate = Date.parse(tokenTimestamp);",
                  "    }else{",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");",
                  "    }",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");",
                  "    if(!expiresInTime){",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes",
                  "    }",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);",
                  "    if((new Date() - tokenDate) >= expiresInTime) {",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");",
                  "    let clientId = pm.environment.get(\"clientId\");",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");",
                  "    let scope = pm.environment.get(\"clientScope\");",
                  "",
                  "        let getTokenRequest = {",
                  "            method: 'POST',",
                  "            url: tokenUrl,",
                  "            auth: {",
                  "                type: \"basic\",",
                  "                basic: [",
                  "                    { key: \"username\", value: clientId },",
                  "                    { key: \"password\", value: clientSecret }",
                  "                ]",
                  "            },",
                  "            body: {",
                  "                mode: 'formdata',",
                  "                formdata: [",
                  "                    { key: 'grant_type', value: 'client_credentials' },",
                  "                    { key: 'scope', value: scope }",
                  "                ]",
                  "            }",
                  "        };",
                  "",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {",
                  "            let jsonResponse = response.json(),",
                  "            newAccessToken = jsonResponse.access_token;",
                  "            //console.log({ err, jsonResponse, newAccessToken });",
                  "",
                  "            pm.environment.set('OAuth_Token', newAccessToken);",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());",
                  "        });",
                  "",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));",
                  "    }",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "bc2fbbcc-3c4b-45e8-919d-b5abb1deaec1",
                "exec": [
                  "try{",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "pm.test(\"TEST1: legacy ID Check\", function() {",
                  "    if (data.cnsmr_id==null){",
                  "    pm.expect(jsonData.legacyID).to.deep.equal(query[5]);",
                  "    }else{",
                  "    pm.expect(jsonData.legacyID).to.deep.equal(data.legacyID);",
                  "    }",
                  "});",
                  "",
                  "if (data.legacyID!=null){",
                  "    pm.test(\"TEST1A: CRBReporting Flag check\", function() {",
                  "        pm.expect(jsonData.crbReportingFlag).to.deep.equal(data.CRBReportingFlag);",
                  "    });",
                  "}",
                  "",
                  "pm.test(\"TEST2: Status code Check\", function() {",
                  "    if(jsonData==null){pm.response.to.have.status(204);}else{",
                  "    pm.response.to.have.status(200);}",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schema = {",
                  "    \"required\": [",
                  "        \"legacyID\",",
                  "        \"crbReportingFlag\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"legacyID\": {",
                  "            \"$id\": \"#/properties/legacyID\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"crbReportingFlag\": {",
                  "            \"$id\": \"#/properties/crbReportingFlag\",",
                  "            \"type\": \"string\"",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"TEST5: Schema Test\", function(){",
                  "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "} catch (e){",
                  "    ",
                  "    //negative Tests",
                  "    ",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "var cid = responseBody.split(':');",
                  "pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "pm.test(\"Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Cache-Control', 'no-cache, no-store','X-Content-Type-Options', 'nosniff','Strict-Transport-Security','max-age=31536000; includeSubDomains','Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie','');",
                  "});",
                  " pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                  "     pm.expect(responseCode.code).to.equal(204);",
                  "     pm.expect(responseBody).to.equal('');",
                  "});",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "9c004ebf-8135-4c22-9ea1-5495cd24f367",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/reporting/whitedata/:legacyID",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "reporting",
                "whitedata",
                ":legacyID"
              ],
              "variable": [
                {
                  "key": "legacyID",
                  "value": "{{legacyID}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "0ec32dc1-7625-4b9e-aac8-e0558e723e43"
    },
    {
      "name": "SFS",
      "item": [
        {
          "name": "category",
          "item": [
            {
              "name": "category/consumerdetail",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0c8325d-9999-4eb8-b76e-03a77aac4da9",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);\r",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                      "\r",
                      "var Ajv = require('ajv'),\r",
                      "ajv = new Ajv({logger: console});\r",
                      "schema = \r",
                      "{\r",
                      "    \"items\": {\r",
                      "        \"required\": [\r",
                      "            \"code\",\r",
                      "            \"name\",\r",
                      "            \"description\",\r",
                      "            \"type\",\r",
                      "            \"isActive\",\r",
                      "            \"subCategories\",\r",
                      "            \"helpTextInternal\",\r",
                      "            \"helpTextExternal\"\r",
                      "        ],\r",
                      "        \"properties\": {\r",
                      "            \"code\": {\r",
                      "                \"$id\": \"#/items/properties/code\",\r",
                      "                \"type\": \"integer\"\r",
                      "            },\r",
                      "            \"name\": {\r",
                      "                \"$id\": \"#/items/properties/name\",\r",
                      "                \"type\": \"string\"\r",
                      "            },\r",
                      "            \"description\": {\r",
                      "                \"$id\": \"#/items/properties/description\",\r",
                      "                \"type\": \"string\"\r",
                      "            },\r",
                      "            \"type\": {\r",
                      "                \"$id\": \"#/items/properties/type\",\r",
                      "                \"type\": [\"string\", \"number\"]\r",
                      "            },\r",
                      "            \"isActive\": {\r",
                      "                \"$id\": \"#/items/properties/isActive\",\r",
                      "                \"type\": \"boolean\"\r",
                      "            },\r",
                      "            \"subCategories\": {\r",
                      "                \"$id\": \"#/items/properties/subCategories\",\r",
                      "                \"type\": \"null\"\r",
                      "            },\r",
                      "            \"helpTextInternal\": {\r",
                      "                \"$id\": \"#/items/properties/helpTextInternal\",\r",
                      "                \"type\": [\"string\" , \"null\"]\r",
                      "            },\r",
                      "            \"helpTextExternal\": {\r",
                      "                \"$id\": \"#/items/properties/helpTextExternal\",\r",
                      "                \"type\": [\"string\", \"null\"]\r",
                      "            }\r",
                      "        },\r",
                      "        \"$id\": \"#/items\",\r",
                      "        \"type\": \"object\"\r",
                      "    },\r",
                      "    \"$id\": \"http://example.org/root.json#\",\r",
                      "    \"type\": \"array\",\r",
                      "    \"definitions\": {},\r",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                      "};\r",
                      "\r",
                      "var expectedObject = [\r",
                      "    \r",
                      "    {\r",
                      "        \"code\": 1,\r",
                      "        \"name\": \"Outstanding Debt\",\r",
                      "        \"description\": \"How much is the total outstanding amount?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    \r",
                      "    {\r",
                      "        \"code\": 2,\r",
                      "        \"name\": \"Number in Household\",\r",
                      "        \"description\": \"How many people currently reside in your household?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": \"Don't forget to include yourself!\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 3,\r",
                      "        \"name\": \"Number of Children under 16\",\r",
                      "        \"description\": \"How many children under 16 reside in your household?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": \"People younger than 16 who rely on you for financial support.\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 4,\r",
                      "        \"name\": \"Number of Children 16 to 18\",\r",
                      "        \"description\": \"How many children between the ages of 16 and 18 reside in your household?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": \"This includes young adults between 16-18, parents, grandparents and other close relatives that depend on you for financial support.\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 5,\r",
                      "        \"name\": \"Number of Vehicles\",\r",
                      "        \"description\": \"How many vehicles do you own?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "\r",
                      "    {\r",
                      "        \"code\": 6,\r",
                      "        \"name\": \"Household Type\",\r",
                      "        \"description\": \"What is your household type?\",\r",
                      "        \"type\": \"List(HouseholdType)\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 7,\r",
                      "        \"name\": \"Residence Status\",\r",
                      "        \"description\": \"What is your current residence status?\",\r",
                      "        \"type\": \"List(ResidenceStatus)\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": \"Handy tip: You're the home owner if your name is on the deed\"\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 8,\r",
                      "        \"name\": \"Name of Employer\",\r",
                      "        \"description\": \"What is the name of your employer?\",\r",
                      "        \"type\": \"string\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "     {\r",
                      "        \"code\": 9,\r",
                      "        \"name\": \"Employment Status\",\r",
                      "        \"description\": \"What is your current employment status?\",\r",
                      "        \"type\": \"List(EmploymentStatus)\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 10,\r",
                      "        \"name\": \"Partners Employment Status\",\r",
                      "        \"description\": \"What is your partners current employment status?\",\r",
                      "        \"type\": \"List(EmploymentStatus)\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 11,\r",
                      "        \"name\": \"In Paid Employment\",\r",
                      "        \"description\": \"Are you currently in paid employment?\",\r",
                      "        \"type\": \"boolean\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 12,\r",
                      "        \"name\": \"Partner In Paid Employment\",\r",
                      "        \"description\": \"Is your partner currently in paid employment?\",\r",
                      "        \"type\": \"boolean\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 13,\r",
                      "        \"name\": \"Property Value\",\r",
                      "        \"description\": \"What is your properties current value?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 14,\r",
                      "        \"name\": \"Mortgage Amount\",\r",
                      "        \"description\": \"What is your current mortgage amount?\",\r",
                      "        \"type\": \"number\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 15,\r",
                      "        \"name\": \"Repaying Debt Type\",\r",
                      "        \"description\": \"What is your current reason for wanting to pay off this debt?\",\r",
                      "        \"type\": \"List(RepayingDebtType)\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 16,\r",
                      "        \"name\": \"Household Contributor\",\r",
                      "        \"description\": \"Who else contributes to your household income?\",\r",
                      "        \"type\": \"List(HouseholdContributor)\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 17,\r",
                      "        \"name\": \"AOD (Web) - Added by Customer\",\r",
                      "        \"description\": \"Any other details about your situation that you would like to tell us?\",\r",
                      "        \"type\": \"string\",\r",
                      "        \"isActive\": true,\r",
                      "        \"subCategories\": null,\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": \"Is there anything else you would like to add about your financial situation that we already haven't covered in this form?\"\r",
                      "    }];\r",
                      "    \r",
                      "       forLoop: \r",
                      "    for(var index = 0; index < jsonData.length; index++){\r",
                      "     try{   \r",
                      "        pm.expect(jsonData[index].code).to.equal(expectedObject[index].code);\r",
                      "        pm.expect(jsonData[index].name).to.equal(expectedObject[index].name);\r",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);\r",
                      "        pm.expect(jsonData[index].type).to.equal(expectedObject[index].type);\r",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);\r",
                      "        pm.expect(jsonData[index].subCategories).to.equal(expectedObject[index].subCategories);\r",
                      "        pm.expect(jsonData[index].helpTextInternal).to.equal(expectedObject[index].helpTextInternal);\r",
                      "        pm.expect(jsonData[index].helpTextExternal).to.equal(expectedObject[index].helpTextExternal);\r",
                      "        \r",
                      "        /*var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +\r",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n code: \" + jsonData[index].code + \r",
                      "        \"\\n name: \" + jsonData[index].name + \"\\n description: \" + jsonData[index].description + \r",
                      "        \"\\n type: \" + jsonData[index].type + \"\\n isActive: \" + jsonData[index].isActive + \r",
                      "        \"\\n subCategories: \" + jsonData[index].subCategories + \"\\n helpTextInternal: \" + \r",
                      "        jsonData[index].helpTextInternal + \"\\n helpTextExternal: \" + jsonData[index].helpTextExternal + \r",
                      "        \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n code: \" \r",
                      "        + expectedObject[index].code + \"\\n name: \" + expectedObject[index].name + \"\\n description: \" + \r",
                      "        expectedObject[index].description + \"\\n type: \" + expectedObject[index].type + \"\\n isActive: \" + \r",
                      "        expectedObject[index].isActive + \"\\n subCategories: \" + expectedObject[index].subCategories + \r",
                      "        \"\\n helpTextInternal: \" + expectedObject[index].helpTextInteranl + \"\\n helpTextExternal: \" + \r",
                      "        expectedObject[index].helpTextExternal;\r",
                      "        console.log(resultData);*/\r",
                      "       \r",
                      "        pm.test(\"TEST\" + (index+1) + \": \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);\r",
                      "            \r",
                      "        }catch(e){\r",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});\r",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);\r",
                      "           continue forLoop;\r",
                      "        } \r",
                      "        \r",
                      "    }\r",
                      "\r",
                      "\r",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {\r",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;\r",
                      "});\r",
                      "\r",
                      "pm.test(\"Response time is less than 200ms\", function () {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "pm.test(\"TEST19: Response Header Checks\", function() {\r",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"TEST20: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "\r",
                      "pm.test(\"Status code is 200\", function() {\r",
                      "  pm.expect(pm.response.code).to.equal(200);\r",
                      "});\r",
                      "/*\r",
                      "pm.test(\"Incorrect field examaple\", function() {\r",
                      "    jsonData.phoneNumber != \"Red\";\r",
                      "    console.log(phoneNumber);\r",
                      "});*/\r",
                      "pm.test(\"Check if array is empty\", function () {\r",
                      "     pm.expect([expectedObject]).to.not.be.empty;\r",
                      "});\r",
                      " pm.test(\"Check if string is empty\", function () {\r",
                      "     pm.expect('name').to.not.be.empty;\r",
                      "});\r",
                      "pm.test(\"Incorrect Key Test\", function() {\r",
                      "    var cdName = schema.items.name;\r",
                      "    var wrongFormat = Boolean;\r",
                      "    pm.expect(cdName).to.not.equal(wrongFormat);\r",
                      "    console.log(jsonData.toString());\r",
                      "});\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "db5a5fb1-60e1-4ff4-8966-1450fdf5a6c2",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ea611b02-43a2-4d04-814d-ffb0deefbf3a",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman_Dev"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "Test Usr"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/category/consumerdetail",
                "description": "Gets SFS Consumer Detail questions"
              },
              "response": [
                {
                  "id": "6285c215-5983-4c49-8a11-268f37b461ee",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/consumerdetail"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "null"
                },
                {
                  "id": "9ad74f59-3712-4807-8193-5c7c15c62cc5",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/consumerdetail"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "ae35a6e9-6955-487c-a6b2-7b9b62382d3d",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/consumerdetail"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "category/creditor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "655bf842-5440-43a2-884f-73e6072caabe",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console});",
                      "var schema = ",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"code\",",
                      "            \"name\",",
                      "            \"description\",",
                      "            \"type\",",
                      "            \"isActive\",",
                      "            \"subCategories\",",
                      "            \"helpTextInternal\",",
                      "            \"helpTextExternal\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"code\": {",
                      "                \"$id\": \"#/items/properties/code\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"name\": {",
                      "                \"$id\": \"#/items/properties/name\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"type\": {",
                      "                \"$id\": \"#/items/properties/type\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            },",
                      "            \"subCategories\": {",
                      "                \"$id\": \"#/items/properties/subCategories\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"helpTextInternal\": {",
                      "                \"$id\": \"#/items/properties/helpTextInternal\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"helpTextExternal\": {",
                      "                \"$id\": \"#/items/properties/helpTextExternal\",",
                      "                \"type\": \"null\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "",
                      "var expectedObject =  [",
                      "    {",
                      "        \"code\": 5,",
                      "        \"name\": \"Catalogue\",",
                      "        \"description\": \"Catalogue\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 6,",
                      "        \"name\": \"Credit Account\",",
                      "        \"description\": \"Credit Account\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": false,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 4,",
                      "        \"name\": \"Credit Card\",",
                      "        \"description\": \"Credit Card\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 1,",
                      "        \"name\": \"Debt Admin Fee\",",
                      "        \"description\": \"Debt Admin Fee\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 8,",
                      "        \"name\": \"Hire Purchase Agreement\",",
                      "        \"description\": \"Hire Purchase Agreement\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 2,",
                      "        \"name\": \"Loan\",",
                      "        \"description\": \"Loan\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 3,",
                      "        \"name\": \"Overdraft\",",
                      "        \"description\": \"Overdraft\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 7,",
                      "        \"name\": \"Primary Creditor\",",
                      "        \"description\": \"Primary Creditor\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": false,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 9,",
                      "        \"name\": \"Other\",",
                      "        \"description\": \"Other\",",
                      "        \"type\": \"Number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    }];",
                      "    ",
                      "       forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].code).to.equal(expectedObject[index].code);",
                      "        pm.expect(jsonData[index].name).to.equal(expectedObject[index].name);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].type).to.equal(expectedObject[index].type);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        pm.expect(jsonData[index].subCategories).to.equal(expectedObject[index].subCategories);",
                      "        pm.expect(jsonData[index].helpTextInternal).to.equal(expectedObject[index].helpTextInternal);",
                      "        pm.expect(jsonData[index].helpTextExternal).to.equal(expectedObject[index].helpTextExternal);",
                      "        ",
                      "        ",
                      "        /*var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n code: \" + jsonData[index].code + ",
                      "        \"\\n name: \" + jsonData[index].name + \"\\n description: \" + jsonData[index].description + ",
                      "        \"\\n type: \" + jsonData[index].type + \"\\n isActive: \" + jsonData[index].isActive + ",
                      "        \"\\n subCategories: \" + jsonData[index].subCategories + \"\\n helpTextInternal: \" + ",
                      "        jsonData[index].helpTextInternal + \"\\n helpTextExternal: \" + jsonData[index].helpTextExternal + ",
                      "        \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n code: \" ",
                      "        + expectedObject[index].code + \"\\n name: \" + expectedObject[index].name + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n type: \" + expectedObject[index].type + \"\\n isActive: \" + ",
                      "        expectedObject[index].isActive + \"\\n subCategories: \" + expectedObject[index].subCategories + ",
                      "        \"\\n helpTextInternal: \" + expectedObject[index].helpTextInteranl + \"\\n helpTextExternal: \" + ",
                      "        expectedObject[index].helpTextExternal;",
                      "        console.log(resultData);*/",
                      "       ",
                      "        pm.test(\"Test\" +(index+1) + \": \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "    ",
                      "    ",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "pm.test(\"TEST010: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST11: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST12: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "////////Negative Tests",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect([expectedObject]).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('name').to.not.be.empty;",
                      "});",
                      "pm.test(\"Incorrect Key Test\", function() {",
                      "    var cdName = schema.items.name;",
                      "    var wrongFormat = Boolean;",
                      "    pm.expect(cdName).to.not.equal(wrongFormat);",
                      "    console.log(jsonData.toString());",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c1bebcc4-805d-466c-a64c-3e717c63ede2",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "56be68ed-265d-4413-99c5-43f99f4891c9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "Test User"
                  }
                ],
                "url": "{{BaseURL}}/sfs/category/creditor",
                "description": "Gets SFS Creditor questions"
              },
              "response": [
                {
                  "id": "04f53de0-634b-4924-8658-f4d0299a3a2a",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/creditor"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "null"
                },
                {
                  "id": "af4ff0bd-7368-4c6f-bb94-b4735cff0929",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/creditor"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "dba234f9-65c7-4298-9070-2d01319970b8",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/creditor"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "category/expenditure",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5a998263-5c92-455c-8522-e9e7282ad6a3",
                    "exec": [
                      "try {\r",
                      "    pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));\r",
                      "    pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));\r",
                      "    console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                      "\r",
                      "    let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                      "    var jsonData = JSON.parse(responseBody);\r",
                      "    var req = request.url;\r",
                      "    var query = request.url.split('/');\r",
                      "    console.log(query);\r",
                      "\r",
                      "var Ajv = require('ajv'),\r",
                      "ajv = new Ajv({logger: console});\r",
                      "var schema = \r",
                      "{\r",
                      "    \"items\": {\r",
                      "        \"required\": [\r",
                      "            \"code\",\r",
                      "            \"name\",\r",
                      "            \"description\",\r",
                      "            \"type\",\r",
                      "            \"isActive\",\r",
                      "            \"subCategories\",\r",
                      "            \"helpTextInternal\",\r",
                      "            \"helpTextExternal\"\r",
                      "        ],\r",
                      "        \"properties\": {\r",
                      "            \"code\": {\r",
                      "                \"$id\": \"#/items/properties/code\",\r",
                      "                \"type\": \"integer\"\r",
                      "            },\r",
                      "            \"name\": {\r",
                      "                \"$id\": \"#/items/properties/name\",\r",
                      "                \"type\": \"string\"\r",
                      "            },\r",
                      "            \"description\": {\r",
                      "                \"$id\": \"#/items/properties/description\",\r",
                      "                \"type\": [\"string\", \"null\"]\r",
                      "            },\r",
                      "            \"type\": {\r",
                      "                \"$id\": \"#/items/properties/type\",\r",
                      "                \"type\": [\"number\", \"null\"]\r",
                      "            },\r",
                      "            \"isActive\": {\r",
                      "                \"$id\": \"#/items/properties/isActive\",\r",
                      "                \"type\": \"boolean\"\r",
                      "            },\r",
                      "            \"subCategories\": {\r",
                      "                \"items\": {\r",
                      "                    \"required\": [\r",
                      "                        \"code\",\r",
                      "                        \"name\",\r",
                      "                        \"description\",\r",
                      "                        \"type\",\r",
                      "                        \"isActive\",\r",
                      "                        \"subCategories\",\r",
                      "                        \"helpTextInternal\",\r",
                      "                        \"helpTextExternal\"\r",
                      "                    ],\r",
                      "                    \"properties\": {\r",
                      "                        \"code\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/code\",\r",
                      "                            \"type\": \"integer\"\r",
                      "                        },\r",
                      "                        \"name\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/name\",\r",
                      "                            \"type\": \"string\"\r",
                      "                        },\r",
                      "                        \"description\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/description\",\r",
                      "                            \"type\": \"string\"\r",
                      "                        },\r",
                      "                        \"type\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/type\",\r",
                      "                            \"type\": \"string\"\r",
                      "                        },\r",
                      "                        \"isActive\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/isActive\",\r",
                      "                            \"type\": \"boolean\"\r",
                      "                        },\r",
                      "                        \"subCategories\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/subCategories\",\r",
                      "                            \"type\": \"null\"\r",
                      "                        },\r",
                      "                        \"helpTextInternal\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/helpTextInternal\",\r",
                      "                            \"type\": \"null\"\r",
                      "                        },\r",
                      "                        \"helpTextExternal\": {\r",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/helpTextExternal\",\r",
                      "                            \"type\": [\"string\", \"null\"]\r",
                      "                        }\r",
                      "                    },\r",
                      "                    \"$id\": \"#/items/properties/subCategories/items\",\r",
                      "                    \"type\": \"object\"\r",
                      "                },\r",
                      "                \"$id\": \"#/items/properties/subCategories\",\r",
                      "                \"type\": [\"null\", \"array\"]\r",
                      "            },\r",
                      "            \"helpTextInternal\": {\r",
                      "                \"$id\": \"#/items/properties/helpTextInternal\",\r",
                      "                \"type\": \"null\"\r",
                      "            },\r",
                      "            \"helpTextExternal\": {\r",
                      "                \"$id\": \"#/items/properties/helpTextExternal\",\r",
                      "                \"type\": [\"string\", \"null\"]\r",
                      "            }\r",
                      "        },\r",
                      "        \"$id\": \"#/items\",\r",
                      "        \"type\": \"object\"\r",
                      "    },\r",
                      "    \"$id\": \"http://example.org/root.json#\",\r",
                      "    \"type\": \"array\",\r",
                      "    \"definitions\": {},\r",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                      "};\r",
                      "\r",
                      "\r",
                      "\r",
                      "var expectedObject = [\r",
                      "    {\r",
                      "        \"code\": 1,\r",
                      "        \"name\": \"Priority Bills\",\r",
                      "        \"description\": null,\r",
                      "        \"type\": null,\r",
                      "        \"isActive\": false,\r",
                      "        \"subCategories\": [\r",
                      "            {\r",
                      "                \"code\": 1,\r",
                      "                \"name\": \"Rent/Mortgage\",\r",
                      "                \"description\": \"What is your monthly mortgage/rent payment? [including any arrears]\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This figure would include any arrears that you are currently paying\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 2,\r",
                      "                \"name\": \"Council Tax\",\r",
                      "                \"description\": \"How much do you pay for council tax including any arrears?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This figure would include any arrears that you are currently paying\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 3,\r",
                      "                \"name\": \"Gas\",\r",
                      "                \"description\": \"How much do you pay for your Gas including any arrears?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This figure would include any arrears that you are currently paying\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 4,\r",
                      "                \"name\": \"Electricity\",\r",
                      "                \"description\": \"How much do you pay for Electricity including any arrears?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This figure would include any arrears that you are currently paying\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 5,\r",
                      "                \"name\": \"Water\",\r",
                      "                \"description\": \"How much do you pay for your Water including any arrears?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This figure would include any arrears that you are currently paying\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 6,\r",
                      "                \"name\": \"Secured Loans\",\r",
                      "                \"description\": \"How much do you pay for Secured Loans including any arrears?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"A secured loan is money you borrow that is secured against an asset you own, usually your home. \"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 34,\r",
                      "                \"name\": \"County Court Judgement\",\r",
                      "                \"description\": \"How much do you pay for County Court Judgements?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This figure would include any arrears that you are currently paying\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 35,\r",
                      "                \"name\": \"Additional Priority Bills\",\r",
                      "                \"description\": \"Do you have any other 'Priority Bills' which you need to add?\",\r",
                      "                \"type\": \"string\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"Priority bills are bills you should focus on paying first. Priority bills can include mortgage/rent, council tax, gas, electricity and water bills, and your TV licence.\"\r",
                      "            }\r",
                      "        ],\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 2,\r",
                      "        \"name\": \"Fixed Costs\",\r",
                      "        \"description\": null,\r",
                      "        \"type\": null,\r",
                      "        \"isActive\": false,\r",
                      "        \"subCategories\": [\r",
                      "            {\r",
                      "                \"code\": 7,\r",
                      "                \"name\": \"TV Licence\",\r",
                      "                \"description\": \"How much do you pay for your TV license?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 8,\r",
                      "                \"name\": \"Appliance & Furniture Rental (Hire Purchase)\",\r",
                      "                \"description\": \"How much do you spend on Appliances & Furniture Rental (Hire Purchase)\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 9,\r",
                      "                \"name\": \"Life Insurance\",\r",
                      "                \"description\": \"How much do you pay towards any Life Insurance?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 10,\r",
                      "                \"name\": \"Building/Contents Insurance\",\r",
                      "                \"description\": \"How much do you pay for building sand contents insurance?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 11,\r",
                      "                \"name\": \"Health Insurance\",\r",
                      "                \"description\": \"How much do you pay for your Health Insurance?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 12,\r",
                      "                \"name\": \"Childcare\",\r",
                      "                \"description\": \"How much do you pay for childcare?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 13,\r",
                      "                \"name\": \"Child Maintenance/Child Support\",\r",
                      "                \"description\": \"How much do you pay towards Child Maintenance/Child Support?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 14,\r",
                      "                \"name\": \"Prescriptions/Medicines\",\r",
                      "                \"description\": \"If you require any regular prescription or medication how much do you pay towards those?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 15,\r",
                      "                \"name\": \"Dentistry/Opticians\",\r",
                      "                \"description\": \"How much do you pay towards Dentistry/Opticians?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            }\r",
                      "        ],\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 3,\r",
                      "        \"name\": \"Travel Costs\",\r",
                      "        \"description\": null,\r",
                      "        \"type\": null,\r",
                      "        \"isActive\": false,\r",
                      "        \"subCategories\": [\r",
                      "            {\r",
                      "                \"code\": 16,\r",
                      "                \"name\": \"Public Transport\",\r",
                      "                \"description\": \"How much do you spend on Public Transport?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 17,\r",
                      "                \"name\": \"Vehicle Insurance\",\r",
                      "                \"description\": \"How much do you spend on Vehicle Insurance\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 18,\r",
                      "                \"name\": \"Road Tax\",\r",
                      "                \"description\": \"How much do you spend on RoadTax?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 19,\r",
                      "                \"name\": \"MOT & Maintenance\",\r",
                      "                \"description\": \"How much do you spend on MOT?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 20,\r",
                      "                \"name\": \"Fuel (Petrol/Diesel)\",\r",
                      "                \"description\": \"How much do you spendon Fuel?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 21,\r",
                      "                \"name\": \"Hire Purchase or Conditional Sale\",\r",
                      "                \"description\": \"How much do you pay towards Hire Purchase or Conditional Sale?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            }\r",
                      "        ],\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 4,\r",
                      "        \"name\": \"Communications & Leisure\",\r",
                      "        \"description\": null,\r",
                      "        \"type\": null,\r",
                      "        \"isActive\": false,\r",
                      "        \"subCategories\": [\r",
                      "            {\r",
                      "                \"code\": 22,\r",
                      "                \"name\": \"Home Phone, Internet, TV Package\",\r",
                      "                \"description\": \"How much do you pay for internet/TV Subscriptions/Home Phone?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This includes TV packages, such as Sky/Virgin, and subscriptions, such as Netflix, Amazon Prime, NowTV etc\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 23,\r",
                      "                \"name\": \"Mobile Phone\",\r",
                      "                \"description\": \"How much do you pay for your Mobile Phone?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This can include Pay as you go, Sim only and Contract\"\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 24,\r",
                      "                \"name\": \"Hobbies, Leisure or Sport\",\r",
                      "                \"description\": \"How much do you pay for your Hobbies, Leisure and Sport?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": \"This can include expenditure for sport and hobby clubs like the gym, as well as leisure subscriptions such as Spotify, YouTube Premium, Apple Music, Deezer, Tidal, Playstation Plus and Xbox Live\"\r",
                      "            }\r",
                      "        ],\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 5,\r",
                      "        \"name\": \"Food & Housekeeping\",\r",
                      "        \"description\": null,\r",
                      "        \"type\": null,\r",
                      "        \"isActive\": false,\r",
                      "        \"subCategories\": [\r",
                      "            {\r",
                      "                \"code\": 25,\r",
                      "                \"name\": \"Groceries (e.g. food, pet food, cleaning)\",\r",
                      "                \"description\": \"How much do you spend towards Groceries (E.g. food, pet food, cleaning)\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 26,\r",
                      "                \"name\": \"Nappies & baby items\",\r",
                      "                \"description\": \"How much do you spend on Nappies & baby items?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 27,\r",
                      "                \"name\": \"School Meals/Meals at Work\",\r",
                      "                \"description\": \"How much do you pay for school or work lunches?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 28,\r",
                      "                \"name\": \"Vet bills & Pet Insurance\",\r",
                      "                \"description\": \"How much do you pay for Vet Bills & Pet Insurance?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 29,\r",
                      "                \"name\": \"House repairs/Maintenance\",\r",
                      "                \"description\": \"How much do you spend on House repairs / Maintenance?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 30,\r",
                      "                \"name\": \"Alcohol / Smoking Products\",\r",
                      "                \"description\": \"How much do you spend on Alcohol / Smoking Products?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            }\r",
                      "        ],\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    },\r",
                      "    {\r",
                      "        \"code\": 6,\r",
                      "        \"name\": \"Personal Costs\",\r",
                      "        \"description\": null,\r",
                      "        \"type\": null,\r",
                      "        \"isActive\": false,\r",
                      "        \"subCategories\": [\r",
                      "            {\r",
                      "                \"code\": 31,\r",
                      "                \"name\": \"Clothing & Footwear\",\r",
                      "                \"description\": \"How much do you spend on Clothing & Footwear?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 32, \r",
                      "                \"name\": \"Hairdressing\",\r",
                      "                \"description\": \"How much do you spend on Hairdressing?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            },\r",
                      "            {\r",
                      "                \"code\": 33,\r",
                      "                \"name\": \"Toiletries\",\r",
                      "                \"description\": \"How much do you spend on Toiletries?\",\r",
                      "                \"type\": \"number\",\r",
                      "                \"isActive\": true,\r",
                      "                \"subCategories\": null,\r",
                      "                \"helpTextInternal\": null,\r",
                      "                \"helpTextExternal\": null\r",
                      "            }\r",
                      "        ],\r",
                      "        \"helpTextInternal\": null,\r",
                      "        \"helpTextExternal\": null\r",
                      "    }\r",
                      "];\r",
                      "        forLoop: \r",
                      "    for(var index = 0; index < jsonData.length; index++){\r",
                      "     try{ \r",
                      "        pm.expect(jsonData[index].code).to.equal(expectedObject[index].code);\r",
                      "        pm.expect(jsonData[index].name).to.equal(expectedObject[index].name);\r",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);\r",
                      "        pm.expect(jsonData[index].type).to.equal(expectedObject[index].type);\r",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);\r",
                      "        pm.expect(jsonData[index].subCategories[{}]).to.equal(expectedObject[index].subCategories[{}]);\r",
                      "        pm.expect(jsonData[index].helpTextInternal).to.equal(expectedObject[index].helpTextInternal);\r",
                      "        pm.expect(jsonData[index].helpTextExternal).to.equal(expectedObject[index].helpTextExternal);\r",
                      "        \r",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \r",
                      "        \" \" + \"\\n\\nJsonFile Server data: \" + \r",
                      "        \"\\n code: \" + jsonData[index].code + \r",
                      "        \"\\n name: \" + jsonData[index].name + \r",
                      "        \"\\n description: \" + jsonData[index].description + \r",
                      "        \"\\n type: \" + jsonData[index].type + \r",
                      "        \"\\n isActive: \" + jsonData[index].isActive + \r",
                      "        \"\\n subCategories: \" + jsonData[index].subCategories + \r",
                      "        \"\\n helpTextInternal: \" + jsonData[index].helpTextInternal + \r",
                      "        \"\\n helpTextExternal: \" + jsonData[index].helpTextExternal + \r",
                      "        \" \" + \"\\n\\n expectedData: \" + \r",
                      "        \"\\n code: \" + expectedObject[index].code + \r",
                      "        \"\\n name: \" + expectedObject[index].name + \r",
                      "        \"\\n description: \" + \r",
                      "        expectedObject[index].description + \r",
                      "        \"\\n type: \" + expectedObject[index].type + \r",
                      "        \"\\n isActive: \" + expectedObject[index].isActive + \r",
                      "        \"\\n subCategories: \" + expectedObject[index].subCategories + \r",
                      "        \"\\n helpTextInternal: \" + expectedObject[index].helpTextInteranl + \r",
                      "        \"\\n helpTextExternal: \" + expectedObject[index].helpTextExternal;\r",
                      "        console.log(resultData);\r",
                      "       \r",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body!\", () => true);\r",
                      "        \r",
                      "        let jsonDataSubCat = jsonData[index].subCategories;\r",
                      "                SubCatIndexLoop:\r",
                      "        for(var subCatIndex = 0; subCatIndex < jsonDataSubCat.length; subCatIndex++){\r",
                      "            try{\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].code).to.equal(expectedObject[index].subCategories[subCatIndex].code);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].name).to.equal(expectedObject[index].subCategories[subCatIndex].name);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].description).to.equal(expectedObject[index].subCategories[subCatIndex].description);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].type).to.equal(expectedObject[index].subCategories[subCatIndex].type);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].isActive).to.equal(expectedObject[index].subCategories[subCatIndex].isActive);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].subCategories).to.equal(expectedObject[index].subCategories[subCatIndex].subCategories);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].helpTextInternal).to.equal(expectedObject[index].subCategories[subCatIndex].helpTextInternal);\r",
                      "            pm.expect(jsonData[index].subCategories[subCatIndex].helpTextExternal).to.equal(expectedObject[index].subCategories[subCatIndex].helpTextExternal);\r",
                      "            \r",
                      "            var subCatresultData = \"Subcategories property test\" + \" \" + (index+1) + \".\" + (subCatIndex+1) + \" \" + \" data: \" + \" \" +\r",
                      "            \"\\n\\nJsonFile Server data: \" + \r",
                      "            \"\\n code: \" + jsonData[index].subCategories[subCatIndex].code + \r",
                      "            \"\\n name: \" + jsonData[index].subCategories[subCatIndex].name + \r",
                      "            \"\\n description: \" + jsonData[index].subCategories[subCatIndex].description + \r",
                      "            \"\\n type: \" + jsonData[index].subCategories[subCatIndex].type + \r",
                      "            \"\\n isActive: \" + jsonData[index].subCategories[subCatIndex].isActive + \r",
                      "            \"\\n subCategories: \" + jsonData[index].subCategories[subCatIndex].subCategories + \r",
                      "            \"\\n helpTextInternal: \" + jsonData[index].subCategories[subCatIndex].helpTextInternal + \r",
                      "            \"\\n helpTextExternal: \" + jsonData[index].subCategories[subCatIndex].helpTextExternal+ \r",
                      "            \" \" + \"\\n\\n expectedData: \" + \r",
                      "            \"\\n code: \" + expectedObject[index].subCategories[subCatIndex].code + \r",
                      "            \"\\n name: \" + expectedObject[index].subCategories[subCatIndex].name + \r",
                      "            \"\\n description: \" + expectedObject[index].subCategories[subCatIndex].description + \r",
                      "            \"\\n type: \" + expectedObject[index].subCategories[subCatIndex].type + \r",
                      "            \"\\n isActive: \" + expectedObject[index].subCategories[subCatIndex].isActive + \r",
                      "            \"\\n subCategories: \" + expectedObject[index].subCategories[subCatIndex].subCategories + \r",
                      "            \"\\n helpTextInternal: \" + expectedObject[index].subCategories[subCatIndex].helpTextInternal + \r",
                      "            \"\\n helpTextExternal: \" + expectedObject[index].subCategories[subCatIndex].helpTextExternal;\r",
                      "            console.log(subCatresultData);\r",
                      "            \r",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \".\" + (subCatIndex+1) + \" \" + \"Testing object\" + \" \" + \r",
                      "            subCatIndex + \" \" +\"of subCategories property of object\" + \" \" + index + \" \" + \"-\" + \" \"\r",
                      "            + \"It PASSED - Expected values are present in response Body!\", () => true);\r",
                      "            \r",
                      "            } catch(e){\r",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \".\" + (subCatIndex+1) + \" \" + \"Testing object\" + \" \" + \r",
                      "            subCatIndex + \" \" +\"of subCategories property of object\" + \" \" + index + \" \" + \"-\" + \" \"+ \r",
                      "            \"It FAILED - Expected values are not present in response Body!\", () => {throw new Error(e.message)});\r",
                      "            \r",
                      "            console.log(\"Test\" + \" \" + (index+1) + \".\" + (subCatIndex+1) + \" \" + \r",
                      "            \"Testing object\" + \" \" + subCatIndex + \" \" +\"of subCategories property of object\" + \r",
                      "            \" \" + index + \" \" + \"-\" + \" \"+ \"It FAILED - Expected values are not present in response Body!\" + \r",
                      "            \"\\n\\n\" + e.name + \":\" + \" \" + \"\\n\" + e.message);\r",
                      "            continue SubCatIndexLoop;\r",
                      "            }\r",
                      "        }\r",
                      "        }catch(e){\r",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \r",
                      "            \"FAILED - Expected values are not present in response Body!\", () => {throw new Error(e.message)});\r",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \r",
                      "           \"FAILED - Expected values are not present in response Body!\" + \"\\n\\n\" + e.name + \":\" + \" \" + \"\\n\" + e.message);\r",
                      "           continue forLoop;\r",
                      "        } \r",
                      "    }\r",
                      "pm.test(\"TEST01: Status Code Check\", function() {\r",
                      "    pm.response.to.have.status(200);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"TEST02: Response Header Checks\", function() {\r",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                      "});\r",
                      "\r",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                      "});\r",
                      "\r",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {\r",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;\r",
                      "});\r",
                      "\r",
                      "} catch (e) {\r",
                      "\r",
                      "////////Negative Tests\r",
                      "pm.test(\"Check if array is empty\", function () {\r",
                      "     pm.expect([expectedObject]).to.not.be.empty;\r",
                      "});\r",
                      " pm.test(\"Check if string is empty\", function () {\r",
                      "     pm.expect('subCategories').to.not.be.empty;\r",
                      "});\r",
                      "pm.test(\"Incorrect Key Test\", function() {\r",
                      "    var cdName = schema.items.name;\r",
                      "    var wrongFormat = Boolean;\r",
                      "    pm.expect(cdName).to.not.equal(wrongFormat);\r",
                      "    console.log(jsonData.toString());\r",
                      "});\r",
                      "\r",
                      "\r",
                      "       \r",
                      "\r",
                      "}  "
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "463d84a1-3918-47d9-8d4f-4e8a754dd2bc",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      "\r",
                      "\r",
                      "\r",
                      "\r",
                      "/*\r",
                      "\r",
                      "SELECT * FROM dbo.ExpenditureType ET FULL JOIN dbo.ExpenditureGroup EG ON EG.ExpenditureGroupCode = ET.ExpenditureGroupCode\r",
                      "\r",
                      "*/\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "a19b156a-40fe-4a29-82ef-6c9c857f7e6c",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "correlation-id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "Test-User"
                  }
                ],
                "url": "{{BaseURL}}/sfs/category/expenditure",
                "description": "Gets SFS Expenditure questions"
              },
              "response": [
                {
                  "id": "5332a33f-39cd-4dd7-85f8-52047c9aea81",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/expenditure"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "8aa997d6-1116-49db-b21c-27352fa31690",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/expenditure"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "null"
                },
                {
                  "id": "a0778a0f-1516-426f-9f60-59987e55c351",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/expenditure"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "category/income",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "abc8409d-ce25-4941-88e2-dcd91abeef39",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"code\": 1,",
                      "        \"name\": \"Standard\",",
                      "        \"description\": \"Standard Income Types\",",
                      "        \"type\": null,",
                      "        \"isActive\": false,",
                      "        \"subCategories\": [",
                      "            {",
                      "                \"code\": 1,",
                      "                \"name\": \"Wages / Salary\",",
                      "                \"description\": \"What\u2019s your income?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            },",
                      "            {",
                      "                \"code\": 2,",
                      "                \"name\": \"Partner's Wages / Salary\",",
                      "                \"description\": \"Whats your partners income?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                ",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": \"If applicable, how much pay does your partner receive each month from their job?\"",
                      "            },",
                      "            {",
                      "                \"code\": 3,",
                      "                \"name\": \"Pension\",",
                      "                \"description\": \"How much do you receive?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": \"If you receive a pension, how much do you receive monthly?\"",
                      "            },",
                      "            {",
                      "                \"code\": 4,",
                      "                \"name\": \"Maintenance / Child Support\",",
                      "                \"description\": \"How much Child Support do you receive?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            }",
                      "        ],",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    },",
                      "    {",
                      "        \"code\": 2,",
                      "        \"name\": \"Benefits\",",
                      "        \"description\": \"Income Types from Benefits\",",
                      "        \"type\": null,",
                      "        \"isActive\": false,",
                      "        \"subCategories\": [",
                      "            {",
                      "                \"code\": 5,",
                      "                \"name\": \"Benefits\",",
                      "                \"description\": \"Other Benefits\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": false,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            },",
                      "            {",
                      "                \"code\": 6,",
                      "                \"name\": \"Child Benefit\",",
                      "                \"description\": \"How much Child Benefit do you receive?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": false,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            },",
                      "            {",
                      "                \"code\": 7,",
                      "                \"name\": \"Job Seekers Allowance (JSA)\",",
                      "                \"description\": \"How much Job Seekers Allowance (JSA) do you receive?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            },",
                      "            {",
                      "                \"code\": 8,",
                      "                \"name\": \"Universal Credit\",",
                      "                \"description\": \"How much Universal Credit do you receive?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            },",
                      "            {",
                      "                \"code\": 9,",
                      "                \"name\": \"Disability Living Allowance\",",
                      "                \"description\": \"How much Disability Living Allowance do you receive?\",",
                      "                \"type\": \"number\",",
                      "                \"isActive\": true,",
                      "                \"subCategories\": null,",
                      "                \"helpTextInternal\": null,",
                      "                \"helpTextExternal\": null",
                      "            }",
                      "        ],",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    }",
                      "];",
                      "",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema =",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"code\",",
                      "            \"name\",",
                      "            \"description\",",
                      "            \"type\",",
                      "            \"isActive\",",
                      "            \"subCategories\",",
                      "            \"helpTextInternal\",",
                      "            \"helpTextExternal\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"code\": {",
                      "                \"$id\": \"#/items/properties/code\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"name\": {",
                      "                \"$id\": \"#/items/properties/name\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"type\": {",
                      "                \"$id\": \"#/items/properties/type\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            },",
                      "            \"subCategories\": {",
                      "                \"items\": {",
                      "                    \"required\": [",
                      "                        \"code\",",
                      "                        \"name\",",
                      "                        \"description\",",
                      "                        \"type\",",
                      "                        \"isActive\",",
                      "                        \"subCategories\",",
                      "                        \"helpTextInternal\",",
                      "                        \"helpTextExternal\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"code\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/code\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"name\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/name\",",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"description\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/description\",",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"type\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/type\",",
                      "                            \"type\": \"string\"",
                      "                        },",
                      "                        \"isActive\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/isActive\",",
                      "                            \"type\": \"boolean\"",
                      "                        },",
                      "                        \"subCategories\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/subCategories\",",
                      "                            \"type\": [\"array\", \"null\"]",
                      "                        },",
                      "                        \"helpTextInternal\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/helpTextInternal\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"helpTextExternal\": {",
                      "                            \"$id\": \"#/items/properties/subCategories/items/properties/helpTextExternal\",",
                      "                            \"type\": [\"null\", \"string\"]",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/items/properties/subCategories/items\",",
                      "                    \"type\": \"object\"",
                      "                },",
                      "                \"$id\": \"#/items/properties/subCategories\",",
                      "                \"type\": \"array\"",
                      "            },",
                      "            \"helpTextInternal\": {",
                      "                \"$id\": \"#/items/properties/helpTextInternal\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"helpTextExternal\": {",
                      "                \"$id\": \"#/items/properties/helpTextExternal\",",
                      "                \"type\": \"null\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "",
                      "}",
                      "function contains(arr, key, val) {",
                      " var codeBool = true;",
                      "     for (var i = 1; i < 8; i++) {",
                      "                 if (!contains(arr, \"code\", i)) {",
                      "            codeBool = false;",
                      "            console.log(codeBool);",
                      "            break;",
                      "        }",
                      "",
                      "  ",
                      "}",
                      "}",
                      "if(jsonData) {",
                      "    try {",
                      "        a = JSON.parse(responseBody);",
                      "    } catch(e) { \"Error Presented\";",
                      "        alert(e); // error in the above string (in this case, yes)!",
                      "    }",
                      "}",
                      "pm.test(\"Test01: Data values are correct \", function(){",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "        pm.expect(jsonData[index].code).to.equal(expectedObject[index].code);",
                      "        pm.expect(jsonData[index].name).to.equal(expectedObject[index].name);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].type).to.equal(expectedObject[index].type);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        pm.expect(jsonData[index].subCategories).to.equal(expectedObject[index].subCategories);",
                      "        pm.expect(jsonData[index].helpTextInternal).to.equal(expectedObject[index].helpTextInternal);",
                      "        pm.expect(jsonData[index].helpTextExternal).to.equal(expectedObject[index].helpTextExternal);",
                      "        ",
                      "        var resultData = ",
                      "        \"jsonFileData: \" + \"\\n code: \" + jsonData[index].code + ",
                      "        \"\\n name: \" + jsonData[index].name + \"\\n description: \" + jsonData[index].description + \"\\n type: \" +",
                      "        jsonData[index].type + \"\\n isActive: \" + jsonData[index].isActive + \"\\n subCategories: \" + jsonData[index].subCategories ",
                      "        + \"\\n helpTextInternal: \" + jsonData[index].helpTextInternal + \"\\n helpTextExternal: \" + jsonData[index].helpTextExternal + ",
                      "        \"\\n\\n expectedObjectData: \" + \"\\n code: \" + expectedObject[index].code + ",
                      "        \"\\n name: \" + expectedObject[index].name + \"\\n description: \" + expectedObject[index].description +",
                      "        \"\\n type: \" + expectedObject[index].type + \"\\n isActive: \" + expectedObject[index].isActive + \"\\n subCategories: \"",
                      "        + expectedObject[index].subCategories + \"\\n helpTextInternal: \" + expectedObject[index].helpTextInteranl + ",
                      "        \"\\n helpTextExternal: \" + expectedObject[index].helpTextExternal;",
                      "        console.log(resultData);",
                      "    }",
                      "   }",
                      "   ",
                      "    ",
                      ");",
                      "",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "function contains(arr, key, val) {",
                      " var codeBool = true;",
                      "     for (var i = 1; i < 10; i++) {",
                      "                 if (!contains(arr, \"code\", i)) {",
                      "            codeBool = false;",
                      "            console.log(codeBool);",
                      "            break;",
                      "        }",
                      "",
                      "  ",
                      "}",
                      "}",
                      "function contains(arr, key, val) {",
                      "    var jsonData = true;",
                      "    //console.log(jsonData, \"h3llo\");",
                      "    for (var i = 0; i < data.length; i++) {",
                      "        if(data[i][key] === val) return true;",
                      "    }",
                      "    console.log(data, \"Array is correct\");",
                      "    return false;",
                      "}",
                      "///NEGATIVE TESTS",
                      "console.log(contains(data, \"codehg3\", 65733));//false (or true if you change === to ==)",
                      "console.log(contains(data, \"narme\", \"AOD (Web) - Added by Cfdustomer\")); //false",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect([jsonData]).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('description').to.not.be.empty;",
                      "});",
                      "pm.test(\"Check the length of the target\", function () {",
                      "     pm.expect(jsonData).to.not.have.lengthOf(13);",
                      "    });"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2e31638a-67ea-4378-8900-2f78712c37c0",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "ca7f8c5e-e104-4376-bf04-3a059c1ac8a9",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/category/income",
                "description": "Gets SFS Income questions"
              },
              "response": [
                {
                  "id": "54cd37c5-6faa-4c9f-8011-111dacccf35b",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/income"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "null"
                },
                {
                  "id": "5ebb02d5-7d20-473b-87c5-655c92836150",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/income"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "d559346a-afe1-45ee-a8c0-c71ac9c85366",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/income"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "category/saving",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "94354cf7-6e05-414b-8431-48912db82f9b",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"code\": 1,",
                      "        \"name\": \"Savings\",",
                      "        \"description\": \"How much do you contribute toward savings?\",",
                      "        \"type\": \"number\",",
                      "        \"isActive\": true,",
                      "        \"subCategories\": null,",
                      "        \"helpTextInternal\": null,",
                      "        \"helpTextExternal\": null",
                      "    }",
                      "];",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console});",
                      "var schema =",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"code\",",
                      "            \"name\",",
                      "            \"description\",",
                      "            \"type\",",
                      "            \"isActive\",",
                      "            \"subCategories\",",
                      "            \"helpTextInternal\",",
                      "            \"helpTextExternal\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"code\": {",
                      "                \"$id\": \"#/items/properties/code\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"name\": {",
                      "                \"$id\": \"#/items/properties/name\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"type\": {",
                      "                \"$id\": \"#/items/properties/type\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            },",
                      "            \"subCategories\": {",
                      "                \"$id\": \"#/items/properties/subCategories\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"helpTextInternal\": {",
                      "                \"$id\": \"#/items/properties/helpTextInternal\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"helpTextExternal\": {",
                      "                \"$id\": \"#/items/properties/helpTextExternal\",",
                      "                \"type\": \"null\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "",
                      "",
                      "",
                      "/////////////////TESTS/////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "////////Negative Tests",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect([expectedObject]).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('name').to.not.be.empty;",
                      "});",
                      "pm.test(\"Incorrect Key Test\", function() {",
                      "    var cdName = schema.items.name;",
                      "    var wrongFormat = Boolean;",
                      "    pm.expect(cdName).to.not.equal(wrongFormat);",
                      "    console.log(jsonData.toString());",
                      "});",
                      "",
                      "",
                      "pm.test(\"TEST06: Object fields contain correct categories\", function () {",
                      "    pm.expect(pm.response.text()).to.include('code', 'name', 'description', 'type', 'isActive', 'subCategories', 'helpTextInternal', 'helpTextExternal', '');",
                      "});",
                      "forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].code).to.equal(expectedObject[index].code);",
                      "        pm.expect(jsonData[index].name).to.equal(expectedObject[index].name);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].type).to.equal(expectedObject[index].type);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        pm.expect(jsonData[index].subCategories).to.equal(expectedObject[index].subCategories);",
                      "        pm.expect(jsonData[index].helpTextInternal).to.equal(expectedObject[index].helpTextInternal);",
                      "        pm.expect(jsonData[index].helpTextExternal).to.equal(expectedObject[index].helpTextExternal);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n code: \" + jsonData[index].code + ",
                      "        \"\\n name: \" + jsonData[index].name + \"\\n description: \" + jsonData[index].description + ",
                      "        \"\\n type: \" + jsonData[index].type + \"\\n isActive: \" + jsonData[index].isActive + ",
                      "        \"\\n subCategories: \" + jsonData[index].subCategories + \"\\n helpTextInternal: \" + ",
                      "        jsonData[index].helpTextInternal + \"\\n helpTextExternal: \" + jsonData[index].helpTextExternal + ",
                      "        \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n code: \" ",
                      "        + expectedObject[index].code + \"\\n name: \" + expectedObject[index].name + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n type: \" + expectedObject[index].type + \"\\n isActive: \" + ",
                      "        expectedObject[index].isActive + \"\\n subCategories: \" + expectedObject[index].subCategories + ",
                      "        \"\\n helpTextInternal: \" + expectedObject[index].helpTextInteranl + \"\\n helpTextExternal: \" + ",
                      "        expectedObject[index].helpTextExternal;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body!\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"FAILED - Expected values are not present in response Body!\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"FAILED - Expected values are not present in response Body!\" + \"\\n\\n\" + e.name + \":\" + \" \" + \"\\n\" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c7f6c0bb-ff1c-4a06-b767-c978054c1430",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f092a81f-45a6-487d-8737-b58c678652a6",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "value": "Postman",
                    "type": "text"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/category/saving",
                "description": "Gets SFS Saving questions"
              },
              "response": [
                {
                  "id": "15c5b44a-a0fa-4d81-86e1-4e588ca90cf1",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/saving"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "ef3c6437-4812-4974-b301-ceb7864b47e6",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/saving"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "f754eaa7-a8ce-42c9-a4f5-b117146c0c07",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/category/saving"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "null"
                }
              ]
            }
          ],
          "_postman_id": "35e6d8a0-d50a-42c6-b48e-6fe1bca5d336",
          "_postman_isSubFolder": true
        },
        {
          "name": "listitems",
          "item": [
            {
              "name": "listitems/employmentstatus",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9dfb01f8-2b3d-4437-8110-22ec786ad48e",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"employmentStatusCode\": 1,",
                      "        \"description\": \"Full Time\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": true",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 2,",
                      "        \"description\": \"Part Time\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 3,",
                      "        \"description\": \"Self Employed\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 4,",
                      "        \"description\": \"Unemployed\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 5,",
                      "        \"description\": \"Student\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 6,",
                      "        \"description\": \"Carer\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 7,",
                      "        \"description\": \"Not Working Due to Illness\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"employmentStatusCode\": 8,",
                      "        \"description\": \"Retired\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    }",
                      "];",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv({logger: console});",
                      "var schema = ",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"employmentStatusCode\",",
                      "            \"description\",",
                      "            \"isActive\",",
                      "            \"isDefault\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"employmentStatusCode\": {",
                      "                \"$id\": \"#/items/properties/employmentStatusCode\",",
                      "                \"type\": [\"integer\", \"null\"]",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": [\"string\", \"null\"]",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": [\"null\", \"boolean\"]",
                      "            },",
                      "            \"isDefault\": {",
                      "                \"$id\": \"#/items/properties/isDefault\",",
                      "                \"type\": [\"null\", \"boolean\"]",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"array\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "",
                      "",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "",
                      "}",
                      "function contains(arr, key, val) {",
                      " var codeBool = true;",
                      "     for (var i = 1; i < 18; i++) {",
                      "                 if (!contains(arr, \"code\", i)) {",
                      "            codeBool = false;",
                      "            console.log(codeBool);",
                      "            break;",
                      "        }",
                      "",
                      "  ",
                      "}",
                      "}",
                      "if(jsonData) {",
                      "    try {",
                      "        a = JSON.parse(responseBody);",
                      "    } catch(e) { \"Error Presented\";",
                      "        alert(e); // error in the above string (in this case, yes)!",
                      "    }",
                      "}",
                      "    forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].employmentStatusCode).to.equal(expectedObject[index].employmentStatusCode);",
                      "        pm.expect(jsonData[index].name).to.equal(expectedObject[index].name);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n employmentStatusCode: \" + jsonData[index].employmentStatusCode + ",
                      "        \"\\n description: \" + jsonData[index].description + \"\\n isActive: \" + jsonData[index].isActive + ",
                      "        \"\\n isDefault: \" + jsonData[index].isDefault + \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n employmentStatusCode: \" ",
                      "        + expectedObject[index].employmentStatusCode + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n isActive: \" + expectedObject[index].isActive + \"\\n isDefault: \" + ",
                      "        expectedObject[index].isDefault;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "78e696ea-06c2-475d-a1cf-a056a5271394",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c2e8bf39-e64d-4ad5-ae5d-a6264230c1f7",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/listitems/employmentstatus",
                "description": "Gets all employment statuses type front end select list items"
              },
              "response": [
                {
                  "id": "6e97759a-ace4-45fd-9088-1cb5503cec17",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/employmentstatus"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "73e965d3-5cb4-4942-86e5-d3ab97c1a3d7",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/employmentstatus"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "d0c155e9-1e87-4089-997a-dff4b0b47a98",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/employmentstatus"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"employmentStatusCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n },\n {\n  \"employmentStatusCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n }\n]"
                }
              ]
            },
            {
              "name": "listitems/frequency",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "acc65121-7c1e-450b-ae81-86745ef3866b",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"frequencyCode\": 1,",
                      "        \"description\": \"Weekly\",",
                      "        \"monthlyMultiplicationFactor\": 52.00,",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"frequencyCode\": 2,",
                      "        \"description\": \"Fortnightly\",",
                      "        \"monthlyMultiplicationFactor\": 26.00,",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"frequencyCode\": 3,",
                      "        \"description\": \"Four Weekly\",",
                      "        \"monthlyMultiplicationFactor\": 13.00,",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"frequencyCode\": 4,",
                      "        \"description\": \"Monthly\",",
                      "        \"monthlyMultiplicationFactor\": 12.00,",
                      "        \"isActive\": true,",
                      "        \"isDefault\": true",
                      "    }",
                      "];",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"frequencyCode\",",
                      "            \"description\",",
                      "            \"monthlyMultiplicationFactor\",",
                      "            \"isActive\",",
                      "            \"isDefault\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"frequencyCode\": {",
                      "                \"$id\": \"#/items/properties/frequencyCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"monthlyMultiplicationFactor\": {",
                      "                \"$id\": \"#/items/properties/monthlyMultiplicationFactor\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            },",
                      "            \"isDefault\": {",
                      "                \"$id\": \"#/items/properties/isDefault\",",
                      "                \"type\": \"boolean\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "",
                      "",
                      "    forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].frequencyCode).to.equal(expectedObject[index].frequencyCode);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].monthlyMultiplicationFactor).to.equal(expectedObject[index].monthlyMultiplicationFactor);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        pm.expect(jsonData[index].isDefault).to.equal(expectedObject[index].isDefault);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n employmentStatusCode: \" + jsonData[index].employmentStatusCode + ",
                      "        \"\\n description: \" + jsonData[index].description + \"\\n isActive: \" + jsonData[index].isActive + ",
                      "        \"\\n isDefault: \" + jsonData[index].isDefault + \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n employmentStatusCode: \" ",
                      "        + expectedObject[index].employmentStatusCode + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n isActive: \" + expectedObject[index].isActive + \"\\n isDefault: \" + ",
                      "        expectedObject[index].isDefault;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "",
                      "",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "",
                      "///NEGATIVE TESTS",
                      "",
                      "pm.test(\"Neg Test 01: Check if array is empty\", function () {",
                      "     pm.expect([expectedObject]).to.not.be.empty;",
                      "});",
                      " pm.test(\"Neg Test 02: Check if string is empty\", function () {",
                      "     pm.expect('description').to.not.be.empty;",
                      "});",
                      " pm.test(\"Neg Test 03: Check consumerID isn't empty\", function () {",
                      "     pm.expect('isActive').to.not.be.empty;",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "168e61d5-8b9a-4c8d-b490-697fd732e6bc",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c1e16ffc-5578-4df0-bbe0-12c91d61f55d",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  },
                  {
                    "key": "correlation-id",
                    "value": "test-correlation",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/listitems/frequency",
                "description": "Gets Frequency"
              },
              "response": [
                {
                  "id": "0fcdc018-513f-46ef-8abf-4f7d411fa868",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/frequency"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"frequencyCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"monthlyMultiplicationFactor\": \"<double>\",\n  \"isDefault\": \"<boolean>\"\n },\n {\n  \"frequencyCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"monthlyMultiplicationFactor\": \"<double>\",\n  \"isDefault\": \"<boolean>\"\n }\n]"
                },
                {
                  "id": "29199558-5900-4f4e-9047-6e97a288008e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/frequency"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "fb2c8a02-f1bf-41fe-809f-c0710586b1a1",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/frequency"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "listitems/householdcontributor",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd8c030d-35e6-4364-a1be-73b3eedbf194",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject =",
                      "[",
                      "    {",
                      "        \"householdContributorCode\": 1,",
                      "        \"description\": \"Parent\",",
                      "        \"isDefault\": true",
                      "    },",
                      "    {",
                      "        \"householdContributorCode\": 2,",
                      "        \"description\": \"Sibling\",",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdContributorCode\": 3,",
                      "        \"description\": \"Lodger\",",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdContributorCode\": 4,",
                      "        \"description\": \"Other\",",
                      "        \"isDefault\": false",
                      "    }",
                      "];",
                      "",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = {",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"householdContributorCode\",",
                      "            \"description\",",
                      "            \"isDefault\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"householdContributorCode\": {",
                      "                \"$id\": \"#/items/properties/householdContributorCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"isDefault\": {",
                      "                \"$id\": \"#/items/properties/isDefault\",",
                      "                \"type\": \"boolean\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].householdContributerCode).to.equal(expectedObject[index].householdContributerCode);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].isDefault).to.equal(expectedObject[index].isDefault);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n householdContributereCode: \" + jsonData[index].householdContributerCode + ",
                      "        \"\\n description: \" + jsonData[index].description + \"\\n isDefault: \" + jsonData[index].isDefault + \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n householdContributerCode: \" ",
                      "        + expectedObject[index].householdContributerCode + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n isDefault: \" + expectedObject[index].isDefault;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "",
                      "",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "////////Negative Tests",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect([expectedObject]).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('householdContributorCode').to.not.be.empty;",
                      "});",
                      "pm.test(\"Incorrect Key Test\", function() {",
                      "    var cdName = schema.items.householdContributorCode;",
                      "    var wrongFormat = Boolean;",
                      "    pm.expect(cdName).to.not.equal(wrongFormat);",
                      "    console.log(jsonData.toString());",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "01871761-6e98-4c4d-8475-37a4ace1cbe2",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "95978326-5501-4e6d-a814-43b48277a9fc",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/listitems/householdcontributor",
                "description": "Gets all household contributors front end select list items"
              },
              "response": [
                {
                  "id": "21dd9e84-c3d3-47e4-ab17-71ab1ac8b060",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/householdcontributor"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"householdContributorCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n },\n {\n  \"householdContributorCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n }\n]"
                },
                {
                  "id": "247c06b8-1abe-4262-b55a-9099027cd4a3",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/householdcontributor"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "8f2acb09-88b0-4bd0-8741-5e20a11eee81",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/householdcontributor"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "listitems/householdtype",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "db54ab8f-6da9-47e6-a49a-abd439e6ea0d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"householdTypeCode\": 1,",
                      "        \"description\": \"Couple with no children\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 2,",
                      "        \"description\": \"Couple with children\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 3,",
                      "        \"description\": \"Single Person\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 4,",
                      "        \"description\": \"Single Parent\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 5,",
                      "        \"description\": \"Unknown\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 6,",
                      "        \"description\": \"None\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 7,",
                      "        \"description\": \"Personal\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": true",
                      "    },",
                      "    {",
                      "        \"householdTypeCode\": 8,",
                      "        \"description\": \"Household\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    }",
                      "];",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = ",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"householdTypeCode\",",
                      "            \"description\",",
                      "            \"isActive\",",
                      "            \"isDefault\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"householdTypeCode\": {",
                      "                \"$id\": \"#/items/properties/householdTypeCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            },",
                      "            \"isDefault\": {",
                      "                \"$id\": \"#/items/properties/isDefault\",",
                      "                \"type\": \"boolean\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "",
                      "    forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].householdTypeCode).to.equal(expectedObject[index].householdTypeCode);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        pm.expect(jsonData[index].isDefault).to.equal(expectedObject[index].isDefault);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n householdTypeCode: \" + jsonData[index].householdTypeCode + ",
                      "        \"\\n description: \" + jsonData[index].description + \"\\n isActive: \" + jsonData[index].isActive + ",
                      "        \"\\n isDefault: \" + jsonData[index].isDefault + \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n employmentStatusCode: \" ",
                      "        + expectedObject[index].householdTypeCode + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n isActive: \" + expectedObject[index].isActive + \"\\n isDefault: \" + ",
                      "        expectedObject[index].isDefault;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "",
                      "",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "",
                      "////////Negative Tests",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect([expectedObject]).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('householdTypeCode').to.not.be.empty;",
                      "});",
                      "pm.test(\"Incorrect Key Test\", function() {",
                      "    var cdName = schema.items.householdTypeCode;",
                      "    var wrongFormat = Boolean;",
                      "    pm.expect(cdName).to.not.equal(wrongFormat);",
                      "    console.log(jsonData.toString());",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "43e93b6d-7e53-46e5-a4c5-641cb7553947",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "f6f8bb76-34a2-4e04-848c-ddb65b2ffa47",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/listitems/householdtype",
                "description": "Gets all household type front end select list items"
              },
              "response": [
                {
                  "id": "a1a7f47e-0585-4afd-a9e7-571580f9dfa3",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/householdtype"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"householdTypeCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n },\n {\n  \"householdTypeCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n }\n]"
                },
                {
                  "id": "aedb6152-6548-4bc1-8b9f-c3deb3edc9de",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/householdtype"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "e7904b45-f1ab-4869-8714-8804c29b5d0a",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/householdtype"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "listitems/repayingdebttypes",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "390e9018-a150-43ba-9858-809f0d5e1a4d",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"repayingDebtTypeCode\": 1,",
                      "        \"description\": \"It will improve my credit score\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 2,",
                      "        \"description\": \"I would like to be free of debt\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 3,",
                      "        \"description\": \"I would like more disposable income\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 4,",
                      "        \"description\": \"I would like to get a mortgage to buy a house\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 5,",
                      "        \"description\": \"I would like a new car/need car finance\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 6,",
                      "        \"description\": \"I would like a mobile contract\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 7,",
                      "        \"description\": \"I would like to get a new job\",",
                      "        \"isActive\": true",
                      "    },",
                      "    {",
                      "        \"repayingDebtTypeCode\": 8,",
                      "        \"description\": \"I would like to create a better life/future for my children\",",
                      "        \"isActive\": true",
                      "    }",
                      "];",
                      "",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema = ",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"repayingDebtTypeCode\",",
                      "            \"description\",",
                      "            \"isActive\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"repayingDebtTypeCode\": {",
                      "                \"$id\": \"#/items/properties/repayingDebtTypeCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].repayingDebtTypeCode).to.equal(expectedObject[index].repayingDebtTypeCode);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].isDefault).to.equal(expectedObject[index].isDefault);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n repayingDebtTypeCode: \" + jsonData[index].repayingDebtTypeCode + ",
                      "        \"\\n description: \" + jsonData[index].description + \"\\n isDefault: \" + jsonData[index].isDefault + \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n repayingDebtTypeCode: \" ",
                      "        + expectedObject[index].repayingDebtTypeCode + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n isDefault: \" + expectedObject[index].isDefault;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "",
                      "",
                      "}",
                      "",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "});",
                      "///NEGATIVE TESTS",
                      "function contains(arr, key, val) {",
                      "    var jsonData = true;",
                      "    //console.log(jsonData, \"h3llo\");",
                      "    for (var i = 0; i < data.length; i++) {",
                      "        if(data[i][key] === val) return true;",
                      "    }",
                      "    console.log(jsonData, \"Array is correct\");",
                      "    return false;",
                      "}",
                      "console.log(contains(data, \"codehg3\", 65733));//false (or true if you change === to ==)",
                      "console.log(contains(data, \"narme\", \"F0exed Costs\")); //false",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect(jsonData).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('description').to.not.be.empty;",
                      "});",
                      "pm.test(\"Check the length of the target\", function () {",
                      "     pm.expect(jsonData).to.not.have.lengthOf(13);",
                      "    });",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "736777cb-a5b3-4fb2-b02a-78cbc079af49",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "6f2fd7d4-6e25-4303-b92c-58e4ca4ea2ae",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/listitems/repayingdebttypes",
                "description": "Gets SFS repaying debt types"
              },
              "response": [
                {
                  "id": "46670284-a521-4116-a88c-6b4b0e1d05bf",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/repayingdebttypes"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "64cb31df-4bac-4a97-96fb-4a04087503b3",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/repayingdebttypes"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"description\": \"<string>\"\n },\n {\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"description\": \"<string>\"\n }\n]"
                },
                {
                  "id": "f91503a3-89b1-4866-bc3e-14b77ee29ee8",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/repayingdebttypes"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            },
            {
              "name": "listitems/residencestatus",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "cd2c0797-7919-4385-a34a-e914d22c06dc",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = ",
                      "[",
                      "    {",
                      "        \"residenceStatusCode\": 1,",
                      "        \"description\": \"Tenant\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 2,",
                      "        \"description\": \"Home Owner\",",
                      "        \"isActive\": false,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 3,",
                      "        \"description\": \"Home Owner - with Mortgage\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": true",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 4,",
                      "        \"description\": \"Home Owner - without Mortgage\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 5,",
                      "        \"description\": \"Living with Parents\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 6,",
                      "        \"description\": \"No Fixed Abode\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 7,",
                      "        \"description\": \"Sheltered Accommodation\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    },",
                      "    {",
                      "        \"residenceStatusCode\": 8,",
                      "        \"description\": \"Unknown\",",
                      "        \"isActive\": true,",
                      "        \"isDefault\": false",
                      "    }",
                      "];",
                      "",
                      "var Ajv = require('ajv'),",
                      "ajv = new Ajv ({logger:console}),",
                      "schema =",
                      "{",
                      "    \"items\": {",
                      "        \"required\": [",
                      "            \"residenceStatusCode\",",
                      "            \"description\",",
                      "            \"isActive\",",
                      "            \"isDefault\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"residenceStatusCode\": {",
                      "                \"$id\": \"#/items/properties/residenceStatusCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"description\": {",
                      "                \"$id\": \"#/items/properties/description\",",
                      "                \"type\": \"string\"",
                      "            },",
                      "            \"isActive\": {",
                      "                \"$id\": \"#/items/properties/isActive\",",
                      "                \"type\": \"boolean\"",
                      "            },",
                      "            \"isDefault\": {",
                      "                \"$id\": \"#/items/properties/isDefault\",",
                      "                \"type\": \"boolean\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"#/items\",",
                      "        \"type\": \"object\"",
                      "    },",
                      "    \"$id\": \"http://example.org/root.json#\",",
                      "    \"type\": \"array\",",
                      "    \"definitions\": {},",
                      "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "};",
                      "//////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity==null || data.test_polarity==1){",
                      "",
                      "forLoop: ",
                      "    for(var index = 0; index < jsonData.length; index++){",
                      "     try{   ",
                      "        pm.expect(jsonData[index].residenceStatusCode).to.equal(expectedObject[index].residenceStatusCode);",
                      "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);",
                      "        pm.expect(jsonData[index].isActive).to.equal(expectedObject[index].isActive);",
                      "        pm.expect(jsonData[index].isDefault).to.equal(expectedObject[index].isDefault);",
                      "        ",
                      "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                      "        \"\\n\\nJsonFile Server data: \" + \"\\n residenceStatusCode: \" + jsonData[index].residenceStatusCode + ",
                      "        \"\\n description: \" + jsonData[index].description + \"\\n isActive: \" + jsonData[index].isActive + \"\\n isDefault: \" + jsonData[index].isDefault +",
                      "        \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n repayingDebtTypeCode: \" ",
                      "        + expectedObject[index].repayingDebtTypeCode + \"\\n description: \" + ",
                      "        expectedObject[index].description + \"\\n isActive: \" + expectedObject[index].isActive + \"\\n isDefault: \" + expectedObject[index].isDefault;",
                      "        console.log(resultData);",
                      "       ",
                      "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                      "            ",
                      "        }catch(e){",
                      "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                      "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                      "           continue forLoop;",
                      "        } ",
                      "        ",
                      "    }",
                      "",
                      "",
                      "}",
                      "",
                      "pm.test(\"TEST01: Status Code Check\", function() {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"TEST02: Response Header Checks\", function() {",
                      "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "});",
                      "",
                      "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                      "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "});",
                      "",
                      "pm.test(\"TEST04: Response Schema is valid\", function() {",
                      "  pm.expect(tv4.validate(jsonData, schema, true, false)).to.be.true;",
                      "});",
                      "///NEGATIVE TESTS",
                      "function contains(arr, key, val) {",
                      "    var jsonData = true;",
                      "    //console.log(jsonData, \"h3llo\");",
                      "    for (var i = 0; i < data.length; i++) {",
                      "        if(data[i][key] === val) return true;",
                      "    }",
                      "    console.log(jsonData, \"Array is correct\");",
                      "    return false;",
                      "}",
                      "console.log(contains(data, \"codehg3\", 65733));//false (or true if you change === to ==)",
                      "console.log(contains(data, \"narme\", \"F0exed Costs\")); //false",
                      "var jsonData = JSON.parse(responseBody);",
                      "",
                      "pm.test(\"Check if array is empty\", function () {",
                      "     pm.expect(jsonData).to.not.be.empty;",
                      "});",
                      " pm.test(\"Check if string is empty\", function () {",
                      "     pm.expect('description').to.not.be.empty;",
                      "});",
                      "pm.test(\"Check the length of the target\", function () {",
                      "     pm.expect(jsonData).to.not.have.lengthOf(13);",
                      "});",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "9c66593e-e1d7-4317-ab40-a2795796085f",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                      "{\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010,1,1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if(tokenTimestamp){\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if(!expiresInTime){\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "            newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "c1905b3e-9725-4943-b4dd-d0a503072e7b",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "value": "LSimpson",
                    "type": "text"
                  }
                ],
                "url": "{{BaseURL}}/sfs/listitems/residencestatus",
                "description": "Gets all residence statuses type front end select list items"
              },
              "response": [
                {
                  "id": "1c6dc60c-4eaa-4f17-93e7-b864d5865af3",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/residencestatus"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "27b9a1d6-95a0-4571-a71e-891f960528af",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/residencestatus"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "ac1a1870-cae5-41bc-8de9-f839c79befb4",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/listitems/residencestatus"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "[\n {\n  \"residenceStatusCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n },\n {\n  \"residenceStatusCode\": \"<integer>\",\n  \"description\": \"<string>\",\n  \"isDefault\": \"<boolean>\"\n }\n]"
                }
              ]
            }
          ],
          "_postman_id": "a1a8a9ac-3994-45e8-9fe5-b0bfcecdc6d9",
          "_postman_isSubFolder": true
        },
        {
          "name": "consumer",
          "item": [
            {
              "name": "{consumer Id}",
              "item": [
                {
                  "name": "latestcompleted",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "8edd041d-e027-46eb-9d20-d1cfb4b67139",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                          "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                          "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                          "/*var expectedObject = \r",
                          "{\r",
                          "    \"sfsid\": \"1f3b39e1-046d-ea11-8122-005056b57b14\",\r",
                          "    \"groupID\": \"5012e2b4-a56d-463d-b6cc-e5312d50b740\",\r",
                          "    \"dateReceived\": null,\r",
                          "    \"priorityBillsInArrangements\": null,\r",
                          "    \"priorityBillsUpToDate\": null,\r",
                          "    \"statusCode\": 2,\r",
                          "    \"status\": 2,\r",
                          "    \"sfsTypeCode\": 0,\r",
                          "    \"originalSFSID\": \"47b17e66-d669-ea11-8122-005056b57b14\",\r",
                          "    \"copyType\": 1,\r",
                          "    \"copyNotes\": null,\r",
                          "    \"creditors\": null,\r",
                          "    \"expenditures\": null,\r",
                          "    \"incomes\": null,\r",
                          "    \"savings\": null,\r",
                          "    \"consumerDetail\": null,\r",
                          "    \"description\": null\r",
                          "};*/\r",
                          "var Ajv = require('ajv'),\r",
                          "ajv = new Ajv({logger:console}),\r",
                          "schemaResponse = {\r",
                          "    \"required\": [\r",
                          "        \"sfsid\",\r",
                          "        \"groupID\",\r",
                          "        \"dateReceived\",\r",
                          "        \"priorityBillsInArrangements\",\r",
                          "        \"priorityBillsUpToDate\",\r",
                          "        \"statusCode\",\r",
                          "        \"status\",\r",
                          "        \"sfsTypeCode\",\r",
                          "      //  \"originalSFSID\",\r",
                          "      //  \"copyType\",\r",
                          "       // \"copyNotes\",\r",
                          "        \"creditors\",\r",
                          "        \"expenditures\",\r",
                          "        \"incomes\",\r",
                          "        \"savings\",\r",
                          "        \"consumerDetail\",\r",
                          "        \"description\"\r",
                          "    ],\r",
                          "    \"properties\": {\r",
                          "        \"sfsid\": {\r",
                          "            \"$id\": \"#/properties/sfsid\",\r",
                          "            \"type\": \"string\"\r",
                          "        },\r",
                          "        \"groupID\": {\r",
                          "            \"$id\": \"#/properties/groupID\",\r",
                          "            \"type\": \"string\"\r",
                          "        },\r",
                          "        \"dateReceived\": {\r",
                          "            \"$id\": \"#/properties/dateReceived\",\r",
                          "            \"type\": \"null\"\r",
                          "        },\r",
                          "        \"priorityBillsInArrangements\": {\r",
                          "            \"$id\": \"#/properties/priorityBillsInArrangements\",\r",
                          "            \"type\": \"null\"\r",
                          "        },\r",
                          "        \"priorityBillsUpToDate\": {\r",
                          "            \"$id\": \"#/properties/priorityBillsUpToDate\",\r",
                          "            \"type\": \"null\"\r",
                          "        },\r",
                          "        \"statusCode\": {\r",
                          "            \"$id\": \"#/properties/statusCode\",\r",
                          "            \"type\": \"integer\"\r",
                          "        },\r",
                          "        \"status\": {\r",
                          "            \"$id\": \"#/properties/status\",\r",
                          "            \"type\": \"integer\"\r",
                          "        },\r",
                          "        \"sfsTypeCode\": {\r",
                          "            \"$id\": \"#/properties/sfsTypeCode\",\r",
                          "            \"type\": \"integer\"\r",
                          "        },\r",
                          "        \"originalSFSID\": {\r",
                          "            \"$id\": \"#/properties/originalSFSID\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"copyType\": {\r",
                          "            \"$id\": \"#/properties/copyType\",\r",
                          "            \"type\": [\"integer\", \"null\"]\r",
                          "        },\r",
                          "        \"copyNotes\": {\r",
                          "            \"$id\": \"#/properties/copyNotes\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"creditors\": {\r",
                          "            \"$id\": \"#/properties/creditors\",\r",
                          "            \"type\": [\"null\", \"array\"]\r",
                          "        },\r",
                          "        \"expenditures\": {\r",
                          "            \"$id\": \"#/properties/expenditures\",\r",
                          "            \"type\": [\"null\", \"array\"]\r",
                          "        },\r",
                          "        \"incomes\": {\r",
                          "            \"$id\": \"#/properties/incomes\",\r",
                          "            \"type\": [\"null\", \"array\"]\r",
                          "        },\r",
                          "        \"savings\": {\r",
                          "            \"$id\": \"#/properties/savings\",\r",
                          "            \"type\": [\"null\", \"array\"]\r",
                          "        },\r",
                          "        \"consumerDetail\": {\r",
                          "            \"$id\": \"#/properties/consumerDetail\",\r",
                          "            \"type\": [\"object\", \"null\"]\r",
                          "        },\r",
                          "        \"description\": {\r",
                          "            \"$id\": \"#/properties/description\",\r",
                          "            \"type\": [\"null\", \"string\"]\r",
                          "        }\r",
                          "    },\r",
                          "    \"$id\": \"http://example.org/root.json#\",\r",
                          "    \"type\": \"object\",\r",
                          "    \"definitions\": {},\r",
                          "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                          "};\r",
                          "//////////////TESTS\r",
                          "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");\r",
                          "var jsonData = pm.response.json();\r",
                          "var query = pm.request.url.query.all();\r",
                          "pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});\r",
                          "if (data.test_polarity==null || data.test_polarity==1){\r",
                          "\r",
                          "/*//forLoop: \r",
                          "   // for(var index = 0; index < jsonData.length; index++){\r",
                          "     try{   \r",
                          "        pm.expect(jsonData.sfsid).to.equal(expectedObject.sfsid);\r",
                          "        \r",
                          "        \r",
                          "        pm.expect(jsonData[index].consumerID).to.equal(expectedObject[index].consumerID);\r",
                          "        pm.expect(jsonData[index].dateReceived).to.equal(expectedObject[index].dateReceived);\r",
                          "        pm.expect(jsonData[index].priorityBillsInArrangements).to.equal(expectedObject[index].priorityBillsInArrangements);\r",
                          "        pm.expect(jsonData[index].priorityBillsUpToDate).to.equal(expectedObject[index].priorityBillsUpToDate);\r",
                          "        pm.expect(jsonData[index].statusCode).to.equal(expectedObject[index].statusCode);\r",
                          "        pm.expect(jsonData[index].status).to.equal(expectedObject[index].status);\r",
                          "        pm.expect(jsonData[index].sfsTypeCode).to.equal(expectedObject[index].sfsTypeCode);\r",
                          "        pm.expect(jsonData[index].originalSFSID).to.equal(expectedObject[index].originalSFSID);\r",
                          "        pm.expect(jsonData[index].copyType).to.equal(expectedObject[index].copyType);\r",
                          "        pm.expect(jsonData[index].copyNotes).to.equal(expectedObject[index].copyNotes);\r",
                          "        pm.expect(jsonData[index].creditors).to.equal(expectedObject[index].creditors);\r",
                          "        pm.expect(jsonData[index].expenditures).to.equal(expectedObject[index].expenditures);\r",
                          "        pm.expect(jsonData[index].incomes).to.equal(expectedObject[index].incomes);\r",
                          "        pm.expect(jsonData[index].savings).to.equal(expectedObject[index].savings);\r",
                          "        pm.expect(jsonData[index].consumerDetail).to.equal(expectedObject[index].consumerDetail);\r",
                          "        pm.expect(jsonData[index].description).to.equal(expectedObject[index].description);\r",
                          "        */\r",
                          "        \r",
                          "        /*\r",
                          "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +\r",
                          "        \"\\n\\nJsonFile Server data: \" + \"\\n sfsid: \" + jsonData[index].sfsid + \r",
                          "        \"\\n consumerID: \" + jsonData[index].consumerID + \"\\n dateReceived: \" + jsonData[index].dateReceived + \"\\n priorityBillsInArrangements: \" + jsonData[index].priorityBillsInArrangements +\r",
                          "        \"\\n priorityBillsUpToDate: \" + jsonData[index].priorityBillsInArrangements + \"\\n priorityBillsUpToDate: \" + jsonData[index].priorityBillsUpToDate + \"\\n statusCode: \" + jsonData[index].statusCode +\r",
                          "        \"\\n status: \" + jsonData[index].status + \"\\n sfsTypeCode: \" + jsonData[index].sfsTypeCode + \"\\n originalSFSID: \" + jsonData[index].originalSFSID + \"\\n copyType: \" + jsonData[index].copyType +\r",
                          "        \"\\n copyNotes: \" + jsonData[index].copyNotes + \"\\n creditors: \" + jsonData[index].creditors + \"\\n expenditures: \" + jsonData[index].expenditures + \"\\n incomes: \" + jsonData[index].expenditures +\r",
                          "        \"\\n incomes: \" + jsonData[index].incomes + \"\\n savings: \" + jsonData[index].savings + \"\\n consumerDetail: \" + jsonData[index].consumerDetail + \"\\n description: \" + jsonData[index].description +\r",
                          "        \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n sfsid: \" \r",
                          "        + expectedObject[index].sfsid + \"\\n consumerID: \" + expectedObject[index].consumerID + \"\\n dateReceived: \" + expectedObject[index].dateReceived + \"\\n priorityBillsInArrangements: \"  + \r",
                          "        expectedObject[index].priorityBillsInArrangements + \"\\n priorityBillsUpToDate: \" + expectedObject[index].priorityBillsUpToDate + \"\\n statusCode: \" + expectedObject[index].statusCode + \r",
                          "        \"\\n status: \" + expectedObject[index].status + \"\\n sfsTypeCode: \" + expectedObject[index].sfsTypeCode + \"\\n originalSFSID: \" + expectedObject[index].originalSFSID + \"\\n copyType\" +\r",
                          "        expectedObject[index].copyType + \"\\n copyNotes: \" + expectedObject[index].copyNotes + \"\\n creditors: \" + expectedObject[index].creditors + \"\\n expenditures: \" + expectedObject[index].expenditures +\r",
                          "        \"\\n incomes: \" + expectedObject[index].incomes + \"\\n savings: \" + expectedObject[index].savings + \"\\n consumerDetail: \" + expectedObject[index].consumerDetail + \"\\n description: \" + expectedObject[index].description;\r",
                          "        console.log(resultData);\r",
                          "       \r",
                          "       \r",
                          "       console.log(\"Test\" + \"\" + \"data: \" + \" \" +\r",
                          "        \"\\n\\nJsonFile Server data: \" + \"\\n sfsid: \" + jsonData.sfsid);\r",
                          "       \r",
                          "       \r",
                          "        pm.test(\"Test\" + \" \" + \"object\" + \" \" + \" \" + \"PASSED - Expected values are present in response Body\", () => true);\r",
                          "            \r",
                          "        }catch(e){\r",
                          "            pm.test(\"Test\" + \" \" + \" \" + \"object\" + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});\r",
                          "           console.log(\"Test\" + \" \" + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);\r",
                          "           //continue forLoop;\r",
                          "        } \r",
                          "        \r",
                          "\r",
                          "\r",
                          "\r",
                          "\r",
                          "\r",
                          "\r",
                          "\r",
                          "//pm.test(\"TEST01: Data values are correct \", function(){\r",
                          "   // for(var index = 0; index < jsonData.length; index++){\r",
                          "  //  }\r",
                          "//});\r",
                          "\r",
                          "\r",
                          "*/\r",
                          "pm.test(\"TEST01: Status Code Check\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"TEST02: Response Header Checks\", function() {\r",
                          "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', 'Origin', 'Username', '');\r",
                          "});\r",
                          "\r",
                          "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"TEST04: Response Schema is valid\", function() {\r",
                          "  pm.expect(ajv.validate(schemaResponse, jsonData, true, false)).to.be.true;\r",
                          "});\r",
                          "/*\r",
                          "pm.test(\"Incorrect field examaple\", function() {\r",
                          "    var sfsSC = schemaResponse.properties.statusCode;\r",
                          "    var complCode = 2;\r",
                          "    pm.expect(sfsSC).to.equal(complCode);\r",
                          "    console.log(jsonData.toString());\r",
                          "});\r",
                          "*/\r",
                          "\r",
                          "///NEGATIVE TESTS\r",
                          "/*pm.test(\"Incorrect field examaple\", function() {\r",
                          "    jsonData.phoneNuber === \"Red\";\r",
                          "    console.log(phoneNumber);\r",
                          "});*/\r",
                          "pm.test(\"Check if array is empty\", function () {\r",
                          "     pm.expect(\"{{cnsmrlc_id}}\").to.not.be.empty;\r",
                          "});\r",
                          " pm.test(\"Check if string is empty\", function () {\r",
                          "     pm.expect('statusCode').to.not.be.empty;\r",
                          "});\r",
                          "}"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "f879b639-83d5-4ff3-a9ad-3c1d70b2bb97",
                        "exec": [
                          "if (pm.environment.get(\"OAuth_Timestamp\") == null) {\r",
                          "    console.log(\"OAuth timestamp null, check the environment\");\r",
                          "} else {\r",
                          "    var tokenDate = new Date(2010, 1, 1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if (tokenTimestamp) {\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }\r",
                          "    //console.log(\"timestamp is\"+tokenDate);\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if (!expiresInTime) {\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if ((new Date() - tokenDate) >= expiresInTime) {\r",
                          "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                          "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                          "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                          "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "                newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "}\r",
                          "//console.log(\"End of Pre-req script\");\r",
                          "\r",
                          "/*\r",
                          "SET NOCOUNT ON\r",
                          "IF OBJECT_ID('tempdb.dbo.@test', 'U') IS NOT NULL\r",
                          "  DROP TABLE test; \r",
                          "DECLARE @test TABLE\r",
                          "(\r",
                          "    OriginalConsumerID int NULL\r",
                          ");\r",
                          "INSERT INTO @test (OriginalConsumerID) SELECT DISTINCT TOP 5 OriginalConsumerID FROM dbo.SFS\r",
                          "WHERE SFSStatusCode= 2\r",
                          "INSERT INTO @test (OriginalConsumerID) SELECT DISTINCT TOP 5 OriginalConsumerID FROM dbo.SFS\r",
                          "WHERE SFSStatusCode = 1\r",
                          "INSERT INTO @test (OriginalConsumerID) SELECT DISTINCT TOP 5 OriginalConsumerID FROM dbo.SFS\r",
                          "WHERE SFSStatusCode = 0\r",
                          "SELECT * FROM @test\r",
                          "*/"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "8f9aa4d6-d9e3-44f2-8cea-77e3f6306c2b",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}"
                      },
                      {
                        "key": "Correlation-Id",
                        "type": "text",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "Test-User",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{BaseURL}}/sfs/consumer/:consumerId/latestcompleted",
                      "host": [
                        "{{BaseURL}}"
                      ],
                      "path": [
                        "sfs",
                        "consumer",
                        ":consumerId",
                        "latestcompleted"
                      ],
                      "variable": [
                        {
                          "key": "consumerId",
                          "value": "{{cnsmrlc_id}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Gets latest completed SFS for the provided consumer ID"
                  },
                  "response": [
                    {
                      "id": "1b910b62-b642-4ae3-aff2-8b0c4c1b13ad",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/consumer/<uuid>/latestcompleted"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"sfsStatusCode\": \"<integer>\",\n \"sfsTypeCode\": \"<integer>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<string>\",\n \"copyNotes\": \"<string>\",\n \"createdByUser\": \"<string>\",\n \"createdByHostName\": \"<string>\",\n \"createdDateTime\": \"<dateTime>\",\n \"lastModifiedByUser\": \"<string>\",\n \"lastModifiedByHostName\": \"<string>\",\n \"lastModifiedDateTime\": \"<dateTime>\",\n \"rowVersion\": \"<byte>\",\n \"modifiedCount\": \"<integer>\",\n \"originalSFS\": {\n  \"sfsid\": \"<uuid>\",\n  \"consumerID\": \"<long>\",\n  \"dateReceived\": \"<dateTime>\",\n  \"sfsStatusCode\": \"<integer>\",\n  \"sfsTypeCode\": \"<integer>\",\n  \"originalSFSID\": \"<uuid>\",\n  \"copyType\": \"<string>\",\n  \"copyNotes\": \"<string>\",\n  \"createdByUser\": \"<string>\",\n  \"createdByHostName\": \"<string>\",\n  \"createdDateTime\": \"<dateTime>\",\n  \"lastModifiedByUser\": \"<string>\",\n  \"lastModifiedByHostName\": \"<string>\",\n  \"lastModifiedDateTime\": \"<dateTime>\",\n  \"rowVersion\": \"<byte>\",\n  \"modifiedCount\": \"<integer>\",\n  \"originalSFS\": {\n   \"sfsid\": \"<uuid>\",\n   \"consumerID\": \"<long>\",\n   \"dateReceived\": \"<dateTime>\",\n   \"sfsStatusCode\": \"<integer>\",\n   \"sfsTypeCode\": \"<integer>\",\n   \"originalSFSID\": \"<uuid>\",\n   \"copyType\": \"<string>\",\n   \"copyNotes\": \"<string>\",\n   \"createdByUser\": \"<string>\",\n   \"createdByHostName\": \"<string>\",\n   \"createdDateTime\": \"<dateTime>\",\n   \"lastModifiedByUser\": \"<string>\",\n   \"lastModifiedByHostName\": \"<string>\",\n   \"lastModifiedDateTime\": \"<dateTime>\",\n   \"rowVersion\": \"<byte>\",\n   \"modifiedCount\": \"<integer>\",\n   \"originalSFS\": {\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"sfsStatusCode\": \"<integer>\",\n    \"sfsTypeCode\": \"<integer>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<string>\",\n    \"copyNotes\": \"<string>\",\n    \"createdByUser\": \"<string>\",\n    \"createdByHostName\": \"<string>\",\n    \"createdDateTime\": \"<dateTime>\",\n    \"lastModifiedByUser\": \"<string>\",\n    \"lastModifiedByHostName\": \"<string>\",\n    \"lastModifiedDateTime\": \"<dateTime>\",\n    \"rowVersion\": \"<byte>\",\n    \"modifiedCount\": \"<integer>\",\n    \"originalSFS\": {\n     \"sfsid\": \"<uuid>\",\n     \"consumerID\": \"<long>\",\n     \"dateReceived\": \"<dateTime>\",\n     \"sfsStatusCode\": \"<integer>\",\n     \"sfsTypeCode\": \"<integer>\",\n     \"originalSFSID\": \"<uuid>\",\n     \"copyType\": \"<string>\",\n     \"copyNotes\": \"<string>\",\n     \"createdByUser\": \"<string>\",\n     \"createdByHostName\": \"<string>\",\n     \"createdDateTime\": \"<dateTime>\",\n     \"lastModifiedByUser\": \"<string>\",\n     \"lastModifiedByHostName\": \"<string>\",\n     \"lastModifiedDateTime\": \"<dateTime>\",\n     \"rowVersion\": \"<byte>\",\n     \"modifiedCount\": \"<integer>\",\n     \"originalSFS\": {\n      \"sfsid\": \"<uuid>\",\n      \"consumerID\": \"<long>\",\n      \"dateReceived\": \"<dateTime>\",\n      \"sfsStatusCode\": \"<integer>\",\n      \"sfsTypeCode\": \"<integer>\",\n      \"originalSFSID\": \"<uuid>\",\n      \"copyType\": \"<string>\",\n      \"copyNotes\": \"<string>\",\n      \"createdByUser\": \"<string>\",\n      \"createdByHostName\": \"<string>\",\n      \"createdDateTime\": \"<dateTime>\",\n      \"lastModifiedByUser\": \"<string>\",\n      \"lastModifiedByHostName\": \"<string>\",\n      \"lastModifiedDateTime\": \"<dateTime>\",\n      \"rowVersion\": \"<byte>\",\n      \"modifiedCount\": \"<integer>\",\n      \"originalSFS\": {\n       \"sfsid\": \"<uuid>\",\n       \"consumerID\": \"<long>\",\n       \"dateReceived\": \"<dateTime>\",\n       \"sfsStatusCode\": \"<integer>\",\n       \"sfsTypeCode\": \"<integer>\",\n       \"originalSFSID\": \"<uuid>\",\n       \"copyType\": \"<string>\",\n       \"copyNotes\": \"<string>\",\n       \"createdByUser\": \"<string>\",\n       \"createdByHostName\": \"<string>\",\n       \"createdDateTime\": \"<dateTime>\",\n       \"lastModifiedByUser\": \"<string>\",\n       \"lastModifiedByHostName\": \"<string>\",\n       \"lastModifiedDateTime\": \"<dateTime>\",\n       \"rowVersion\": \"<byte>\",\n       \"modifiedCount\": \"<integer>\",\n       \"originalSFS\": {\n        \"sfsid\": \"<uuid>\",\n        \"consumerID\": \"<long>\",\n        \"dateReceived\": \"<dateTime>\",\n        \"sfsStatusCode\": \"<integer>\",\n        \"sfsTypeCode\": \"<integer>\",\n        \"originalSFSID\": \"<uuid>\",\n        \"copyType\": \"<string>\",\n        \"copyNotes\": \"<string>\",\n        \"createdByUser\": \"<string>\",\n        \"createdByHostName\": \"<string>\",\n        \"createdDateTime\": \"<dateTime>\",\n        \"lastModifiedByUser\": \"<string>\",\n        \"lastModifiedByHostName\": \"<string>\",\n        \"lastModifiedDateTime\": \"<dateTime>\",\n        \"rowVersion\": \"<byte>\",\n        \"modifiedCount\": \"<integer>\",\n        \"originalSFS\": {\n         \"sfsid\": \"<uuid>\",\n         \"consumerID\": \"<long>\",\n         \"dateReceived\": \"<dateTime>\",\n         \"sfsStatusCode\": \"<integer>\",\n         \"sfsTypeCode\": \"<integer>\",\n         \"originalSFSID\": \"<uuid>\",\n         \"copyType\": \"<string>\",\n         \"copyNotes\": \"<string>\",\n         \"createdByUser\": \"<string>\",\n         \"createdByHostName\": \"<string>\",\n         \"createdDateTime\": \"<dateTime>\",\n         \"lastModifiedByUser\": \"<string>\",\n         \"lastModifiedByHostName\": \"<string>\",\n         \"lastModifiedDateTime\": \"<dateTime>\",\n         \"rowVersion\": \"<byte>\",\n         \"modifiedCount\": \"<integer>\",\n         \"originalSFS\": {\n          \"sfsid\": \"<uuid>\",\n          \"consumerID\": \"<long>\",\n          \"dateReceived\": \"<dateTime>\",\n          \"sfsStatusCode\": \"<integer>\",\n          \"sfsTypeCode\": \"<integer>\",\n          \"originalSFSID\": \"<uuid>\",\n          \"copyType\": \"<string>\",\n          \"copyNotes\": \"<string>\",\n          \"createdByUser\": \"<string>\",\n          \"createdByHostName\": \"<string>\",\n          \"createdDateTime\": \"<dateTime>\",\n          \"lastModifiedByUser\": \"<string>\",\n          \"lastModifiedByHostName\": \"<string>\",\n          \"lastModifiedDateTime\": \"<dateTime>\",\n          \"rowVersion\": \"<byte>\",\n          \"modifiedCount\": \"<integer>\",\n          \"originalSFS\": {\n           \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sfsStatus\": {\n           \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sfsType\": {\n           \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sfsCopies\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsDescriptions\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsConsumerDetails\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsCreditors\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsExpenditures\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsIncomes\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsSavings\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ]\n         },\n         \"sfsStatus\": {\n          \"sfsStatusCode\": \"<integer>\",\n          \"name\": \"<string>\"\n         },\n         \"sfsType\": {\n          \"sfsTypeCode\": \"<integer>\",\n          \"name\": \"<string>\"\n         },\n         \"sfsCopies\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsDescriptions\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsConsumerDetails\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsCreditors\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsExpenditures\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsIncomes\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsSavings\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ]\n        },\n        \"sfsStatus\": {\n         \"sfsStatusCode\": \"<integer>\",\n         \"name\": \"<string>\"\n        },\n        \"sfsType\": {\n         \"sfsTypeCode\": \"<integer>\",\n         \"name\": \"<string>\"\n        },\n        \"sfsCopies\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsDescriptions\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsConsumerDetails\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsCreditors\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsExpenditures\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsIncomes\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsSavings\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ]\n       },\n       \"sfsStatus\": {\n        \"sfsStatusCode\": \"<integer>\",\n        \"name\": \"<string>\"\n       },\n       \"sfsType\": {\n        \"sfsTypeCode\": \"<integer>\",\n        \"name\": \"<string>\"\n       },\n       \"sfsCopies\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsDescriptions\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsConsumerDetails\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsCreditors\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsExpenditures\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsIncomes\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsSavings\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ]\n      },\n      \"sfsStatus\": {\n       \"sfsStatusCode\": \"<integer>\",\n       \"name\": \"<string>\"\n      },\n      \"sfsType\": {\n       \"sfsTypeCode\": \"<integer>\",\n       \"name\": \"<string>\"\n      },\n      \"sfsCopies\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsDescriptions\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsConsumerDetails\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsCreditors\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsExpenditures\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsIncomes\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsSavings\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ]\n     },\n     \"sfsStatus\": {\n      \"sfsStatusCode\": \"<integer>\",\n      \"name\": \"<string>\"\n     },\n     \"sfsType\": {\n      \"sfsTypeCode\": \"<integer>\",\n      \"name\": \"<string>\"\n     },\n     \"sfsCopies\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsDescriptions\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsConsumerDetails\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsCreditors\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsExpenditures\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsIncomes\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsSavings\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ]\n    },\n    \"sfsStatus\": {\n     \"sfsStatusCode\": \"<integer>\",\n     \"name\": \"<string>\"\n    },\n    \"sfsType\": {\n     \"sfsTypeCode\": \"<integer>\",\n     \"name\": \"<string>\"\n    },\n    \"sfsCopies\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsDescriptions\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsConsumerDetails\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsCreditors\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsExpenditures\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsIncomes\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsSavings\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ]\n   },\n   \"sfsStatus\": {\n    \"sfsStatusCode\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   \"sfsType\": {\n    \"sfsTypeCode\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   \"sfsCopies\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsDescriptions\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsConsumerDetails\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsCreditors\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsExpenditures\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsIncomes\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsSavings\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ]\n  },\n  \"sfsStatus\": {\n   \"sfsStatusCode\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  \"sfsType\": {\n   \"sfsTypeCode\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  \"sfsCopies\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsDescriptions\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsConsumerDetails\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsCreditors\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsExpenditures\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsIncomes\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsSavings\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ]\n },\n \"sfsStatus\": {\n  \"sfsStatusCode\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"sfsType\": {\n  \"sfsTypeCode\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"sfsCopies\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsDescriptions\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsConsumerDetails\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsCreditors\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsExpenditures\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsIncomes\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsSavings\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ]\n}"
                    },
                    {
                      "id": "ccb6d406-6143-468a-9d6c-81c17c6091a6",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/consumer/<uuid>/latestcompleted"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "f6c589dd-6e5e-468a-a1a6-d83eab54840a",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/consumer/<uuid>/latestcompleted"
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<object>\""
                    }
                  ]
                },
                {
                  "name": "ownerwithsame",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "ffbbdd8b-aa2f-4edf-a94b-19bf6c84e90d",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);",
                          "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                          "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                          "console.log(\"Average response time: \" + responseTime + \"ms\");",
                          "",
                          "var Ajv = require('ajv'),",
                          "ajv = new Ajv ({logger:console}),",
                          "schema =",
                          "{",
                          "    \"items\": {",
                          "        \"required\": [",
                          "            \"consumerAccountOwner\",",
                          "            \"sfsid\",",
                          "            \"copyNotes\"",
                          "        ],",
                          "        \"properties\": {",
                          "            \"consumerAccountOwner\": {",
                          "                \"required\": [",
                          "                    \"consumerAccountOwnerID\",",
                          "                    \"consumerID\",",
                          "                    \"legacyID\",",
                          "                    \"groupID\",",
                          "                    \"consumerName\",",
                          "                    \"consumerBirthDate\",",
                          "                    \"ownership\",",
                          "                    \"type\",",
                          "                    \"attachDate\"",
                          "                ],",
                          "                \"properties\": {",
                          "                    \"consumerAccountOwnerID\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/consumerAccountOwnerID\",",
                          "                        \"type\": \"integer\"",
                          "                    },",
                          "                    \"consumerID\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/consumerID\",",
                          "                        \"type\": \"integer\"",
                          "                    },",
                          "                    \"legacyID\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/legacyID\",",
                          "                        \"type\": \"string\"",
                          "                    },",
                          "                    \"groupID\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/groupID\",",
                          "                        \"type\": \"string\"",
                          "                    },",
                          "                    \"consumerName\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/consumerName\",",
                          "                        \"type\": \"string\"",
                          "                    },",
                          "                    \"consumerBirthDate\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/consumerBirthDate\",",
                          "                        \"type\": [\"string\", \"null\"]",
                          "                        },",
                          "                    \"ownership\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/ownership\",",
                          "                        \"type\": \"string\"",
                          "                    },",
                          "                    \"type\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/type\",",
                          "                        \"type\": \"null\"",
                          "                    },",
                          "                    \"attachDate\": {",
                          "                        \"$id\": \"#/items/properties/consumerAccountOwner/properties/attachDate\",",
                          "                        \"type\": \"string\"",
                          "                    }",
                          "                },",
                          "                \"$id\": \"#/items/properties/consumerAccountOwner\",",
                          "                \"type\": \"object\"",
                          "            },",
                          "            \"sfsid\": {",
                          "                \"$id\": \"#/items/properties/sfsid\",",
                          "                \"type\": [\"string\", \"null\"]",
                          "            },",
                          "            \"copyNotes\": {",
                          "                \"$id\": \"#/items/properties/copyNotes\",",
                          "                \"type\": \"null\"",
                          "            }",
                          "        },",
                          "        \"$id\": \"#/items\",",
                          "        \"type\": \"object\"",
                          "    },",
                          "    \"$id\": \"http://example.org/root.json#\",",
                          "    \"type\": \"array\",",
                          "    \"definitions\": {},",
                          "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                          "};",
                          "",
                          "",
                          "",
                          "pm.test(\"TEST01: Status Code Check\", function() {",
                          "    pm.response.to.have.status(200);",
                          "});",
                          "",
                          "pm.test(\"TEST02: Response Header Checks\", function() {",
                          "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                          "});",
                          "",
                          "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                          "});",
                          "",
                          "pm.test(\"TEST04: Response Schema is valid\", function() {",
                          "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                          "});",
                          "",
                          "pm.test(\"Check if array is empty\", function () {",
                          "     pm.expect(jsonData).to.not.be.empty;",
                          "});",
                          " pm.test(\"Check if string is empty\", function () {",
                          "     pm.expect('consumerID').to.not.be.empty;",
                          "});",
                          " pm.test(\"Check if string is empty\", function () {",
                          "     pm.expect('consumerAccountOwnerID').to.not.be.empty;",
                          "});",
                          "pm.test(\"Check the length of the target\", function () {",
                          "     pm.expect(jsonData).to.not.have.lengthOf(13);",
                          "});",
                          "",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "3d13dd11-5ca7-4c7d-a622-d1f8f1232a29",
                        "exec": [
                          "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                          "{\r",
                          "    console.log(\"OAuth timestamp null, check the environment\");\r",
                          "} else {\r",
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }\r",
                          "    //console.log(\"timestamp is\"+tokenDate);\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                          "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                          "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                          "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "}\r",
                          "//console.log(\"End of Pre-req script\");\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "5f7b5bf1-c16f-412a-a981-3be41a0bdc61",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}"
                      },
                      {
                        "key": "Correlation-Id",
                        "type": "text",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "Test-User",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{BaseURL}}/sfs//consumer/:consumerID/account/:accountID/sfs/:sfsId/owners",
                      "host": [
                        "{{BaseURL}}"
                      ],
                      "path": [
                        "sfs",
                        "",
                        "consumer",
                        ":consumerID",
                        "account",
                        ":accountID",
                        "sfs",
                        ":sfsId",
                        "owners"
                      ],
                      "query": [
                        {
                          "key": "consumerId",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        },
                        {
                          "key": "accountId",
                          "value": "",
                          "type": "text",
                          "disabled": true
                        }
                      ],
                      "variable": [
                        {
                          "key": "consumerID",
                          "value": "1583440",
                          "type": "string"
                        },
                        {
                          "key": "accountID",
                          "value": "1566125",
                          "type": "string"
                        },
                        {
                          "key": "sfsId",
                          "value": "cac0f2a3-da5c-42b3-8b1a-3a0e73dc28ae",
                          "type": "string",
                          "description": "\n\n"
                        }
                      ]
                    },
                    "description": "Gets the account owner attached to the same sfs"
                  },
                  "response": [
                    {
                      "id": "55ae135c-32ed-4906-9e68-a58cde672c2d",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/consumer/<long>/account/<long>/sfs/<string>/owners"
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<object>\""
                    },
                    {
                      "id": "86c5c631-7c1d-403c-bf74-3d20e20894c9",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/consumer/<long>/account/<long>/sfs/<string>/owners"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"sfsStatusCode\": \"<integer>\",\n \"sfsTypeCode\": \"<integer>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<string>\",\n \"copyNotes\": \"<string>\",\n \"createdByUser\": \"<string>\",\n \"createdByHostName\": \"<string>\",\n \"createdDateTime\": \"<dateTime>\",\n \"lastModifiedByUser\": \"<string>\",\n \"lastModifiedByHostName\": \"<string>\",\n \"lastModifiedDateTime\": \"<dateTime>\",\n \"rowVersion\": \"<byte>\",\n \"modifiedCount\": \"<integer>\",\n \"originalSFS\": {\n  \"sfsid\": \"<uuid>\",\n  \"consumerID\": \"<long>\",\n  \"dateReceived\": \"<dateTime>\",\n  \"sfsStatusCode\": \"<integer>\",\n  \"sfsTypeCode\": \"<integer>\",\n  \"originalSFSID\": \"<uuid>\",\n  \"copyType\": \"<string>\",\n  \"copyNotes\": \"<string>\",\n  \"createdByUser\": \"<string>\",\n  \"createdByHostName\": \"<string>\",\n  \"createdDateTime\": \"<dateTime>\",\n  \"lastModifiedByUser\": \"<string>\",\n  \"lastModifiedByHostName\": \"<string>\",\n  \"lastModifiedDateTime\": \"<dateTime>\",\n  \"rowVersion\": \"<byte>\",\n  \"modifiedCount\": \"<integer>\",\n  \"originalSFS\": {\n   \"sfsid\": \"<uuid>\",\n   \"consumerID\": \"<long>\",\n   \"dateReceived\": \"<dateTime>\",\n   \"sfsStatusCode\": \"<integer>\",\n   \"sfsTypeCode\": \"<integer>\",\n   \"originalSFSID\": \"<uuid>\",\n   \"copyType\": \"<string>\",\n   \"copyNotes\": \"<string>\",\n   \"createdByUser\": \"<string>\",\n   \"createdByHostName\": \"<string>\",\n   \"createdDateTime\": \"<dateTime>\",\n   \"lastModifiedByUser\": \"<string>\",\n   \"lastModifiedByHostName\": \"<string>\",\n   \"lastModifiedDateTime\": \"<dateTime>\",\n   \"rowVersion\": \"<byte>\",\n   \"modifiedCount\": \"<integer>\",\n   \"originalSFS\": {\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"sfsStatusCode\": \"<integer>\",\n    \"sfsTypeCode\": \"<integer>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<string>\",\n    \"copyNotes\": \"<string>\",\n    \"createdByUser\": \"<string>\",\n    \"createdByHostName\": \"<string>\",\n    \"createdDateTime\": \"<dateTime>\",\n    \"lastModifiedByUser\": \"<string>\",\n    \"lastModifiedByHostName\": \"<string>\",\n    \"lastModifiedDateTime\": \"<dateTime>\",\n    \"rowVersion\": \"<byte>\",\n    \"modifiedCount\": \"<integer>\",\n    \"originalSFS\": {\n     \"sfsid\": \"<uuid>\",\n     \"consumerID\": \"<long>\",\n     \"dateReceived\": \"<dateTime>\",\n     \"sfsStatusCode\": \"<integer>\",\n     \"sfsTypeCode\": \"<integer>\",\n     \"originalSFSID\": \"<uuid>\",\n     \"copyType\": \"<string>\",\n     \"copyNotes\": \"<string>\",\n     \"createdByUser\": \"<string>\",\n     \"createdByHostName\": \"<string>\",\n     \"createdDateTime\": \"<dateTime>\",\n     \"lastModifiedByUser\": \"<string>\",\n     \"lastModifiedByHostName\": \"<string>\",\n     \"lastModifiedDateTime\": \"<dateTime>\",\n     \"rowVersion\": \"<byte>\",\n     \"modifiedCount\": \"<integer>\",\n     \"originalSFS\": {\n      \"sfsid\": \"<uuid>\",\n      \"consumerID\": \"<long>\",\n      \"dateReceived\": \"<dateTime>\",\n      \"sfsStatusCode\": \"<integer>\",\n      \"sfsTypeCode\": \"<integer>\",\n      \"originalSFSID\": \"<uuid>\",\n      \"copyType\": \"<string>\",\n      \"copyNotes\": \"<string>\",\n      \"createdByUser\": \"<string>\",\n      \"createdByHostName\": \"<string>\",\n      \"createdDateTime\": \"<dateTime>\",\n      \"lastModifiedByUser\": \"<string>\",\n      \"lastModifiedByHostName\": \"<string>\",\n      \"lastModifiedDateTime\": \"<dateTime>\",\n      \"rowVersion\": \"<byte>\",\n      \"modifiedCount\": \"<integer>\",\n      \"originalSFS\": {\n       \"sfsid\": \"<uuid>\",\n       \"consumerID\": \"<long>\",\n       \"dateReceived\": \"<dateTime>\",\n       \"sfsStatusCode\": \"<integer>\",\n       \"sfsTypeCode\": \"<integer>\",\n       \"originalSFSID\": \"<uuid>\",\n       \"copyType\": \"<string>\",\n       \"copyNotes\": \"<string>\",\n       \"createdByUser\": \"<string>\",\n       \"createdByHostName\": \"<string>\",\n       \"createdDateTime\": \"<dateTime>\",\n       \"lastModifiedByUser\": \"<string>\",\n       \"lastModifiedByHostName\": \"<string>\",\n       \"lastModifiedDateTime\": \"<dateTime>\",\n       \"rowVersion\": \"<byte>\",\n       \"modifiedCount\": \"<integer>\",\n       \"originalSFS\": {\n        \"sfsid\": \"<uuid>\",\n        \"consumerID\": \"<long>\",\n        \"dateReceived\": \"<dateTime>\",\n        \"sfsStatusCode\": \"<integer>\",\n        \"sfsTypeCode\": \"<integer>\",\n        \"originalSFSID\": \"<uuid>\",\n        \"copyType\": \"<string>\",\n        \"copyNotes\": \"<string>\",\n        \"createdByUser\": \"<string>\",\n        \"createdByHostName\": \"<string>\",\n        \"createdDateTime\": \"<dateTime>\",\n        \"lastModifiedByUser\": \"<string>\",\n        \"lastModifiedByHostName\": \"<string>\",\n        \"lastModifiedDateTime\": \"<dateTime>\",\n        \"rowVersion\": \"<byte>\",\n        \"modifiedCount\": \"<integer>\",\n        \"originalSFS\": {\n         \"sfsid\": \"<uuid>\",\n         \"consumerID\": \"<long>\",\n         \"dateReceived\": \"<dateTime>\",\n         \"sfsStatusCode\": \"<integer>\",\n         \"sfsTypeCode\": \"<integer>\",\n         \"originalSFSID\": \"<uuid>\",\n         \"copyType\": \"<string>\",\n         \"copyNotes\": \"<string>\",\n         \"createdByUser\": \"<string>\",\n         \"createdByHostName\": \"<string>\",\n         \"createdDateTime\": \"<dateTime>\",\n         \"lastModifiedByUser\": \"<string>\",\n         \"lastModifiedByHostName\": \"<string>\",\n         \"lastModifiedDateTime\": \"<dateTime>\",\n         \"rowVersion\": \"<byte>\",\n         \"modifiedCount\": \"<integer>\",\n         \"originalSFS\": {\n          \"sfsid\": \"<uuid>\",\n          \"consumerID\": \"<long>\",\n          \"dateReceived\": \"<dateTime>\",\n          \"sfsStatusCode\": \"<integer>\",\n          \"sfsTypeCode\": \"<integer>\",\n          \"originalSFSID\": \"<uuid>\",\n          \"copyType\": \"<string>\",\n          \"copyNotes\": \"<string>\",\n          \"createdByUser\": \"<string>\",\n          \"createdByHostName\": \"<string>\",\n          \"createdDateTime\": \"<dateTime>\",\n          \"lastModifiedByUser\": \"<string>\",\n          \"lastModifiedByHostName\": \"<string>\",\n          \"lastModifiedDateTime\": \"<dateTime>\",\n          \"rowVersion\": \"<byte>\",\n          \"modifiedCount\": \"<integer>\",\n          \"originalSFS\": {\n           \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sfsStatus\": {\n           \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sfsType\": {\n           \"value\": \"<Error: Too many levels of nesting to fake this schema>\"\n          },\n          \"sfsCopies\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsDescriptions\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsConsumerDetails\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsCreditors\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsExpenditures\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsIncomes\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ],\n          \"sfsSavings\": [\n           \"schema type not provided\",\n           \"schema type not provided\"\n          ]\n         },\n         \"sfsStatus\": {\n          \"sfsStatusCode\": \"<integer>\",\n          \"name\": \"<string>\"\n         },\n         \"sfsType\": {\n          \"sfsTypeCode\": \"<integer>\",\n          \"name\": \"<string>\"\n         },\n         \"sfsCopies\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsDescriptions\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsConsumerDetails\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsCreditors\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsExpenditures\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsIncomes\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ],\n         \"sfsSavings\": [\n          \"schema type not provided\",\n          \"schema type not provided\"\n         ]\n        },\n        \"sfsStatus\": {\n         \"sfsStatusCode\": \"<integer>\",\n         \"name\": \"<string>\"\n        },\n        \"sfsType\": {\n         \"sfsTypeCode\": \"<integer>\",\n         \"name\": \"<string>\"\n        },\n        \"sfsCopies\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsDescriptions\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsConsumerDetails\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsCreditors\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsExpenditures\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsIncomes\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ],\n        \"sfsSavings\": [\n         \"schema type not provided\",\n         \"schema type not provided\"\n        ]\n       },\n       \"sfsStatus\": {\n        \"sfsStatusCode\": \"<integer>\",\n        \"name\": \"<string>\"\n       },\n       \"sfsType\": {\n        \"sfsTypeCode\": \"<integer>\",\n        \"name\": \"<string>\"\n       },\n       \"sfsCopies\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsDescriptions\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsConsumerDetails\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsCreditors\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsExpenditures\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsIncomes\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ],\n       \"sfsSavings\": [\n        \"schema type not provided\",\n        \"schema type not provided\"\n       ]\n      },\n      \"sfsStatus\": {\n       \"sfsStatusCode\": \"<integer>\",\n       \"name\": \"<string>\"\n      },\n      \"sfsType\": {\n       \"sfsTypeCode\": \"<integer>\",\n       \"name\": \"<string>\"\n      },\n      \"sfsCopies\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsDescriptions\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsConsumerDetails\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsCreditors\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsExpenditures\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsIncomes\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ],\n      \"sfsSavings\": [\n       \"schema type not provided\",\n       \"schema type not provided\"\n      ]\n     },\n     \"sfsStatus\": {\n      \"sfsStatusCode\": \"<integer>\",\n      \"name\": \"<string>\"\n     },\n     \"sfsType\": {\n      \"sfsTypeCode\": \"<integer>\",\n      \"name\": \"<string>\"\n     },\n     \"sfsCopies\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsDescriptions\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsConsumerDetails\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsCreditors\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsExpenditures\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsIncomes\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ],\n     \"sfsSavings\": [\n      \"schema type not provided\",\n      \"schema type not provided\"\n     ]\n    },\n    \"sfsStatus\": {\n     \"sfsStatusCode\": \"<integer>\",\n     \"name\": \"<string>\"\n    },\n    \"sfsType\": {\n     \"sfsTypeCode\": \"<integer>\",\n     \"name\": \"<string>\"\n    },\n    \"sfsCopies\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsDescriptions\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsConsumerDetails\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsCreditors\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsExpenditures\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsIncomes\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ],\n    \"sfsSavings\": [\n     \"schema type not provided\",\n     \"schema type not provided\"\n    ]\n   },\n   \"sfsStatus\": {\n    \"sfsStatusCode\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   \"sfsType\": {\n    \"sfsTypeCode\": \"<integer>\",\n    \"name\": \"<string>\"\n   },\n   \"sfsCopies\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsDescriptions\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsConsumerDetails\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsCreditors\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsExpenditures\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsIncomes\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ],\n   \"sfsSavings\": [\n    \"schema type not provided\",\n    \"schema type not provided\"\n   ]\n  },\n  \"sfsStatus\": {\n   \"sfsStatusCode\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  \"sfsType\": {\n   \"sfsTypeCode\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  \"sfsCopies\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsDescriptions\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsConsumerDetails\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsCreditors\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsExpenditures\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsIncomes\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ],\n  \"sfsSavings\": [\n   \"schema type not provided\",\n   \"schema type not provided\"\n  ]\n },\n \"sfsStatus\": {\n  \"sfsStatusCode\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"sfsType\": {\n  \"sfsTypeCode\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n \"sfsCopies\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsDescriptions\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsConsumerDetails\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsCreditors\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsExpenditures\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsIncomes\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ],\n \"sfsSavings\": [\n  \"schema type not provided\",\n  \"schema type not provided\"\n ]\n}"
                    },
                    {
                      "id": "d8c72b0f-01c8-4d0f-9c82-b6f027b9e780",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/consumer/<long>/account/<long>/sfs/<string>/owners"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                }
              ],
              "_postman_id": "79b56893-1efa-4536-86ba-9f8b35050875",
              "_postman_isSubFolder": true
            },
            {
              "name": "create",
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7ba6bd4f-d3a4-4746-a085-086e9ba51247",
                    "exec": [
                      "var jsonData = JSON.parse(responseBody);",
                      "pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));",
                      "pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));",
                      "console.log(\"Average response time: \" + responseTime + \"ms\");",
                      "var expectedObject = {",
                      "    \"sfsid\": null,",
                      "    \"groupID\": null,",
                      "    \"consumerID\": \"{{cnsmrlc_id}}\",",
                      "    \"dateReceived\": null,",
                      "    \"statusCode\": 0,",
                      "    \"originalSFSID\": null,",
                      "    \"copyType\": null,",
                      "    \"copyNotes\": null,",
                      "    \"description\": {",
                      "        \"sfsDescriptionID\": null,",
                      "        \"value\": null",
                      "    },",
                      "    \"consumerDetail\": {",
                      "        \"sfsConsumerDetailID\": null,",
                      "        \"outstandingDebt\": null,",
                      "        \"numberInHousehold\": 1,",
                      "        \"numberOfChildrenUnder16\": 0,",
                      "        \"numberOfChildren16To18\": 0,",
                      "        \"numberOfVehicles\": 0,",
                      "        \"householdTypeCode\": 7,",
                      "        \"householdContributorCode\": null,",
                      "        \"residenceStatusCode\": 3,",
                      "        \"nameOfEmployer\": null,",
                      "        \"employmentStatusCode\": 1,",
                      "        \"partnersEmploymentStatusCode\": 1,",
                      "        \"houseContributorEmploymentStatusCode\": 1,",
                      "        \"isInPaidEmployment\": null,",
                      "        \"isPartnerInPaidEmployment\": null,",
                      "        \"isHouseContributorInPaidEmployment\": null,",
                      "        \"propertyValue\": 0.0,",
                      "        \"mortgageAmount\": 0.0,",
                      "        \"repayingDebtTypeCode\": null,",
                      "        \"doYouHaveOutstandingDebt\": null,",
                      "        \"doYouReceivePension\": null,",
                      "        \"doYouReceiveChildSupport\": null,",
                      "        \"doYouReceiveBenefits\": null,",
                      "        \"otherDetails\": null,",
                      "        \"doesAnyoneElseProvideIncome\": null,",
                      "        \"doHouseContributorsHaveBenefits\": null,",
                      "        \"areHouseContributorsInPaydEmployment\": null",
                      "    },",
                      "    \"creditors\": [",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 5,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 6,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 4,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 1,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 8,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 2,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 3,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 7,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsCreditorID\": null,",
                      "            \"creditorTypeCode\": 9,",
                      "            \"name\": null,",
                      "            \"totalBalance\": 0.0,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        }",
                      "    ],",
                      "    \"expenditures\": [",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 7,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 1,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 3,",
                      "            \"expenditureTypeCode\": 16,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 5,",
                      "            \"expenditureTypeCode\": 25,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 6,",
                      "            \"expenditureTypeCode\": 31,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 4,",
                      "            \"expenditureTypeCode\": 22,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 4,",
                      "            \"expenditureTypeCode\": 23,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 6,",
                      "            \"expenditureTypeCode\": 32,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 5,",
                      "            \"expenditureTypeCode\": 26,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 3,",
                      "            \"expenditureTypeCode\": 17,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 2,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 8,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 9,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 3,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 3,",
                      "            \"expenditureTypeCode\": 18,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 5,",
                      "            \"expenditureTypeCode\": 27,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 6,",
                      "            \"expenditureTypeCode\": 33,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 4,",
                      "            \"expenditureTypeCode\": 24,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 5,",
                      "            \"expenditureTypeCode\": 28,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 3,",
                      "            \"expenditureTypeCode\": 19,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 4,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 10,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 11,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 5,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 3,",
                      "            \"expenditureTypeCode\": 20,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 5,",
                      "            \"expenditureTypeCode\": 29,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 5,",
                      "            \"expenditureTypeCode\": 30,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 3,",
                      "            \"expenditureTypeCode\": 21,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 6,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 12,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 13,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 34,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 1,",
                      "            \"expenditureTypeCode\": 35,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": false,",
                      "            \"inArrangement\": true",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 14,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        },",
                      "        {",
                      "            \"sfsExpenditureID\": null,",
                      "            \"expenditureGroupCode\": 2,",
                      "            \"expenditureTypeCode\": 15,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null,",
                      "            \"inArrears\": null,",
                      "            \"inArrangement\": null",
                      "        }",
                      "    ],",
                      "    \"incomes\": [",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 1,",
                      "            \"incomeTypeCode\": 1,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 1,",
                      "            \"incomeTypeCode\": 2,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 1,",
                      "            \"incomeTypeCode\": 3,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 1,",
                      "            \"incomeTypeCode\": 4,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 2,",
                      "            \"incomeTypeCode\": 5,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 2,",
                      "            \"incomeTypeCode\": 6,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 2,",
                      "            \"incomeTypeCode\": 7,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 2,",
                      "            \"incomeTypeCode\": 8,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        },",
                      "        {",
                      "            \"sfsIncomeID\": null,",
                      "            \"incomeGroupCode\": 2,",
                      "            \"incomeTypeCode\": 9,",
                      "            \"name\": null,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        }",
                      "    ],",
                      "    \"savings\": [",
                      "        {",
                      "            \"sfsSavingID\": null,",
                      "            \"savingTypeCode\": 1,",
                      "            \"amount\": 0.0,",
                      "            \"frequencyCode\": 4,",
                      "            \"notes\": null",
                      "        }",
                      "    ],",
                      "    \"Correlation-Id\": null,",
                      "    \"Operation\": null,",
                      "    \"Origin\": null,",
                      "    \"Cache-Control\": null,",
                      "    \"Authorization\": null,",
                      "    \"Username\": null",
                      "};",
                      "var Ajv = require('ajv'),",
                      "    ajv = new Ajv({ logger: console }),",
                      "    schema = {",
                      "        \"required\": [",
                      "            \"sfsid\",",
                      "            \"groupID\",",
                      "            \"consumerID\",",
                      "            \"dateReceived\",",
                      "            \"statusCode\",",
                      "            \"originalSFSID\",",
                      "            \"copyType\",",
                      "            \"copyNotes\",",
                      "            \"description\",",
                      "            \"consumerDetail\",",
                      "            \"creditors\",",
                      "            \"expenditures\",",
                      "            \"incomes\",",
                      "            \"savings\",",
                      "            \"Correlation-Id\",",
                      "            \"Operation\",",
                      "            \"Origin\",",
                      "            \"Cache-Control\",",
                      "            \"Authorization\",",
                      "            \"Username\"",
                      "        ],",
                      "        \"properties\": {",
                      "            \"sfsid\": {",
                      "                \"$id\": \"#/properties/sfsid\",",
                      "                \"type\": [\"string\", \"null\"]",
                      "                            },",
                      "            \"groupID\": {",
                      "                \"$id\": \"#/properties/groupID\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"consumerID\": {",
                      "                \"$id\": \"#/properties/consumerID\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"dateReceived\": {",
                      "                \"$id\": \"#/properties/dateReceived\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"statusCode\": {",
                      "                \"$id\": \"#/properties/statusCode\",",
                      "                \"type\": \"integer\"",
                      "            },",
                      "            \"originalSFSID\": {",
                      "                \"$id\": \"#/properties/originalSFSID\",",
                      "                \"type\": [\"null\", \"string\"]",
                      "            },",
                      "            \"copyType\": {",
                      "                \"$id\": \"#/properties/copyType\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"copyNotes\": {",
                      "                \"$id\": \"#/properties/copyNotes\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"description\": {",
                      "                \"required\": [",
                      "                    \"sfsDescriptionID\",",
                      "                    \"value\"",
                      "                ],",
                      "                \"properties\": {",
                      "                    \"sfsDescriptionID\": {",
                      "                        \"$id\": \"#/properties/description/properties/sfsDescriptionID\",",
                      "                        \"type\": [\"string\", \"null\"]",
                      "                    },",
                      "                    \"value\": {",
                      "                        \"$id\": \"#/properties/description/properties/value\",",
                      "                        \"type\": [\"string\", \"null\"]",
                      "                    }",
                      "                },",
                      "                \"$id\": \"#/properties/description\",",
                      "                \"type\": [\"object\", \"string\"]",
                      "            },",
                      "            \"consumerDetail\": {",
                      "                \"required\": [",
                      "                    \"sfsConsumerDetailID\",",
                      "                    \"outstandingDebt\",",
                      "                    \"numberInHousehold\",",
                      "                    \"numberOfChildrenUnder16\",",
                      "                    \"numberOfChildren16To18\",",
                      "                    \"numberOfVehicles\",",
                      "                    \"householdTypeCode\",",
                      "                    \"householdContributorCode\",",
                      "                    \"residenceStatusCode\",",
                      "                    \"nameOfEmployer\",",
                      "                    \"employmentStatusCode\",",
                      "                    \"partnersEmploymentStatusCode\",",
                      "                    \"houseContributorEmploymentStatusCode\",",
                      "                    \"isInPaidEmployment\",",
                      "                    \"isPartnerInPaidEmployment\",",
                      "                    \"isHouseContributorInPaidEmployment\",",
                      "                    \"propertyValue\",",
                      "                    \"mortgageAmount\",",
                      "                    \"repayingDebtTypeCode\",",
                      "                    \"doYouHaveOutstandingDebt\",",
                      "                    \"doYouReceivePension\",",
                      "                    \"doYouReceiveChildSupport\",",
                      "                    \"doYouReceiveBenefits\",",
                      "                    \"otherDetails\",",
                      "                    \"doesAnyoneElseProvideIncome\",",
                      "                    \"doHouseContributorsHaveBenefits\",",
                      "                    \"areHouseContributorsInPaydEmployment\"",
                      "                ],",
                      "                \"properties\": {",
                      "                    \"sfsConsumerDetailID\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/sfsConsumerDetailID\",",
                      "                        \"type\": [\"null\", \"string\"]",
                      "                    },",
                      "                    \"outstandingDebt\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/outstandingDebt\",",
                      "                        \"type\": [\"null\", \"boolean\", \"integer\"]",
                      "                    },",
                      "                    \"numberInHousehold\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/numberInHousehold\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"numberOfChildrenUnder16\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/numberOfChildrenUnder16\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"numberOfChildren16To18\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/numberOfChildren16To18\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"numberOfVehicles\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/numberOfVehicles\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"householdTypeCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/householdTypeCode\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"householdContributorCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/householdContributorCode\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"residenceStatusCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/residenceStatusCode\",",
                      "                        \"type\": \"integer\"",
                      "                    },",
                      "                    \"nameOfEmployer\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/nameOfEmployer\",",
                      "                        \"type\": [\"string\", \"null\"]",
                      "                    },",
                      "                    \"employmentStatusCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/employmentStatusCode\",",
                      "                        \"type\": \"integer\"",
                      "                    },",
                      "                    \"partnersEmploymentStatusCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/partnersEmploymentStatusCode\",",
                      "                        \"type\": \"integer\"",
                      "                    },",
                      "                    \"houseContributorEmploymentStatusCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/houseContributorEmploymentStatusCode\",",
                      "                        \"type\": \"integer\"",
                      "                    },",
                      "                    \"isInPaidEmployment\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/isInPaidEmployment\",",
                      "                        \"type\": [\"boolean\", \"null\"]",
                      "                    },",
                      "                    \"isPartnerInPaidEmployment\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/isPartnerInPaidEmployment\",",
                      "                        \"type\": [\"boolean\", \"null\"]",
                      "                    },",
                      "                    \"isHouseContributorInPaidEmployment\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/isHouseContributorInPaidEmployment\",",
                      "                        \"type\": [\"boolean\", \"null\"]",
                      "                    },",
                      "                    \"propertyValue\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/propertyValue\",",
                      "                        \"type\": [\"number\", \"null\"]",
                      "                    },",
                      "                    \"mortgageAmount\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/mortgageAmount\",",
                      "                        \"type\": [\"number\", \"null\"]",
                      "                    },",
                      "                    \"repayingDebtTypeCode\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/repayingDebtTypeCode\",",
                      "                        \"type\": [\"integer\", \"null\"]",
                      "                    },",
                      "                    \"doYouHaveOutstandingDebt\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/doYouHaveOutstandingDebt\",",
                      "                        \"type\": [\"boolean\", \"null\"]",
                      "                    },",
                      "                    \"doYouReceivePension\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/doYouReceivePension\",",
                      "                        \"type\": [\"boolean\", \"null\"]",
                      "                    },",
                      "                    \"doYouReceiveChildSupport\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveChildSupport\",",
                      "                        \"type\": \"null\"",
                      "                    },",
                      "                    \"doYouReceiveBenefits\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveBenefits\",",
                      "                        \"type\": \"null\"",
                      "                    },",
                      "                    \"otherDetails\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/otherDetails\",",
                      "                        \"type\": \"null\"",
                      "                    },",
                      "                    \"doesAnyoneElseProvideIncome\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/doesAnyoneElseProvideIncome\",",
                      "                        \"type\": \"null\"",
                      "                    },",
                      "                    \"doHouseContributorsHaveBenefits\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/doHouseContributorsHaveBenefits\",",
                      "                        \"type\": \"null\"",
                      "                    },",
                      "                    \"areHouseContributorsInPaydEmployment\": {",
                      "                        \"$id\": \"#/properties/consumerDetail/properties/areHouseContributorsInPaydEmployment\",",
                      "                        \"type\": \"null\"",
                      "                    }",
                      "                },",
                      "                \"$id\": \"#/properties/consumerDetail\",",
                      "                \"type\": \"object\"",
                      "            },",
                      "            \"creditors\": {",
                      "                \"items\": {",
                      "                    \"required\": [",
                      "                        \"sfsCreditorID\",",
                      "                        \"creditorTypeCode\",",
                      "                        \"name\",",
                      "                        \"totalBalance\",",
                      "                        \"amount\",",
                      "                        \"frequencyCode\",",
                      "                        \"notes\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"sfsCreditorID\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/sfsCreditorID\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"creditorTypeCode\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/creditorTypeCode\",",
                      "                            \"type\": [\"integer\", \"null\"]",
                      "                        },",
                      "                        \"name\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/name\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"totalBalance\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/totalBalance\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"amount\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/amount\",",
                      "                            \"type\": [\"number\", \"null\"]",
                      "                        },",
                      "                        \"frequencyCode\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/frequencyCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"notes\": {",
                      "                            \"$id\": \"#/properties/creditors/items/properties/notes\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/properties/creditors/items\",",
                      "                    \"type\": \"object\"",
                      "                },",
                      "                \"$id\": \"#/properties/creditors\",",
                      "                \"type\": \"array\"",
                      "            },",
                      "            \"expenditures\": {",
                      "                \"items\": {",
                      "                    \"required\": [",
                      "                        \"sfsExpenditureID\",",
                      "                        \"expenditureGroupCode\",",
                      "                        \"expenditureTypeCode\",",
                      "                        \"name\",",
                      "                        \"amount\",",
                      "                        \"frequencyCode\",",
                      "                        \"notes\",",
                      "                        \"inArrears\",",
                      "                        \"inArrangement\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"sfsExpenditureID\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/sfsExpenditureID\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"expenditureGroupCode\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/expenditureGroupCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"expenditureTypeCode\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/expenditureTypeCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"name\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/name\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        },",
                      "                        \"amount\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/amount\",",
                      "                            \"type\": [\"number\", \"null\"]",
                      "                        },",
                      "                        \"frequencyCode\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/frequencyCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"notes\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/notes\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"inArrears\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/inArrears\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"inArrangement\": {",
                      "                            \"$id\": \"#/properties/expenditures/items/properties/inArrangement\",",
                      "                            \"type\": \"null\"",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/properties/expenditures/items\",",
                      "                    \"type\": \"object\"",
                      "                },",
                      "                \"$id\": \"#/properties/expenditures\",",
                      "                \"type\": \"array\"",
                      "            },",
                      "            \"incomes\": {",
                      "                \"items\": {",
                      "                    \"required\": [",
                      "                        \"sfsIncomeID\",",
                      "                        \"incomeGroupCode\",",
                      "                        \"incomeTypeCode\",",
                      "                        \"name\",",
                      "                        \"amount\",",
                      "                        \"frequencyCode\",",
                      "                        \"notes\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"sfsIncomeID\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/sfsIncomeID\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"incomeGroupCode\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/incomeGroupCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"incomeTypeCode\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/incomeTypeCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"name\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/name\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"amount\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/amount\",",
                      "                            \"type\": [\"number\", \"null\"]",
                      "                        },",
                      "                        \"frequencyCode\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/frequencyCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"notes\": {",
                      "                            \"$id\": \"#/properties/incomes/items/properties/notes\",",
                      "                            \"type\": \"null\"",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/properties/incomes/items\",",
                      "                    \"type\": \"object\"",
                      "                },",
                      "                \"$id\": \"#/properties/incomes\",",
                      "                \"type\": \"array\"",
                      "            },",
                      "            \"savings\": {",
                      "                \"items\": {",
                      "                    \"required\": [",
                      "                        \"sfsSavingID\",",
                      "                        \"savingTypeCode\",",
                      "                        \"amount\",",
                      "                        \"frequencyCode\",",
                      "                        \"notes\"",
                      "                    ],",
                      "                    \"properties\": {",
                      "                        \"sfsSavingID\": {",
                      "                            \"$id\": \"#/properties/savings/items/properties/sfsSavingID\",",
                      "                            \"type\": \"null\"",
                      "                        },",
                      "                        \"savingTypeCode\": {",
                      "                            \"$id\": \"#/properties/savings/items/properties/savingTypeCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"amount\": {",
                      "                            \"$id\": \"#/properties/savings/items/properties/amount\",",
                      "                            \"type\": [\"number\", \"null\"]",
                      "                        },",
                      "                        \"frequencyCode\": {",
                      "                            \"$id\": \"#/properties/savings/items/properties/frequencyCode\",",
                      "                            \"type\": \"integer\"",
                      "                        },",
                      "                        \"notes\": {",
                      "                            \"$id\": \"#/properties/savings/items/properties/notes\",",
                      "                            \"type\": [\"string\", \"null\"]",
                      "                        }",
                      "                    },",
                      "                    \"$id\": \"#/properties/savings/items\",",
                      "                    \"type\": \"object\"",
                      "                },",
                      "                \"$id\": \"#/properties/savings\",",
                      "                \"type\": \"array\"",
                      "            },",
                      "            \"Correlation-Id\": {",
                      "                \"$id\": \"#/properties/Correlation-Id\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"Operation\": {",
                      "                \"$id\": \"#/properties/Operation\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"Origin\": {",
                      "                \"$id\": \"#/properties/Origin\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"Cache-Control\": {",
                      "                \"$id\": \"#/properties/Cache-Control\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"Authorization\": {",
                      "                \"$id\": \"#/properties/Authorization\",",
                      "                \"type\": \"null\"",
                      "            },",
                      "            \"Username\": {",
                      "                \"$id\": \"#/properties/Username\",",
                      "                \"type\": \"null\"",
                      "            }",
                      "        },",
                      "        \"$id\": \"http://example.org/root.json#\",",
                      "        \"type\": \"object\",",
                      "        \"definitions\": {},",
                      "        \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                      "    };",
                      "/////////////////////////////////////////////////////////////////////////////////////",
                      "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                      "var jsonData = pm.response.json();",
                      "var query = pm.request.url.query.all();",
                      "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                      "if (data.test_polarity == null || data.test_polarity == 1) {",
                      "    pm.test(\"TEST1: ID Check\", function () {",
                      "        if (data.id == null) {",
                      "            pm.expect(JSON.stringify(jsonData.id)).to.deep.equal(pm.globals.get(\"{{id}}\"));",
                      "        } else {",
                      "            pm.expect(jsonData.id).to.deep.equal(data.id);",
                      "        }",
                      "    }",
                      "    );",
                      "    pm.test(\"TEST2: Status code Check\", function () {",
                      "        pm.response.to.have.status(200);",
                      "    });",
                      "",
                      "    pm.test(\"TEST3: Response Header Checks\", function () {",
                      "        pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                      "    });",
                      "",
                      "    pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {",
                      "        pm.expect(pm.response.responseTime).to.be.below(5000);",
                      "    });",
                      "    pm.test(\"TEST5: Response Schema is valid\", function () {",
                      "        pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                      "    });",
                      "",
                      "    ///NEGATIVE TESTS",
                      "",
                      "    pm.test(\"Neg Test 01: Check if array is empty\", function () {",
                      "        pm.expect([expectedObject]).to.not.be.empty;",
                      "    });",
                      "    pm.test(\"Neg Test 02: Check if string is empty\", function () {",
                      "        pm.expect('name').to.not.be.empty;",
                      "    });",
                      "    pm.test(\"Neg Test 03: Check consumerID isn't empty\", function () {",
                      "        pm.expect('consumerID').to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "type": "text/javascript"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4e72d939-6738-4302-abba-5e82d4d2fb72",
                    "exec": [
                      "if (pm.environment.get(\"OAuth_Timestamp\") == null) {\r",
                      "    console.log(\"OAuth timestamp null, check the environment\");\r",
                      "} else {\r",
                      "    var tokenDate = new Date(2010, 1, 1);\r",
                      "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                      "    if (tokenTimestamp) {\r",
                      "        tokenDate = Date.parse(tokenTimestamp);\r",
                      "    }\r",
                      "    //console.log(\"timestamp is\"+tokenDate);\r",
                      "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                      "    if (!expiresInTime) {\r",
                      "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                      "    }\r",
                      "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                      "    if ((new Date() - tokenDate) >= expiresInTime) {\r",
                      "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                      "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                      "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                      "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                      "\r",
                      "        let getTokenRequest = {\r",
                      "            method: 'POST',\r",
                      "            url: tokenUrl,\r",
                      "            auth: {\r",
                      "                type: \"basic\",\r",
                      "                basic: [\r",
                      "                    { key: \"username\", value: clientId },\r",
                      "                    { key: \"password\", value: clientSecret }\r",
                      "                ]\r",
                      "            },\r",
                      "            body: {\r",
                      "                mode: 'formdata',\r",
                      "                formdata: [\r",
                      "                    { key: 'grant_type', value: 'client_credentials' },\r",
                      "                    { key: 'scope', value: scope }\r",
                      "                ]\r",
                      "            }\r",
                      "        };\r",
                      "\r",
                      "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                      "            let jsonResponse = response.json(),\r",
                      "                newAccessToken = jsonResponse.access_token;\r",
                      "            //console.log({ err, jsonResponse, newAccessToken });\r",
                      "\r",
                      "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                      "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                      "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                      "        });\r",
                      "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                      "    }\r",
                      "}\r",
                      "//console.log(\"End of Pre-req script\");\r",
                      "/*\r",
                      "SET NOCOUNT ON\r",
                      "IF OBJECT_ID('tempdb.dbo.@test', 'U') IS NOT NULL\r",
                      "  DROP TABLE test; \r",
                      "DECLARE @test TABLE\r",
                      "(\r",
                      "    cnsmr_id int NULL\r",
                      ");\r",
                      "INSERT INTO @test (cnsmr_id) SELECT DISTINCT TOP 5 C.cnsmr_id FROM dbo.cnsmr C\r",
                      "JOIN dbo.cnsmr_accnt_ownrs CAO ON CAO.cnsmr_id = C.cnsmr_id\r",
                      "WHERE CAO.cnsmr_accnt_ownrshp_typ_cd=2\r",
                      "INSERT INTO @test (cnsmr_id) SELECT DISTINCT TOP 5 C.cnsmr_id FROM dbo.cnsmr C\r",
                      "JOIN dbo.cnsmr_accnt_ownrs CAO ON CAO.cnsmr_id = C.cnsmr_id\r",
                      "WHERE CAO.cnsmr_accnt_ownrshp_typ_cd=1\r",
                      "INSERT INTO @test (cnsmr_id) SELECT DISTINCT TOP 5 LC.lnkd_cnsmr_frm_id FROM dbo.cnsmr C\r",
                      "JOIN dbo.lnkd_Cnsmr LC ON LC.lnkd_cnsmr_frm_id = C.cnsmr_id\r",
                      "\r",
                      "\r",
                      "SELECT TOP (100) \r",
                      "\t   [CD].[ConsumerDetailCode]\r",
                      "\t  ,[CD].[Name]\r",
                      "      ,[CD].[Type]\r",
                      "      ,[CD].[Description]\r",
                      "      ,[CD].[HelpTextInternal]\r",
                      "      ,[CD].[HelpTextExternal]\r",
                      "      ,[CD].[IsActive]\r",
                      "\t  ,[CT].[CreditorTypeCode]\r",
                      "\t  ,[CT].[Name]\r",
                      "\t  ,[CT].[Description]\r",
                      "\t  ,[CT].[HelpTextInternal]\r",
                      "\t  ,[CT].[HelpTextExternal]\r",
                      "\t  ,[CT].[Type]\r",
                      "\t  ,[CT].[IsActive]\r",
                      "\t  FROM dbo.ConsumerDetail CD\r",
                      "\t  JOIN dbo.CreditorType\r",
                      "\r",
                      "*/\r",
                      "\r",
                      "\r",
                      ""
                    ],
                    "type": "text/javascript"
                  }
                }
              ],
              "_postman_id": "8ba564c7-64c2-402d-b26f-05459bb648b2",
              "protocolProfileBehavior": {
                "disableBodyPruning": true
              },
              "request": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{OAuth_Token}}",
                    "tokenType": "Bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-South}}"
                  },
                  {
                    "key": "Ocp-Apim-Subscription-Key-West",
                    "type": "text",
                    "value": "{{Ocp-Apim-Subscription-Key-West}}"
                  },
                  {
                    "key": "Correlation-Id",
                    "type": "text",
                    "value": "{{$guid}}"
                  },
                  {
                    "key": "Content-Type",
                    "type": "text",
                    "value": "application/json"
                  },
                  {
                    "key": "Origin",
                    "type": "text",
                    "value": "Postman"
                  },
                  {
                    "key": "Username",
                    "type": "text",
                    "value": "Test-User"
                  }
                ],
                "url": {
                  "raw": "{{BaseURL}}/SFS/consumer/:consumerID/create",
                  "host": [
                    "{{BaseURL}}"
                  ],
                  "path": [
                    "SFS",
                    "consumer",
                    ":consumerID",
                    "create"
                  ],
                  "variable": [
                    {
                      "key": "consumerID",
                      "value": "{{cnsmrlc_id}}",
                      "type": "string",
                      "description": {
                        "content": "",
                        "type": "text/plain"
                      }
                    }
                  ]
                },
                "description": "Creates a template SFS with default values and all questions"
              },
              "response": [
                {
                  "id": "423fa53b-346d-4c9c-8f6b-75af56d58673",
                  "name": "Server Error",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/consumer/<long>/create"
                  },
                  "status": "Internal Server Error",
                  "code": 500,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                },
                {
                  "id": "47ad517c-09ac-43f3-8041-736f303c53ff",
                  "name": "Success",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/consumer/<long>/create"
                  },
                  "status": "OK",
                  "code": 200,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"priorityBillsInArrangements\": \"<boolean>\",\n \"priorityBillsUpToDate\": \"<boolean>\",\n \"status\": \"<string>\",\n \"sfsType\": \"<string>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<integer>\",\n \"copyNotes\": \"<string>\",\n \"creditors\": [\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"expenditures\": [\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  },\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  }\n ],\n \"incomes\": [\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"savings\": [\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"consumerDetail\": {\n  \"numberInHousehold\": \"<integer>\",\n  \"numberOfChildrenUnder16\": \"<integer>\",\n  \"numberOfChildren16To18\": \"<integer>\",\n  \"numberOfVehicles\": \"<integer>\",\n  \"householdTypeCode\": \"<integer>\",\n  \"residenceStatusCode\": \"<integer>\",\n  \"employmentStatusCode\": \"<integer>\",\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"sfsConsumerDetailID\": \"<uuid>\",\n  \"outstandingDebt\": \"<double>\",\n  \"householdContributorCode\": \"<integer>\",\n  \"nameOfEmployer\": \"<string>\",\n  \"partnersEmploymentStatusCode\": \"<integer>\",\n  \"houseContributorEmploymentStatusCode\": \"<integer>\",\n  \"isInPaidEmployment\": \"<boolean>\",\n  \"isPartnerInPaidEmployment\": \"<boolean>\",\n  \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n  \"propertyValue\": \"<double>\",\n  \"mortgageAmount\": \"<double>\",\n  \"doYouHaveOutstandingDebt\": \"<boolean>\",\n  \"doYouReceivePension\": \"<boolean>\",\n  \"doYouReceiveChildSupport\": \"<boolean>\",\n  \"doYouReceiveBenefits\": \"<boolean>\",\n  \"otherDetails\": \"<string>\",\n  \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n  \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n  \"areHouseContributorsInPaydEmployment\": \"<boolean>\"\n },\n \"description\": {\n  \"sfsDescriptionID\": \"<uuid>\",\n  \"value\": \"<string>\"\n }\n}"
                },
                {
                  "id": "f93c3b73-d73d-4d49-843c-b53b5242ad1e",
                  "name": "Bad Request",
                  "originalRequest": {
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "value": ""
                      }
                    ],
                    "url": "{{baseUrl}}/consumer/<long>/create"
                  },
                  "status": "Bad Request",
                  "code": 400,
                  "_postman_previewlanguage": "json",
                  "header": [
                    {
                      "key": "Content-Type",
                      "value": "application/json"
                    }
                  ],
                  "cookie": [],
                  "responseTime": null,
                  "body": "\"<string>\""
                }
              ]
            }
          ],
          "_postman_id": "0d99b39c-1576-431d-b478-c777d31312b6",
          "_postman_isSubFolder": true
        },
        {
          "name": "instance",
          "item": [
            {
              "name": "{id}",
              "item": [
                {
                  "name": "sfs",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "952d8ca6-c7fc-4236-bb7c-3267ca643c84",
                        "exec": [
                          "var jsonData = JSON.parse(responseBody);\r",
                          "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                          "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                          "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                          "\r",
                          "var Ajv = require('ajv'),\r",
                          "ajv= new Ajv ({logger:console}),\r",
                          "schema = {\r",
                          "    \"required\": [\r",
                          "        \"sfsid\",\r",
                          "        \"groupID\",\r",
                          "        \"dateReceived\",\r",
                          "        \"priorityBillsInArrangements\",\r",
                          "        \"priorityBillsUpToDate\",\r",
                          "        \"statusCode\",\r",
                          "        \"status\",\r",
                          "        \"sfsTypeCode\",\r",
                          "        \"originalSFSID\",\r",
                          "        \"copyType\",\r",
                          "        \"copyNotes\",\r",
                          "        \"creditors\",\r",
                          "        \"expenditures\",\r",
                          "        \"incomes\",\r",
                          "        \"savings\",\r",
                          "        \"consumerDetail\",\r",
                          "        \"description\"\r",
                          "    ],\r",
                          "    \"properties\": {\r",
                          "        \"sfsid\": {\r",
                          "            \"$id\": \"#/properties/sfsid\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"groupID\": {\r",
                          "            \"$id\": \"#/properties/groupID\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"dateReceived\": {\r",
                          "            \"$id\": \"#/properties/dateReceived\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"priorityBillsInArrangements\": {\r",
                          "            \"$id\": \"#/properties/priorityBillsInArrangements\",\r",
                          "            \"type\": [\"boolean\", \"null\"]\r",
                          "        },\r",
                          "        \"priorityBillsUpToDate\": {\r",
                          "            \"$id\": \"#/properties/priorityBillsUpToDate\",\r",
                          "            \"type\": [\"boolean\", \"null\"]\r",
                          "        },\r",
                          "        \"statusCode\": {\r",
                          "            \"$id\": \"#/properties/statusCode\",\r",
                          "            \"type\": [\"integer\", \"null\"]\r",
                          "        },\r",
                          "        \"status\": {\r",
                          "            \"$id\": \"#/properties/status\",\r",
                          "            \"type\": [\"integer\", \"null\"]\r",
                          "        },\r",
                          "        \"sfsTypeCode\": {\r",
                          "            \"$id\": \"#/properties/sfsTypeCode\",\r",
                          "            \"type\": [\"integer\", \"null\"]\r",
                          "        },\r",
                          "        \"originalSFSID\": {\r",
                          "            \"$id\": \"#/properties/originalSFSID\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"copyType\": {\r",
                          "            \"$id\": \"#/properties/copyType\",\r",
                          "            \"type\": [\"integer\", \"null\"]\r",
                          "        },\r",
                          "        \"copyNotes\": {\r",
                          "            \"$id\": \"#/properties/copyNotes\",\r",
                          "            \"type\": [\"string\", \"null\"]\r",
                          "        },\r",
                          "        \"creditors\": {\r",
                          "            \"items\": {\r",
                          "                \"properties\": {\r",
                          "                    \"sfsCreditorID\": {\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/sfsCreditorID\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"creditorTypeCode\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/creditorTypeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"name\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/name\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"displayName\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/displayName\",\r",
                          "                         \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"totalBalance\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/totalBalance\",\r",
                          "                         \"type\": [\"number\", \"null\"]\r",
                          "                    },\r",
                          "                    \"amount\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/amount\",\r",
                          "                        \"type\": [\"number\", \"null\"]\r",
                          "                    },\r",
                          "                    \"frequencyCode\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/frequencyCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"notes\":{\r",
                          "                        \"$id\": \"#/properties/creditors/items/properties/notes\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    }\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/creditors/items\",\r",
                          "            \"type\": [\"object\", \"null\"]\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/creditors\",\r",
                          "            \"type\": [\"array\", \"null\"]\r",
                          "        },\r",
                          "        \"expenditures\": {\r",
                          "            \"items\": {\r",
                          "                \"required\": [\r",
                          "                    \"sfsExpenditureID\",\r",
                          "                    \"expenditureGroupCode\",\r",
                          "                    \"expenditureTypeCode\",\r",
                          "                    \"name\",\r",
                          "                    \"displayName\",\r",
                          "                    \"amount\",\r",
                          "                    \"frequencyCode\",\r",
                          "                    \"notes\",\r",
                          "                    \"inArrears\",\r",
                          "                    \"inArrangement\"\r",
                          "                ],\r",
                          "                \"properties\": {\r",
                          "                    \"sfsExpenditureID\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/sfsExpenditureID\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"expenditureGroupCode\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/expenditureGroupCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"expenditureTypeCode\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/expenditureTypeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"name\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/name\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"displayName\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/displayName\",\r",
                          "                        \"type\": [\"string\",\"null\"]\r",
                          "                    },\r",
                          "                    \"amount\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/amount\",\r",
                          "                        \"type\": [\"number\", \"null\"]\r",
                          "                    },\r",
                          "                    \"frequencyCode\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/frequencyCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"notes\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/notes\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"inArrears\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/inArrears\",\r",
                          "                        \"type\": [\"boolean\",\"null\"]\r",
                          "                    },\r",
                          "                    \"inArrangement\": {\r",
                          "                        \"$id\": \"#/properties/expenditures/items/properties/inArrangement\",\r",
                          "                        \"type\": [\"boolean\",\"null\"]\r",
                          "                    }\r",
                          "                },\r",
                          "                \"$id\": \"#/properties/expenditures/items\",\r",
                          "                \"type\": [\"object\", \"null\"]\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/expenditures\",\r",
                          "            \"type\": [\"array\", \"null\"]\r",
                          "        },\r",
                          "        \"incomes\": {\r",
                          "            \"items\": {\r",
                          "                \"required\": [\r",
                          "                    \"sfsIncomeID\",\r",
                          "                    \"incomeGroupCode\",\r",
                          "                    \"incomeTypeCode\",\r",
                          "                    \"name\",\r",
                          "                    \"displayName\",\r",
                          "                    \"amount\",\r",
                          "                    \"frequencyCode\",\r",
                          "                    \"notes\"\r",
                          "                ],\r",
                          "                \"properties\": {\r",
                          "                    \"sfsIncomeID\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/sfsIncomeID\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"incomeGroupCode\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/incomeGroupCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"incomeTypeCode\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/incomeTypeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"name\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/name\",\r",
                          "                        \"type\": [\"string\",\"null\"]\r",
                          "                    },\r",
                          "                    \"displayName\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/displayName\",\r",
                          "                        \"type\": [\"string\",\"null\"]\r",
                          "                    },\r",
                          "                    \"amount\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/amount\",\r",
                          "                        \"type\": [\"number\", \"null\"]\r",
                          "                    },\r",
                          "                    \"frequencyCode\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/frequencyCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"notes\": {\r",
                          "                        \"$id\": \"#/properties/incomes/items/properties/notes\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    }\r",
                          "                },\r",
                          "                \"$id\": \"#/properties/incomes/items\",\r",
                          "                \"type\": [\"object\", \"null\"]\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/incomes\",\r",
                          "            \"type\": [\"array\", \"null\"]\r",
                          "        },\r",
                          "        \"savings\": {\r",
                          "            \"items\": {\r",
                          "                \"required\": [\r",
                          "                    \"sfsSavingID\",\r",
                          "                    \"savingTypeCode\",\r",
                          "                    \"amount\",\r",
                          "                    \"frequencyCode\",\r",
                          "                    \"notes\"\r",
                          "                ],\r",
                          "                \"properties\": {\r",
                          "                    \"sfsSavingID\": {\r",
                          "                        \"$id\": \"#/properties/savings/items/properties/sfsSavingID\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    },\r",
                          "                    \"savingTypeCode\": {\r",
                          "                        \"$id\": \"#/properties/savings/items/properties/savingTypeCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"amount\": {\r",
                          "                        \"$id\": \"#/properties/savings/items/properties/amount\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"frequencyCode\": {\r",
                          "                        \"$id\": \"#/properties/savings/items/properties/frequencyCode\",\r",
                          "                        \"type\": [\"integer\", \"null\"]\r",
                          "                    },\r",
                          "                    \"notes\": {\r",
                          "                        \"$id\": \"#/properties/savings/items/properties/notes\",\r",
                          "                        \"type\": [\"string\", \"null\"]\r",
                          "                    }\r",
                          "                },\r",
                          "                \"$id\": \"#/properties/savings/items\",\r",
                          "                \"type\": [\"object\", \"null\"]\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/savings\",\r",
                          "            \"type\": [\"array\", \"null\"]\r",
                          "        },\r",
                          "        \"consumerDetail\": {\r",
                          "            \"required\": [\r",
                          "                \"sfsConsumerDetailID\",\r",
                          "                \"outstandingDebt\",\r",
                          "                \"numberInHousehold\",\r",
                          "                \"numberOfChildrenUnder16\",\r",
                          "                \"numberOfChildren16To18\",\r",
                          "                \"numberOfVehicles\",\r",
                          "                \"householdTypeCode\",\r",
                          "                \"householdContributorCode\",\r",
                          "                \"residenceStatusCode\",\r",
                          "                \"nameOfEmployer\",\r",
                          "                \"employmentStatusCode\",\r",
                          "                \"partnersEmploymentStatusCode\",\r",
                          "                \"houseContributorEmploymentStatusCode\",\r",
                          "                \"isInPaidEmployment\",\r",
                          "                \"isPartnerInPaidEmployment\",\r",
                          "                \"isHouseContributorInPaidEmployment\",\r",
                          "                \"propertyValue\",\r",
                          "                \"mortgageAmount\",\r",
                          "                \"repayingDebtTypeCode\",\r",
                          "                \"doYouHaveOutstandingDebt\",\r",
                          "                \"doYouReceivePension\",\r",
                          "                \"doYouReceiveChildSupport\",\r",
                          "                \"doYouReceiveBenefits\",\r",
                          "                \"otherDetails\",\r",
                          "                \"doesAnyoneElseProvideIncome\",\r",
                          "                \"doHouseContributorsHaveBenefits\",\r",
                          "                \"areHouseContributorsInPaydEmployment\"\r",
                          "            ],\r",
                          "            \"properties\": {\r",
                          "                \"sfsConsumerDetailID\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/sfsConsumerDetailID\",\r",
                          "                    \"type\": [\"string\", \"null\"]\r",
                          "                },\r",
                          "                \"outstandingDebt\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/outstandingDebt\",\r",
                          "                    \"type\": [\"number\", \"null\"]\r",
                          "                },\r",
                          "                \"numberInHousehold\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/numberInHousehold\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"numberOfChildrenUnder16\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfChildrenUnder16\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"numberOfChildren16To18\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfChildren16To18\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"numberOfVehicles\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfVehicles\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"householdTypeCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/householdTypeCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"householdContributorCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/householdContributorCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"residenceStatusCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/residenceStatusCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"nameOfEmployer\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/nameOfEmployer\",\r",
                          "                    \"type\": [\"string\", \"null\"]\r",
                          "                },\r",
                          "                \"employmentStatusCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/employmentStatusCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"partnersEmploymentStatusCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/partnersEmploymentStatusCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"houseContributorEmploymentStatusCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/houseContributorEmploymentStatusCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"isInPaidEmployment\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/isInPaidEmployment\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"isPartnerInPaidEmployment\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/isPartnerInPaidEmployment\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"isHouseContributorInPaidEmployment\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/isHouseContributorInPaidEmployment\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"propertyValue\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/propertyValue\",\r",
                          "                    \"type\": [\"number\", \"null\"]\r",
                          "                },\r",
                          "                \"mortgageAmount\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/mortgageAmount\",\r",
                          "                    \"type\": [\"number\", \"null\"]\r",
                          "                },\r",
                          "                \"repayingDebtTypeCode\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/repayingDebtTypeCode\",\r",
                          "                    \"type\": [\"integer\", \"null\"]\r",
                          "                },\r",
                          "                \"doYouHaveOutstandingDebt\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/doYouHaveOutstandingDebt\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"doYouReceivePension\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceivePension\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"doYouReceiveChildSupport\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveChildSupport\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"doYouReceiveBenefits\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveBenefits\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"otherDetails\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/otherDetails\",\r",
                          "                    \"type\": [\"string\", \"null\"]\r",
                          "                },\r",
                          "                \"doesAnyoneElseProvideIncome\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/doesAnyoneElseProvideIncome\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"doHouseContributorsHaveBenefits\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/doHouseContributorsHaveBenefits\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                },\r",
                          "                \"areHouseContributorsInPaydEmployment\": {\r",
                          "                    \"$id\": \"#/properties/consumerDetail/properties/areHouseContributorsInPaydEmployment\",\r",
                          "                    \"type\": [\"boolean\", \"null\"]\r",
                          "                }\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/consumerDetail\",\r",
                          "            \"type\": [\"object\", \"null\"]\r",
                          "        },\r",
                          "        \"description\": {\r",
                          "            \"required\": [\r",
                          "                \"sfsDescriptionID\",\r",
                          "                \"value\"\r",
                          "            ],\r",
                          "            \"properties\": {\r",
                          "                \"sfsDescriptionID\": {\r",
                          "                    \"$id\": \"#/properties/description/properties/sfsDescriptionID\",\r",
                          "                    \"type\": [\"string\", \"null\"]\r",
                          "                },\r",
                          "                \"value\": {\r",
                          "                    \"$id\": \"#/properties/description/properties/value\",\r",
                          "                    \"type\": [\"string\", \"null\"]\r",
                          "                }\r",
                          "            },\r",
                          "            \"$id\": \"#/properties/description\",\r",
                          "            \"type\": [\"object\", \"null\"]\r",
                          "        }\r",
                          "    },\r",
                          "    \"$id\": \"http://example.org/root.json#\",\r",
                          "    \"type\": \"object\",\r",
                          "    \"definitions\": {},\r",
                          "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                          "};\r",
                          "/*var expectedObject = {\r",
                          "    \"sfsid\": \"4a2c4d71-7cac-4c44-961c-e4f5b7a51595\",\r",
                          "    \"groupID\": \"0c2ede0d-11f8-4f88-9f1c-187c50040b90\",\r",
                          "    \"dateReceived\": null,\r",
                          "    \"priorityBillsInArrangements\": null,\r",
                          "    \"priorityBillsUpToDate\": null,\r",
                          "    \"statusCode\": 1,\r",
                          "    \"status\": 1,\r",
                          "    \"sfsTypeCode\": 0,\r",
                          "    \"originalSFSID\": null,\r",
                          "    \"copyType\": null,\r",
                          "    \"copyNotes\": \"null\",\r",
                          "    \"creditors\": null,\r",
                          "    \"expenditures\": [\r",
                          "        {\r",
                          "            \"sfsExpenditureID\": \"023018a6-52ed-4326-b4d5-248f50d9301b\",\r",
                          "            \"expenditureGroupCode\": 2,\r",
                          "            \"expenditureTypeCode\": 9,\r",
                          "            \"name\": null,\r",
                          "            \"displayName\": null,\r",
                          "            \"amount\": 198.0,\r",
                          "            \"frequencyCode\": 1,\r",
                          "            \"notes\": \"Expen Test\",\r",
                          "            \"inArrears\": null,\r",
                          "            \"inArrangement\": null\r",
                          "        }\r",
                          "    ],\r",
                          "    \"incomes\": [\r",
                          "        {\r",
                          "            \"sfsIncomeID\": \"b2bd1d69-4190-4600-a37d-6cde3be81ac0\",\r",
                          "            \"incomeGroupCode\": 1,\r",
                          "            \"incomeTypeCode\": 1,\r",
                          "            \"name\": null,\r",
                          "            \"displayName\": null,\r",
                          "            \"amount\": 220.00,\r",
                          "            \"frequencyCode\": 4,\r",
                          "            \"notes\": \"Test Income\"\r",
                          "        },\r",
                          "        {\r",
                          "            \"sfsIncomeID\": \"3c311d68-09d3-4e8e-bf38-3f69212eb822\",\r",
                          "            \"incomeGroupCode\": 1,\r",
                          "            \"incomeTypeCode\": 2,\r",
                          "            \"name\": null,\r",
                          "            \"displayName\": null,\r",
                          "            \"amount\": 560.00,\r",
                          "            \"frequencyCode\": 4,\r",
                          "            \"notes\": \"Test Income Two\"\r",
                          "        }\r",
                          "    ],\r",
                          "    \"savings\": [\r",
                          "        {\r",
                          "            \"sfsSavingID\": \"d5d5961e-b4dd-4e54-a422-4889a7fce35b\",\r",
                          "            \"savingTypeCode\": 1,\r",
                          "            \"amount\": 135.0,\r",
                          "            \"frequencyCode\": 1,\r",
                          "            \"notes\": \"Test Savings Amount\"\r",
                          "        }\r",
                          "    ],\r",
                          "    \"consumerDetail\": {\r",
                          "        \"sfsConsumerDetailID\": \"0d187148-8ce0-4625-9946-6ab6be3b2e4f\",\r",
                          "        \"outstandingDebt\": 4289.0,\r",
                          "        \"numberInHousehold\": 3,\r",
                          "        \"numberOfChildrenUnder16\": 2,\r",
                          "        \"numberOfChildren16To18\": 1,\r",
                          "        \"numberOfVehicles\": 1,\r",
                          "        \"householdTypeCode\": 1,\r",
                          "        \"householdContributorCode\": 1,\r",
                          "        \"residenceStatusCode\": 1,\r",
                          "        \"nameOfEmployer\": \"TestLTD\",\r",
                          "        \"employmentStatusCode\": 5,\r",
                          "        \"partnersEmploymentStatusCode\": 4,\r",
                          "        \"houseContributorEmploymentStatusCode\": 1,\r",
                          "        \"isInPaidEmployment\": false,\r",
                          "        \"isPartnerInPaidEmployment\": true,\r",
                          "        \"isHouseContributorInPaidEmployment\": true,\r",
                          "        \"propertyValue\": 240000.00,\r",
                          "        \"mortgageAmount\": 120000.00,\r",
                          "        \"repayingDebtTypeCode\": 5,\r",
                          "        \"doYouHaveOutstandingDebt\": true,\r",
                          "        \"doYouReceivePension\": false,\r",
                          "        \"doYouReceiveChildSupport\": false,\r",
                          "        \"doYouReceiveBenefits\": false,\r",
                          "        \"otherDetails\": \"Test Consumer Details\",\r",
                          "        \"doesAnyoneElseProvideIncome\": false,\r",
                          "        \"doHouseContributorsHaveBenefits\": false,\r",
                          "        \"areHouseContributorsInPaydEmployment\": false\r",
                          "    },\r",
                          "    \"description\": {\r",
                          "        \"sfsDescriptionID\": \"cda4d5f4-cc51-409c-86bd-df898e81b091\",\r",
                          "        \"value\": \"test add description\"\r",
                          "    }\r",
                          "};\r",
                          "\r",
                          "//var credPropertyIndex = 0;\r",
                          "var savPropertyIndex = 0;\r",
                          "\r",
                          "var CurrentPmExpectTest;\r",
                          "\r",
                          "var mainObjPropPmExpTestTitle = \"expectedObject variable, main object 0 property: \";\r",
                          "var creditorsObjPropPmExpTestTitle = \"expectedObject variable, main Object 0 property: Creditors, object 0 property: \";\r",
                          "var savingsObjPropPmExpTestTitle = \"expectedObject variable, main object 0 property: Savings, object 0 property: \";\r",
                          "var consumDetailObjPropPmExpTestTitle = \"expectedObject variable, main object 0 property: consumerDetail, object 0 property: \";\r",
                          "var descObjPropPmExpTestTitle = \"expectedObject variable, main object 0 property: description, object 0 property: \";\r",
                          "\r",
                          "try {\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"sfsid\";\r",
                          "    pm.expect(jsonData.sfsid).to.equal(expectedObject.sfsid);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"consumerID\";\r",
                          "    pm.expect(jsonData.consumerID).to.equal(expectedObject.consumerID);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"dateReceived\";\r",
                          "    pm.expect(jsonData.dateReceived).to.equal(expectedObject.dateReceived);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"priorityBillsInArrangements\";\r",
                          "    pm.expect(jsonData.priorityBillsInArrangements).to.equal(expectedObject.priorityBillsInArrangements);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"priorityBillsUpToDate\";\r",
                          "    pm.expect(jsonData.priorityBillsUpToDate).to.equal(expectedObject.priorityBillsUpToDate);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"statusCode\";\r",
                          "    pm.expect(jsonData.statusCode).to.equal(expectedObject.statusCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"status\";\r",
                          "    pm.expect(jsonData.status).to.equal(expectedObject.status);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"sfsTypeCode\";\r",
                          "    pm.expect(jsonData.sfsTypeCode).to.equal(expectedObject.sfsTypeCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"originalSFSID\";\r",
                          "    pm.expect(jsonData.originalSFSID).to.equal(expectedObject.originalSFSID);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"copyType\";\r",
                          "    pm.expect(jsonData.copyType).to.equal(expectedObject.copyType);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"copyNotes\";\r",
                          "    pm.expect(jsonData.copyNotes).to.equal(expectedObject.copyNotes);\r",
                          "\r",
                          "    //creditors Object pm.expect block START\r",
                          "    /*\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"sfsCreditorID\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].sfsCreditorID).to.equal(expectedObject.creditors[credPropertyIndex].sfsCreditorID);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"creditorTypeCode\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].creditorTypeCode).to.equal(expectedObject.creditors[credPropertyIndex].creditorTypeCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"name\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].name).to.equal(expectedObject.creditors[credPropertyIndex].name);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"displayName\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].displayName).to.equal(expectedObject.creditors[credPropertyIndex].displayName);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"totalBalance\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].totalBalance).to.equal(expectedObject.creditors[credPropertyIndex].totalBalance);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"amount\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].amount).to.equal(expectedObject.creditors[credPropertyIndex].amount);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"frequencyCode\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].frequencyCode).to.equal(expectedObject.creditors[credPropertyIndex].frequencyCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = creditorsObjPropPmExpTestTitle + \"notes\";\r",
                          "    pm.expect(jsonData.creditors[credPropertyIndex].notes).to.equal(expectedObject.creditors[credPropertyIndex].notes);\r",
                          "\r",
                          "    //creditors Object pm.expect block END\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"expeditures\";\r",
                          "    pm.expect(jsonData.expenditures[{}]).to.equal(expectedObject.expenditures[{}]);\r",
                          "\r",
                          "    CurrentPmExpectTest = mainObjPropPmExpTestTitle + \"incomes\";\r",
                          "    pm.expect(jsonData.incomes[{}]).to.equal(expectedObject.incomes[{}]);\r",
                          "\r",
                          "    //savings Object pm.expect block START\r",
                          "    CurrentPmExpectTest = savingsObjPropPmExpTestTitle + \"sfsSavingID\";\r",
                          "    pm.expect(jsonData.savings[savPropertyIndex].sfsSavingID).to.equal(expectedObject.savings[savPropertyIndex].sfsSavingID);\r",
                          "\r",
                          "    CurrentPmExpectTest = savingsObjPropPmExpTestTitle + \"savingTypeCode\";\r",
                          "    pm.expect(jsonData.savings[savPropertyIndex].savingTypeCode).to.equal(expectedObject.savings[savPropertyIndex].savingTypeCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = savingsObjPropPmExpTestTitle + \"amount\";\r",
                          "    pm.expect(jsonData.savings[savPropertyIndex].amount).to.equal(expectedObject.savings[savPropertyIndex].amount);\r",
                          "\r",
                          "    CurrentPmExpectTest = savingsObjPropPmExpTestTitle + \"frequencyCode\";\r",
                          "    pm.expect(jsonData.savings[savPropertyIndex].frequencyCode).to.equal(expectedObject.savings[savPropertyIndex].frequencyCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = savingsObjPropPmExpTestTitle + \"notes\";\r",
                          "    pm.expect(jsonData.savings[savPropertyIndex].notes).to.equal(expectedObject.savings[savPropertyIndex].notes);\r",
                          "    //savings Object pm.expect block END\r",
                          "    //consumer detail object pm.expect block START\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"sfsConsumerDetailID\";\r",
                          "    pm.expect(jsonData.consumerDetail.sfsConsumerDetailID).to.equal(expectedObject.consumerDetail.sfsConsumerDetailID);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"outstandingDebt\";\r",
                          "    pm.expect(jsonData.consumerDetail.outstandingDebt).to.equal(expectedObject.consumerDetail.outstandingDebt);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"numberInHousehold\";\r",
                          "    pm.expect(jsonData.consumerDetail.numberInHousehold).to.equal(expectedObject.consumerDetail.numberInHousehold);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"numberOfChildrenUnder16\";\r",
                          "    pm.expect(jsonData.consumerDetail.numberOfChildrenUnder16).to.equal(expectedObject.consumerDetail.numberOfChildrenUnder16);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"numberOfChildren16To18\";\r",
                          "    pm.expect(jsonData.consumerDetail.numberOfChildren16To18).to.equal(expectedObject.consumerDetail.numberOfChildren16To18);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"numberOfVehicles\";\r",
                          "    pm.expect(jsonData.consumerDetail.numberOfVehicles).to.equal(expectedObject.consumerDetail.numberOfVehicles);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"householdTypeCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.householdTypeCode).to.equal(expectedObject.consumerDetail.householdTypeCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"householdContributorCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.householdContributorCode).to.equal(expectedObject.consumerDetail.householdContributorCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"residenceStatusCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.residenceStatusCode).to.equal(expectedObject.consumerDetail.residenceStatusCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"nameOfEmployer\";\r",
                          "    pm.expect(jsonData.consumerDetail.nameOfEmployer).to.equal(expectedObject.consumerDetail.nameOfEmployer);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"employmentStatusCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.employmentStatusCode).to.equal(expectedObject.consumerDetail.employmentStatusCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"partnersEmploymentStatusCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.partnersEmploymentStatusCode).to.equal(expectedObject.consumerDetail.partnersEmploymentStatusCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"houseContributorEmploymentStatusCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.houseContributorEmploymentStatusCode).to.equal(expectedObject.consumerDetail.houseContributorEmploymentStatusCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"isInPaidEmployment\";\r",
                          "    pm.expect(jsonData.consumerDetail.isInPaidEmployment).to.equal(expectedObject.consumerDetail.isInPaidEmployment);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"isPartnerInPaidEmployment\";\r",
                          "    pm.expect(jsonData.consumerDetail.isPartnerInPaidEmployment).to.equal(expectedObject.consumerDetail.isPartnerInPaidEmployment);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"isHouseContributorInPaidEmployment\";\r",
                          "    pm.expect(jsonData.consumerDetail.isHouseContributorInPaidEmployment).to.equal(expectedObject.consumerDetail.isHouseContributorInPaidEmployment);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"propertyValue\";\r",
                          "    pm.expect(jsonData.consumerDetail.propertyValue).to.equal(expectedObject.consumerDetail.propertyValue);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"mortgageAmount\";\r",
                          "    pm.expect(jsonData.consumerDetail.mortgageAmount).to.equal(expectedObject.consumerDetail.mortgageAmount);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"repayingDebtTypeCode\";\r",
                          "    pm.expect(jsonData.consumerDetail.repayingDebtTypeCode).to.equal(expectedObject.consumerDetail.repayingDebtTypeCode);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"doYouHaveOutstandingDebt\";\r",
                          "    pm.expect(jsonData.consumerDetail.doYouHaveOutstandingDebt).to.equal(expectedObject.consumerDetail.doYouHaveOutstandingDebt);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"doYouReceivePension\";\r",
                          "    pm.expect(jsonData.consumerDetail.doYouReceivePension).to.equal(expectedObject.consumerDetail.doYouReceivePension);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"doYouReceiveChildSupport\";\r",
                          "    pm.expect(jsonData.consumerDetail.doYouReceiveChildSupport).to.equal(expectedObject.consumerDetail.doYouReceiveChildSupport);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"doYouReceiveBenefits\";\r",
                          "    pm.expect(jsonData.consumerDetail.doYouReceiveBenefits).to.equal(expectedObject.consumerDetail.doYouReceiveBenefits);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"otherDetails\";\r",
                          "    pm.expect(jsonData.consumerDetail.otherDetails).to.equal(expectedObject.consumerDetail.otherDetails);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"doesAnyoneElseProvideIncome\";\r",
                          "    pm.expect(jsonData.consumerDetail.doesAnyoneElseProvideIncome).to.equal(expectedObject.consumerDetail.doesAnyoneElseProvideIncome);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"doHouseContributorsHaveBenefits\";\r",
                          "    pm.expect(jsonData.consumerDetail.doHouseContributorsHaveBenefits).to.equal(expectedObject.consumerDetail.doHouseContributorsHaveBenefits);\r",
                          "\r",
                          "    CurrentPmExpectTest = consumDetailObjPropPmExpTestTitle + \"areHouseContributorsInPaydEmployment\";\r",
                          "    pm.expect(jsonData.consumerDetail.areHouseContributorsInPaydEmployment).to.equal(expectedObject.consumerDetail.areHouseContributorsInPaydEmployment);\r",
                          "    //consumer detail object pm.expect block END\r",
                          "    CurrentPmExpectTest = descObjPropPmExpTestTitle + \"sfsDescriptionID\";\r",
                          "    pm.expect(jsonData.description.sfsDescriptionID).to.equal(expectedObject.description.sfsDescriptionID);\r",
                          "\r",
                          "    CurrentPmExpectTest = descObjPropPmExpTestTitle + \"value\";\r",
                          "    pm.expect(jsonData.description.value).to.equal(expectedObject.description.value);\r",
                          "\r",
                          "    var resultData = \"Test 1 - main Object (object 0) test data: \" +\r",
                          "        \"\\n\\nFirst properties block of main object 0 data\" +\r",
                          "        \" \" + \"\\n\\n JsonFile Server data: \" +\r",
                          "        \"\\n\\n sfsid: \" + jsonData.sfsid +\r",
                          "        \"\\n consumerID: \" + jsonData.consumerID +\r",
                          "        \"\\n dateReceived: \" + jsonData.dateReceived +\r",
                          "        \"\\n priorityBillsInArrangements: \" + jsonData.priorityBillsInArrangements +\r",
                          "        \"\\n priorityBillsUpToDate: \" + jsonData.priorityBillsUpToDate +\r",
                          "        \"\\n statusCode: \" + jsonData.statusCode +\r",
                          "        \"\\n status: \" + jsonData.status +\r",
                          "        \"\\n sfsTypeCode: \" + jsonData.sfsTypeCode +\r",
                          "        \"\\n originalSFSID: \" + jsonData.originalSFSID +\r",
                          "        \"\\n copyType: \" + jsonData.copyType +\r",
                          "        \"\\n copyNotes: \" + jsonData.copyNotes +\r",
                          "\r",
                          "        \" \" + \"\\n\\n ExpectedObject data: \" +\r",
                          "        \"\\n\\n sfsid: \" + expectedObject.sfsid +\r",
                          "        \"\\n consumerID: \" + expectedObject.consumerID +\r",
                          "        \"\\n dateReceived: \" + expectedObject.dateReceived +\r",
                          "        \"\\n priorityBillsInArrangements: \" + expectedObject.priorityBillsInArrangements +\r",
                          "        \"\\n priorityBillsUpToDate: \" + expectedObject.priorityBillsUpToDate +\r",
                          "        \"\\n statusCode: \" + expectedObject.statusCode +\r",
                          "        \"\\n status: \" + expectedObject.status +\r",
                          "        \"\\n sfsTypeCode: \" + expectedObject.sfsTypeCode +\r",
                          "        \"\\n originalSFSID: \" + expectedObject.originalSFSID +\r",
                          "        \"\\n copyType: \" + expectedObject.copyType +\r",
                          "        \"\\n copyNotes: \" + expectedObject.copyNotes +\r",
                          "\r",
                          "        \"\\n\\n Creditors property of main object 0 data\" +\r",
                          "        \" \" + \"\\n\\n jsonFile data: \" +\r",
                          "        \"\\n\\n sfsCreditorID: \" + jsonData.creditors[credPropertyIndex].sfsCreditorID +\r",
                          "        \"\\n creditorTypeCode: \" + jsonData.creditors[credPropertyIndex].creditorTypeCode +\r",
                          "        \"\\n name: \" + jsonData.creditors[credPropertyIndex].name +\r",
                          "        \"\\n displayName: \" + jsonData.creditors[credPropertyIndex].displayName +\r",
                          "        \"\\n totalBalance: \" + jsonData.creditors[credPropertyIndex].totalBalance +\r",
                          "        \"\\n amount: \" + jsonData.creditors[credPropertyIndex].amount +\r",
                          "        \"\\n frequencyCode: \" + jsonData.creditors[credPropertyIndex].frequencyCode +\r",
                          "        \"\\n notes: \" + jsonData.creditors[credPropertyIndex].notes +\r",
                          "\r",
                          "        \" \" + \"\\n\\n ExpectedObject data: \" +\r",
                          "        \"\\n\\n sfsCreditorID: \" + expectedObject.creditors[credPropertyIndex].sfsCreditorID +\r",
                          "        \"\\n creditorTypeCode: \" + expectedObject.creditors[credPropertyIndex].creditorTypeCode +\r",
                          "        \"\\n name: \" + expectedObject.creditors[credPropertyIndex].name +\r",
                          "        \"\\n displayName: \" + expectedObject.creditors[credPropertyIndex].displayName +\r",
                          "        \"\\n totalBalance: \" + expectedObject.creditors[credPropertyIndex].totalBalance +\r",
                          "        \"\\n amount: \" + expectedObject.creditors[credPropertyIndex].amount +\r",
                          "        \"\\n frequencyCode: \" + expectedObject.creditors[credPropertyIndex].frequencyCode +\r",
                          "        \"\\n notes: \" + expectedObject.creditors[credPropertyIndex].notes +\r",
                          "\r",
                          "        \"\\n\\n Expenditures and incomes properties of main object 0 data\" +\r",
                          "        \"\\n\\n jsonfile data \" +\r",
                          "        \"\\n\\n expenditures array size: \" + jsonData.expenditures +\r",
                          "        \"\\n incomes array size: \" + jsonData.incomes +\r",
                          "        \"\\n\\n ExpectedObject data\" +\r",
                          "        \"\\n\\n expenditures array size: \" + expectedObject.expenditures +\r",
                          "        \"\\n incomes array size: \" + expectedObject.incomes +\r",
                          "\r",
                          "        \"\\n\\n Savings property of main object 0 data\" +\r",
                          "        \"\\n\\n jsonFile data: \" +\r",
                          "        \"\\n\\n sfsSavingID: \" + jsonData.savings[savPropertyIndex].sfsSavingID +\r",
                          "        \"\\n savingTypeCode: \" + jsonData.savings[savPropertyIndex].savingTypeCode +\r",
                          "        \"\\n amount: \" + jsonData.savings[savPropertyIndex].amount +\r",
                          "        \"\\n frequencyCode: \" + jsonData.savings[savPropertyIndex].frequencyCode +\r",
                          "        \"\\n notes: \" + jsonData.savings[savPropertyIndex].notes +\r",
                          "        \"\\n\\n ExpectedObject data: \" +\r",
                          "        \"\\n\\n sfsSavingID: \" + expectedObject.savings[savPropertyIndex].sfsSavingID +\r",
                          "        \"\\n savingTypeCode: \" + expectedObject.savings[savPropertyIndex].savingTypeCode +\r",
                          "        \"\\n amount: \" + expectedObject.savings[savPropertyIndex].amount +\r",
                          "        \"\\n frequencyCode: \" + expectedObject.savings[savPropertyIndex].frequencyCode +\r",
                          "        \"\\n notes: \" + expectedObject.savings[savPropertyIndex].notes +\r",
                          "\r",
                          "        \"\\n\\n Consumer detail property block of main object data\" +\r",
                          "        \"\\n\\n jsonData info: \" +\r",
                          "        \"\\n\\n sfsConsumerDetailID: \" + jsonData.consumerDetail.sfsConsumerDetailID +\r",
                          "        \"\\n outstandingDebt: \" + jsonData.consumerDetail.outstandingDebt +\r",
                          "        \"\\n numberInHousehold: \" + jsonData.consumerDetail.numberInHousehold +\r",
                          "        \"\\n numberOfChildrenUnder16: \" + jsonData.consumerDetail.numberOfChildrenUnder16 +\r",
                          "        \"\\n numberOfChildren16To18: \" + jsonData.consumerDetail.numberOfChildren16To18 +\r",
                          "        \"\\n numberOfVehicles: \" + jsonData.consumerDetail.numberOfVehicles +\r",
                          "        \"\\n householdTypeCode: \" + jsonData.consumerDetail.householdTypeCode +\r",
                          "        \"\\n householdContributorCode: \" + jsonData.consumerDetail.householdContributorCode +\r",
                          "        \"\\n residenceStatusCode: \" + jsonData.consumerDetail.residenceStatusCode +\r",
                          "        \"\\n nameOfEmployer: \" + jsonData.consumerDetail.nameOfEmployer +\r",
                          "        \"\\n employmentStatusCode: \" + jsonData.consumerDetail.employmentStatusCode +\r",
                          "        \"\\n partnersEmploymentStatusCode: \" + jsonData.consumerDetail.partnersEmploymentStatusCode +\r",
                          "        \"\\n houseContributorEmploymentStatusCode: \" + jsonData.consumerDetail.houseContributorEmploymentStatusCode +\r",
                          "        \"\\n isInPaidEmployment: \" + jsonData.consumerDetail.isInPaidEmployment +\r",
                          "        \"\\n isPartnerInPaidEmployment: \" + jsonData.consumerDetail.isPartnerInPaidEmployment +\r",
                          "        \"\\n isHouseContributorInPaidEmployment: \" + jsonData.consumerDetail.isHouseContributorInPaidEmployment +\r",
                          "        \"\\n propertyValue: \" + jsonData.consumerDetail.propertyValue +\r",
                          "        \"\\n mortgageAmount: \" + jsonData.consumerDetail.mortgageAmount +\r",
                          "        \"\\n repayingDebtTypeCode: \" + jsonData.consumerDetail.repayingDebtTypeCode +\r",
                          "        \"\\n doYouHaveOutstandingDebt: \" + jsonData.consumerDetail.doYouHaveOutstandingDebt +\r",
                          "        \"\\n doYouReceivePension: \" + jsonData.consumerDetail.doYouReceivePension +\r",
                          "        \"\\n doYouReceiveChildSupport: \" + jsonData.consumerDetail.doYouReceiveChildSupport +\r",
                          "        \"\\n doYouReceiveBenefits: \" + jsonData.consumerDetail.doYouReceiveBenefits +\r",
                          "        \"\\n otherDetails: \" + jsonData.consumerDetail.otherDetails +\r",
                          "        \"\\n doesAnyoneElseProvideIncome: \" + jsonData.consumerDetail.doesAnyoneElseProvideIncome +\r",
                          "        \"\\n doHouseContributorsHaveBenefits: \" + jsonData.consumerDetail.doHouseContributorsHaveBenefits +\r",
                          "        \"\\n areHouseContributorsInPaydEmployment: \" + jsonData.consumerDetail.areHouseContributorsInPaydEmployment +\r",
                          "\r",
                          "        \"\\n\\n ExpectedObject data: \" +\r",
                          "        \"\\n\\n sfsConsumerDetailID: \" + expectedObject.consumerDetail.sfsConsumerDetailID +\r",
                          "        \"\\n outstandingDebt: \" + expectedObject.consumerDetail.outstandingDebt +\r",
                          "        \"\\n numberInHousehold: \" + expectedObject.consumerDetail.numberInHousehold +\r",
                          "        \"\\n numberOfChildrenUnder16: \" + expectedObject.consumerDetail.numberOfChildrenUnder16 +\r",
                          "        \"\\n numberOfChildren16To18: \" + expectedObject.consumerDetail.numberOfChildren16To18 +\r",
                          "        \"\\n numberOfVehicles: \" + expectedObject.consumerDetail.numberOfVehicles +\r",
                          "        \"\\n householdTypeCode: \" + expectedObject.consumerDetail.householdTypeCode +\r",
                          "        \"\\n householdContributorCode: \" + expectedObject.consumerDetail.householdContributorCode +\r",
                          "        \"\\n residenceStatusCode: \" + expectedObject.consumerDetail.residenceStatusCode +\r",
                          "        \"\\n nameOfEmployer: \" + expectedObject.consumerDetail.nameOfEmployer +\r",
                          "        \"\\n employmentStatusCode: \" + expectedObject.consumerDetail.employmentStatusCode +\r",
                          "        \"\\n partnersEmploymentStatusCode: \" + expectedObject.consumerDetail.partnersEmploymentStatusCode +\r",
                          "        \"\\n houseContributorEmploymentStatusCode: \" + expectedObject.consumerDetail.houseContributorEmploymentStatusCode +\r",
                          "        \"\\n isInPaidEmployment: \" + expectedObject.consumerDetail.isInPaidEmployment +\r",
                          "        \"\\n isPartnerInPaidEmployment: \" + expectedObject.consumerDetail.isPartnerInPaidEmployment +\r",
                          "        \"\\n isHouseContributorInPaidEmployment: \" + expectedObject.consumerDetail.isHouseContributorInPaidEmployment +\r",
                          "        \"\\n propertyValue: \" + expectedObject.consumerDetail.propertyValue +\r",
                          "        \"\\n mortgageAmount: \" + expectedObject.consumerDetail.mortgageAmount +\r",
                          "        \"\\n repayingDebtTypeCode: \" + expectedObject.consumerDetail.repayingDebtTypeCode +\r",
                          "        \"\\n doYouHaveOutstandingDebt: \" + expectedObject.consumerDetail.doYouHaveOutstandingDebt +\r",
                          "        \"\\n doYouReceivePension: \" + expectedObject.consumerDetail.doYouReceivePension +\r",
                          "        \"\\n doYouReceiveChildSupport: \" + expectedObject.consumerDetail.doYouReceiveChildSupport +\r",
                          "        \"\\n doYouReceiveBenefits: \" + expectedObject.consumerDetail.doYouReceiveBenefits +\r",
                          "        \"\\n otherDetails: \" + expectedObject.consumerDetail.otherDetails +\r",
                          "        \"\\n doesAnyoneElseProvideIncome: \" + expectedObject.consumerDetail.doesAnyoneElseProvideIncome +\r",
                          "        \"\\n doHouseContributorsHaveBenefits: \" + expectedObject.consumerDetail.doHouseContributorsHaveBenefits +\r",
                          "        \"\\n areHouseContributorsInPaydEmployment: \" + expectedObject.consumerDetail.areHouseContributorsInPaydEmployment +\r",
                          "\r",
                          "        \"\\n\\n Description porperty block of main Object 0 data\" +\r",
                          "\r",
                          "        \"\\n\\n jsonData info: \" +\r",
                          "        \"\\n\\n sfsDescriptionID: \" + jsonData.description.sfsDescriptionID +\r",
                          "        \"\\n value: \" + jsonData.description.value +\r",
                          "\r",
                          "        \"\\n\\n ExpectedObject data: \" +\r",
                          "        \"\\n\\n sfsDescriptionID: \" + expectedObject.description.sfsDescriptionID +\r",
                          "        \"\\n value: \" + expectedObject.description.value;\r",
                          "\r",
                          "    console.log(resultData);\r",
                          "\r",
                          "    pm.test(\"Test 1 - Object 0 - PASSED - Expected data is Present!\", () => true);\r",
                          "\r",
                          "} catch (e) {\r",
                          "    pm.test(\"Test 1 - Object 0 - FAILED - Expected data is not Present!\", () => {\r",
                          "        throw new Error(e.message + \" in \" + CurrentPmExpectTest)\r",
                          "    });\r",
                          "    console.log(\"Test 1 - Object 0 - FAILED - Expected data is not Present!\" + \"\\n\\n\" + e + \" in \" + CurrentPmExpectTest);\r",
                          "}\r",
                          "\r",
                          "\r",
                          "let jsonDataExp = jsonData.expenditures;\r",
                          "expLoop:\r",
                          "    for (var index = 0; index < jsonDataExp.length; index++) {\r",
                          "        try {\r",
                          "            var expObjPropPmExpTestTitle = \"expectedObject variable, main object 0 property: expenditures, object \" + index + \" property: \";\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"sfsExpenditureID\";\r",
                          "            pm.expect(jsonData.expenditures[index].sfsExpenditureID).to.equal(expectedObject.expenditures[index].sfsExpenditureID);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"expenditureGroupCode\";\r",
                          "            pm.expect(jsonData.expenditures[index].expenditureGroupCode).to.equal(expectedObject.expenditures[index].expenditureGroupCode);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"expenditureTypeCode\";\r",
                          "            pm.expect(jsonData.expenditures[index].expenditureTypeCode).to.equal(expectedObject.expenditures[index].expenditureTypeCode);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"name\";\r",
                          "            pm.expect(jsonData.expenditures[index].name).to.equal(expectedObject.expenditures[index].name);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"displayName\";\r",
                          "            pm.expect(jsonData.expenditures[index].displayName).to.equal(expectedObject.expenditures[index].displayName);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"amount\";\r",
                          "            pm.expect(jsonData.expenditures[index].amount).to.equal(expectedObject.expenditures[index].amount);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"frequencyCode\";\r",
                          "            pm.expect(jsonData.expenditures[index].frequencyCode).to.equal(expectedObject.expenditures[index].frequencyCode);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"notes\";\r",
                          "            pm.expect(jsonData.expenditures[index].notes).to.equal(expectedObject.expenditures[index].notes);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"inArrears\";\r",
                          "            pm.expect(jsonData.expenditures[index].inArrears).to.equal(expectedObject.expenditures[index].inArrears);\r",
                          "\r",
                          "            CurrentPmExpectTest = expObjPropPmExpTestTitle + \"inArrangement\";\r",
                          "            pm.expect(jsonData.expenditures[index].inArrangement).to.equal(expectedObject.expenditures[index].inArrangement);\r",
                          "\r",
                          "            var expResultData = \"Test\" + \" \" + \"2.\" + (index + 1) + \" \" + \"data: \" +\r",
                          "                \" \" + \"\\n\\nJsonFile Server data: \" +\r",
                          "                \"\\n sfsExpenditureID: \" + jsonData.expenditures[index].sfsExpenditureID +\r",
                          "                \"\\n expenditureGroupCode: \" + jsonData.expenditures[index].expenditureGroupCode +\r",
                          "                \"\\n expenditureTypeCode: \" + jsonData.expenditures[index].expenditureTypeCode +\r",
                          "                \"\\n name: \" + jsonData.expenditures[index].name +\r",
                          "                \"\\n displayName: \" + jsonData.expenditures[index].displayName +\r",
                          "                \"\\n amount: \" + jsonData.expenditures[index].amount +\r",
                          "                \"\\n frequencyCode: \" + jsonData.expenditures[index].frequencyCode +\r",
                          "                \"\\n notes: \" + jsonData.expenditures[index].notes +\r",
                          "                \"\\n inArrears: \" + jsonData.expenditures[index].inArrears +\r",
                          "                \"\\n inArrangement: \" + jsonData.expenditures[index].inArrangement +\r",
                          "\r",
                          "                \" \" + \"\\n\\nExpected Data: \" +\r",
                          "                \"\\n sfsExpenditureID: \" + expectedObject.expenditures[index].sfsExpenditureID +\r",
                          "                \"\\n expenditureGroupCode: \" + expectedObject.expenditures[index].expenditureGroupCode +\r",
                          "                \"\\n expenditureTypeCode: \" + expectedObject.expenditures[index].expenditureTypeCode +\r",
                          "                \"\\n name: \" + expectedObject.expenditures[index].name +\r",
                          "                \"\\n displayName: \" + expectedObject.expenditures[index].displayName +\r",
                          "                \"\\n amount: \" + expectedObject.expenditures[index].amount +\r",
                          "                \"\\n frequencyCode: \" + expectedObject.expenditures[index].frequencyCode +\r",
                          "                \"\\n notes: \" + expectedObject.expenditures[index].notes +\r",
                          "                \"\\n inArrears: \" + expectedObject.expenditures[index].inArrears +\r",
                          "                \"\\n inArrangement: \" + expectedObject.expenditures[index].inArrangement;\r",
                          "\r",
                          "            console.log(expResultData);\r",
                          "\r",
                          "            pm.test(\"Expenditures property objects test\" + \" \" + \"2\" + \".\" + (index + 1) + \" \" + \"-\" + \" \" + \"object\" +\r",
                          "                \" \" + index + \" \" + \"-\" + \" \" + \"PASSED - Expected data is Present!\", () => true);\r",
                          "\r",
                          "        } catch (e) {\r",
                          "            pm.test(\"Expenditures property objects test\" + \" \" + \"2\" + \".\" + (index + 1) + \" \" + \"-\" + \" \" + \"object\" +\r",
                          "                \" \" + index + \" \" + \"-\" + \" \" + \"FAILED - Expected data is not Present!\", () => {\r",
                          "                    throw new Error(e.message + \" in \" + CurrentPmExpectTest)\r",
                          "                });\r",
                          "            console.log(\"Expenditures property objects test\" + \" \" + \"2\" + \".\" + (index + 1) + \" \" + \"-\" + \" \" + \"object\" + \" \" +\r",
                          "                index + \" \" + \"-\" + \"FAILED - Expected data is not Present!\" + \"\\n\\n\" + e + \" in \" + CurrentPmExpectTest);\r",
                          "            continue expLoop;\r",
                          "        }\r",
                          "    }\r",
                          "\r",
                          "let jsonDataInc = jsonData.incomes;\r",
                          "incLoop:\r",
                          "    for (var incIndex = 0; incIndex < jsonDataInc.length; incIndex++) {\r",
                          "        try {\r",
                          "            var incObjPropPmExpTestTitle = \"expectedObject variable, main object 0 property: incomes, object \" + incIndex + \" property: \";\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"sfsIncomeID\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].sfsIncomeID).to.equal(expectedObject.incomes[incIndex].sfsIncomeID);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"incomeGroupCode\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].incomeGroupCode).to.equal(expectedObject.incomes[incIndex].incomeGroupCode);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"incomeTypeCode\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].incomeTypeCode).to.equal(expectedObject.incomes[incIndex].incomeTypeCode);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"name\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].name).to.equal(expectedObject.incomes[incIndex].name);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"displayName\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].displayName).to.equal(expectedObject.incomes[incIndex].displayName);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"amount\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].amount).to.equal(expectedObject.incomes[incIndex].amount);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"frequencyCode\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].frequencyCode).to.equal(expectedObject.incomes[incIndex].frequencyCode);\r",
                          "\r",
                          "            CurrentPmExpectTest = incObjPropPmExpTestTitle + \"notes\";\r",
                          "            pm.expect(jsonData.incomes[incIndex].notes).to.equal(expectedObject.incomes[incIndex].notes);\r",
                          "\r",
                          "            var incResultData = \"Test\" + \" \" + \"3.\" + (incIndex + 1) + \" \" + \"data: \" +\r",
                          "                \" \" + \"\\n\\nJsonFile Server data: \" +\r",
                          "                \"\\n sfsIncomeID: \" + jsonData.incomes[incIndex].sfsIncomeID +\r",
                          "                \"\\n incomeGroupCode: \" + jsonData.incomes[incIndex].incomeGroupCode +\r",
                          "                \"\\n incomeTypeCode: \" + jsonData.incomes[incIndex].incomeTypeCode +\r",
                          "                \"\\n name: \" + jsonData.incomes[incIndex].name +\r",
                          "                \"\\n displayName: \" + jsonData.incomes[incIndex].displayName +\r",
                          "                \"\\n amount: \" + jsonData.incomes[incIndex].amount +\r",
                          "                \"\\n frequencyCode: \" + jsonData.incomes[incIndex].frequencyCode +\r",
                          "                \"\\n notes: \" + jsonData.incomes[incIndex].notes +\r",
                          "\r",
                          "                \" \" + \"\\n\\nExpected data: \" +\r",
                          "                \"\\n sfsIncomeID: \" + expectedObject.incomes[incIndex].sfsIncomeID +\r",
                          "                \"\\n incomeGroupCode: \" + expectedObject.incomes[incIndex].incomeGroupCode +\r",
                          "                \"\\n incomeTypeCode: \" + expectedObject.incomes[incIndex].incomeTypeCode +\r",
                          "                \"\\n name: \" + expectedObject.incomes[incIndex].name +\r",
                          "                \"\\n displayName: \" + expectedObject.incomes[incIndex].displayName +\r",
                          "                \"\\n amount: \" + expectedObject.incomes[incIndex].amount +\r",
                          "                \"\\n frequencyCode: \" + expectedObject.incomes[incIndex].frequencyCode +\r",
                          "                \"\\n notes: \" + expectedObject.incomes[incIndex].notes;\r",
                          "\r",
                          "            console.log(incResultData);\r",
                          "\r",
                          "\r",
                          "            pm.test(\"Incomes property objects test\" + \" \" + \"3\" + \".\" + (incIndex + 1) + \" \" + \"-\" + \" \" + \"object\" +\r",
                          "                \" \" + incIndex + \" \" + \"-\" + \" \" + \"Passed - Expected data is Present!\", () => true);\r",
                          "\r",
                          "        } catch (e) {\r",
                          "            pm.test(\"Incomes property objects test\" + \" \" + \"3\" + \".\" + (incIndex + 1) + \" \" + \"-\" + \" \" + \"object\" +\r",
                          "                \" \" + incIndex + \" \" + \"-\" + \" \" + \"FAILED - Expected data is not Present!\", () => {\r",
                          "                    throw new Error(e.message + \" in \" + CurrentPmExpectTest)\r",
                          "                });\r",
                          "            console.log(\"Incomes property objects test\" + \" \" + \"3\" + \".\" + (incIndex + 1) + \" \" + \"-\" + \" \" + \"object\" +\r",
                          "                \" \" + incIndex + \" \" + \"-\" + \" \" + \"FAILED - Expected data is not Present!\" + \" \" + \"\\n\\n\" + e + \" in \" + CurrentPmExpectTest);\r",
                          "            continue incLoop;\r",
                          "        }\r",
                          "    }\r",
                          "    */\r",
                          "    pm.test(\"Ajv Test Schema Response: \", function() {\r",
                          "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                          "    });\r",
                          "    \r",
                          "    pm.test(\"TEST2: Status code Check\", function() {\r",
                          "    pm.response.to.have.status(200);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"TEST3: Response Header Checks\", function() {\r",
                          "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                          "});\r",
                          "\r",
                          "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});\r",
                          "    ///NEGATIVE TESTS\r",
                          "\r",
                          "pm.test(\"Neg Test 01: Check SFSID isn't empty\", function () {\r",
                          "     pm.expect(\"{{SFSID}}\").to.not.be.empty;\r",
                          "});\r",
                          " pm.test(\"Neg Test 02: Check if string is empty\", function () {\r",
                          "     pm.expect('consumerDetail').to.not.be.empty;\r",
                          "});\r",
                          " pm.test(\"Neg Test 03: Check expenditureGroupCode isn't empty\", function () {\r",
                          "     pm.expect('expenditureGroupCode').to.not.be.empty;\r",
                          "});\r",
                          "pm.test(\"Incorrect field examaple\", function() {\r",
                          "    var expenGC = schema.required.sfsid;\r",
                          "    var booleanV = Boolean;\r",
                          "    pm.expect(expenGC).to.not.equal(booleanV);\r",
                          "    console.log(jsonData.toString());\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "e1524521-1625-43d1-afdf-7f02877c895c",
                        "exec": [
                          "if (pm.environment.get(\"OAuth_Timestamp\") == null) {\r",
                          "    console.log(\"OAuth timestamp null, check the environment\");\r",
                          "} else {\r",
                          "    var tokenDate = new Date(2010, 1, 1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if (tokenTimestamp) {\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }\r",
                          "    //console.log(\"timestamp is\"+tokenDate);\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if (!expiresInTime) {\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if ((new Date() - tokenDate) >= expiresInTime) {\r",
                          "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                          "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                          "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                          "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "                newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "}\r",
                          "//console.log(\"End of Pre-req script\");\r",
                          "\r",
                          "\r",
                          "/*\r",
                          "SELECT TOP (10) [SFSID] as 'sfs_id'\r",
                          "      ,[GroupID]\r",
                          "      ,[OriginalConsumerID] AS 'cnsmr_id'\r",
                          "FROM [dbo].[SFS]\r",
                          "\r",
                          "\r",
                          "\r",
                          "\r",
                          "SELECT * FROM dbo.sfs S FULL JOIN dbo.SFSExpenditure ON SFSExpenditure.SFSID = S.SFSID\r",
                          "--FULL JOIN dbo.SFSIncome I ON I.SFSID = S.SFSID\r",
                          "--FULL JOIN dbo.SFSSaving SS ON SS.SFSID = S.SFSID\r",
                          "--FULL JOIN dbo.SFSDescription D ON D.SFSID = S.SFSID\r",
                          "--FULL JOIN dbo.SFSCreditor C ON C.SFSID = S.SFSID\r",
                          "\r",
                          "\r",
                          "*/"
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "f2aa0d36-50a3-44fe-ae95-139a902320b6",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "GET",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}"
                      },
                      {
                        "key": "correlation-id",
                        "type": "text",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Origin",
                        "type": "text",
                        "value": "Postman"
                      },
                      {
                        "key": "Username",
                        "type": "text",
                        "value": "LSimpson"
                      }
                    ],
                    "url": {
                      "raw": "{{BaseURL}}/sfs/fulldetails/:id",
                      "host": [
                        "{{BaseURL}}"
                      ],
                      "path": [
                        "sfs",
                        "fulldetails",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "cac0f2a3-da5c-42b3-8b1a-3a0e73dc28ae",
                          "type": "string",
                          "description": "uuid"
                        }
                      ]
                    },
                    "description": "Gets SFS for the specified ID"
                  },
                  "response": [
                    {
                      "id": "0393412e-e839-4c5d-9d0d-636037c1872c",
                      "name": "Success",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/instance/<uuid>"
                      },
                      "status": "OK",
                      "code": 200,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"priorityBillsInArrangements\": \"<boolean>\",\n \"priorityBillsUpToDate\": \"<boolean>\",\n \"status\": \"<string>\",\n \"sfsType\": \"<string>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<integer>\",\n \"copyNotes\": \"<string>\",\n \"creditors\": [\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"expenditures\": [\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  },\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  }\n ],\n \"incomes\": [\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"savings\": [\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"consumerDetail\": {\n  \"numberInHousehold\": \"<integer>\",\n  \"numberOfChildrenUnder16\": \"<integer>\",\n  \"numberOfChildren16To18\": \"<integer>\",\n  \"numberOfVehicles\": \"<integer>\",\n  \"householdTypeCode\": \"<integer>\",\n  \"residenceStatusCode\": \"<integer>\",\n  \"employmentStatusCode\": \"<integer>\",\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"sfsConsumerDetailID\": \"<uuid>\",\n  \"outstandingDebt\": \"<double>\",\n  \"householdContributorCode\": \"<integer>\",\n  \"nameOfEmployer\": \"<string>\",\n  \"partnersEmploymentStatusCode\": \"<integer>\",\n  \"houseContributorEmploymentStatusCode\": \"<integer>\",\n  \"isInPaidEmployment\": \"<boolean>\",\n  \"isPartnerInPaidEmployment\": \"<boolean>\",\n  \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n  \"propertyValue\": \"<double>\",\n  \"mortgageAmount\": \"<double>\",\n  \"doYouHaveOutstandingDebt\": \"<boolean>\",\n  \"doYouReceivePension\": \"<boolean>\",\n  \"doYouReceiveChildSupport\": \"<boolean>\",\n  \"doYouReceiveBenefits\": \"<boolean>\",\n  \"otherDetails\": \"<string>\",\n  \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n  \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n  \"areHouseContributorsInPaydEmployment\": \"<boolean>\"\n },\n \"description\": {\n  \"sfsDescriptionID\": \"<uuid>\",\n  \"value\": \"<string>\"\n }\n}"
                    },
                    {
                      "id": "713514db-c99a-4761-9e1d-9d81ae159fca",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/instance/<uuid>"
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "f74b1dcd-8fbe-4985-a2f0-de9ce94dd555",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "GET",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/instance/<uuid>"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                },
                {
                  "name": "deletesfs",
                  "event": [
                    {
                      "listen": "test",
                      "script": {
                        "id": "721bc777-a2ca-496b-9a47-aa3e2d93eb17",
                        "exec": [
                          "    pm.test(\"TEST2: Status code Check\", function() {\r",
                          "    pm.response.to.have.status(204);\r",
                          "});\r",
                          "\r",
                          "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                          "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                          "});"
                        ],
                        "type": "text/javascript"
                      }
                    },
                    {
                      "listen": "prerequest",
                      "script": {
                        "id": "fb11cae0-28a0-48c3-8a9c-1cf212fb68e9",
                        "exec": [
                          "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                          "{\r",
                          "    console.log(\"OAuth timestamp null, check the environment\");\r",
                          "} else {\r",
                          "    var tokenDate = new Date(2010,1,1);\r",
                          "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                          "    if(tokenTimestamp){\r",
                          "        tokenDate = Date.parse(tokenTimestamp);\r",
                          "    }\r",
                          "    //console.log(\"timestamp is\"+tokenDate);\r",
                          "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                          "    if(!expiresInTime){\r",
                          "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                          "    }\r",
                          "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                          "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                          "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                          "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                          "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                          "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                          "\r",
                          "        let getTokenRequest = {\r",
                          "            method: 'POST',\r",
                          "            url: tokenUrl,\r",
                          "            auth: {\r",
                          "                type: \"basic\",\r",
                          "                basic: [\r",
                          "                    { key: \"username\", value: clientId },\r",
                          "                    { key: \"password\", value: clientSecret }\r",
                          "                ]\r",
                          "            },\r",
                          "            body: {\r",
                          "                mode: 'formdata',\r",
                          "                formdata: [\r",
                          "                    { key: 'grant_type', value: 'client_credentials' },\r",
                          "                    { key: 'scope', value: scope }\r",
                          "                ]\r",
                          "            }\r",
                          "        };\r",
                          "\r",
                          "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                          "            let jsonResponse = response.json(),\r",
                          "            newAccessToken = jsonResponse.access_token;\r",
                          "            //console.log({ err, jsonResponse, newAccessToken });\r",
                          "\r",
                          "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                          "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                          "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                          "        });\r",
                          "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                          "    }\r",
                          "}\r",
                          "//console.log(\"End of Pre-req script\");\r",
                          ""
                        ],
                        "type": "text/javascript"
                      }
                    }
                  ],
                  "_postman_id": "b97d1827-48c6-4343-a7e7-709f7830c2b1",
                  "protocolProfileBehavior": {
                    "disableBodyPruning": true
                  },
                  "request": {
                    "auth": {
                      "type": "oauth2",
                      "oauth2": {
                        "accessToken": "{{OAuth_Token}}",
                        "tokenType": "Bearer",
                        "addTokenTo": "header"
                      }
                    },
                    "method": "DELETE",
                    "header": [
                      {
                        "key": "Ocp-Apim-Subscription-Key-South",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-South}}"
                      },
                      {
                        "key": "Ocp-Apim-Subscription-Key-West",
                        "type": "text",
                        "value": "{{Ocp-Apim-Subscription-Key-West}}"
                      },
                      {
                        "key": "correlation-id",
                        "type": "text",
                        "value": "{{$guid}}"
                      },
                      {
                        "key": "Content-Type",
                        "type": "text",
                        "value": "application/json"
                      },
                      {
                        "key": "Origin",
                        "value": "Postman",
                        "type": "text"
                      },
                      {
                        "key": "Username",
                        "value": "Test User",
                        "type": "text"
                      }
                    ],
                    "url": {
                      "raw": "{{BaseURL}}/sfs/instance/:id",
                      "host": [
                        "{{BaseURL}}"
                      ],
                      "path": [
                        "sfs",
                        "instance",
                        ":id"
                      ],
                      "variable": [
                        {
                          "key": "id",
                          "value": "{{sfsid_delete}}",
                          "type": "string",
                          "description": {
                            "content": "",
                            "type": "text/plain"
                          }
                        }
                      ]
                    },
                    "description": "Deletes SFS from the database"
                  },
                  "response": [
                    {
                      "id": "014cebf7-f45c-4088-85b1-e0037f061701",
                      "name": "Success",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/instance/<uuid>"
                      },
                      "status": "No Content",
                      "code": 204,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "a50a129f-65ef-41f5-a72c-df5ebe257274",
                      "name": "Bad Request",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/instance/<uuid>"
                      },
                      "status": "Bad Request",
                      "code": 400,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    },
                    {
                      "id": "fcba3d0d-af70-441d-9252-bc602f873e5c",
                      "name": "Server Error",
                      "originalRequest": {
                        "method": "DELETE",
                        "header": [
                          {
                            "key": "Ocp-Apim-Subscription-Key-South",
                            "value": ""
                          }
                        ],
                        "url": "{{baseUrl}}/instance/<uuid>"
                      },
                      "status": "Internal Server Error",
                      "code": 500,
                      "_postman_previewlanguage": "json",
                      "header": [
                        {
                          "key": "Content-Type",
                          "value": "application/json"
                        }
                      ],
                      "cookie": [],
                      "responseTime": null,
                      "body": "\"<string>\""
                    }
                  ]
                }
              ],
              "_postman_id": "71c630a2-aabe-492e-87e4-c6a98e40ba95",
              "_postman_isSubFolder": true
            }
          ],
          "_postman_id": "3edff205-3b72-484d-930d-e41273bf2235",
          "_postman_isSubFolder": true
        },
        {
          "name": "addsfs",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b2ed470e-e4b0-4455-9910-5a4c56627963",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv= new Ajv ({logger:console}),",
                  "schema = ",
                  "{",
                  " \"required\": [",
                  "        \"sfsid\",",
                  "        \"groupID\",",
                  "        \"dateReceived\",",
                  "        \"priorityBillsInArrangements\",",
                  "        \"priorityBillsUpToDate\",",
                  "        \"statusCode\",",
                  "        \"status\",",
                  "        \"sfsTypeCode\",",
                  "        \"originalSFSID\",",
                  "        \"copyType\",",
                  "        \"copyNotes\",",
                  "        \"creditors\",",
                  "        \"expenditures\",",
                  "        \"incomes\",",
                  "        \"savings\",",
                  "        \"consumerDetail\",",
                  "        \"description\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"sfsid\": {",
                  "            \"$id\": \"#/properties/sfsid\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"groupID\": {",
                  "            \"$id\": \"#/properties/groupID\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"dateReceived\": {",
                  "            \"$id\": \"#/properties/dateReceived\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"priorityBillsInArrangements\": {",
                  "            \"$id\": \"#/properties/priorityBillsInArrangements\",",
                  "            \"type\": [\"boolean\", \"null\"]",
                  "        },",
                  "        \"priorityBillsUpToDate\": {",
                  "            \"$id\": \"#/properties/priorityBillsUpToDate\",",
                  "            \"type\": [\"boolean\", \"null\"]",
                  "        },",
                  "        \"statusCode\": {",
                  "            \"$id\": \"#/properties/statusCode\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"status\": {",
                  "            \"$id\": \"#/properties/status\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"sfsTypeCode\": {",
                  "            \"$id\": \"#/properties/sfsTypeCode\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"originalSFSID\": {",
                  "            \"$id\": \"#/properties/originalSFSID\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"copyType\": {",
                  "            \"$id\": \"#/properties/copyType\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"copyNotes\": {",
                  "            \"$id\": \"#/properties/copyNotes\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"creditors\": {",
                  "            \"items\": {",
                  "                \"properties\": {",
                  "                    \"sfsCreditorID\": {",
                  "                        \"$id\": \"#/properties/creditors/items/properties/sfsCreditorID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"creditorTypeCode\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/creditorTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"name\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/name\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"displayName\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/displayName\",",
                  "                         \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"totalBalance\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/totalBalance\",",
                  "                         \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"amount\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/amount\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "            },",
                  "            \"$id\": \"#/properties/creditors/items\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/creditors\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"expenditures\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"sfsExpenditureID\",",
                  "                    \"expenditureGroupCode\",",
                  "                    \"expenditureTypeCode\",",
                  "                    \"name\",",
                  "                    \"displayName\",",
                  "                    \"amount\",",
                  "                    \"frequencyCode\",",
                  "                    \"notes\",",
                  "                    \"inArrears\",",
                  "                    \"inArrangement\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"sfsExpenditureID\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/sfsExpenditureID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"expenditureGroupCode\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/expenditureGroupCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"expenditureTypeCode\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/expenditureTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"name\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/name\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"displayName\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/displayName\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"amount\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/amount\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"inArrears\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/inArrears\",",
                  "                        \"type\": [\"boolean\",\"null\"]",
                  "                    },",
                  "                    \"inArrangement\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/inArrangement\",",
                  "                        \"type\": [\"boolean\",\"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/expenditures/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/expenditures\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"incomes\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"sfsIncomeID\",",
                  "                    \"incomeGroupCode\",",
                  "                    \"incomeTypeCode\",",
                  "                    \"name\",",
                  "                    \"displayName\",",
                  "                    \"amount\",",
                  "                    \"frequencyCode\",",
                  "                    \"notes\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"sfsIncomeID\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/sfsIncomeID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"incomeGroupCode\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/incomeGroupCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"incomeTypeCode\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/incomeTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"name\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/name\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"displayName\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/displayName\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"amount\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/amount\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/incomes/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/incomes\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"savings\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"sfsSavingID\",",
                  "                    \"savingTypeCode\",",
                  "                    \"amount\",",
                  "                    \"frequencyCode\",",
                  "                    \"notes\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"sfsSavingID\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/sfsSavingID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"savingTypeCode\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/savingTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"amount\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/amount\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/savings/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/savings\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"consumerDetail\": {",
                  "            \"required\": [",
                  "                \"sfsConsumerDetailID\",",
                  "                \"outstandingDebt\",",
                  "                \"numberInHousehold\",",
                  "                \"numberOfChildrenUnder16\",",
                  "                \"numberOfChildren16To18\",",
                  "                \"numberOfVehicles\",",
                  "                \"householdTypeCode\",",
                  "                \"householdContributorCode\",",
                  "                \"residenceStatusCode\",",
                  "                \"nameOfEmployer\",",
                  "                \"employmentStatusCode\",",
                  "                \"partnersEmploymentStatusCode\",",
                  "                \"houseContributorEmploymentStatusCode\",",
                  "                \"isInPaidEmployment\",",
                  "                \"isPartnerInPaidEmployment\",",
                  "                \"isHouseContributorInPaidEmployment\",",
                  "                \"propertyValue\",",
                  "                \"mortgageAmount\",",
                  "                \"repayingDebtTypeCode\",",
                  "                \"doYouHaveOutstandingDebt\",",
                  "                \"doYouReceivePension\",",
                  "                \"doYouReceiveChildSupport\",",
                  "                \"doYouReceiveBenefits\",",
                  "                \"otherDetails\",",
                  "                \"doesAnyoneElseProvideIncome\",",
                  "                \"doHouseContributorsHaveBenefits\",",
                  "                \"areHouseContributorsInPaydEmployment\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"sfsConsumerDetailID\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/sfsConsumerDetailID\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"outstandingDebt\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/outstandingDebt\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"numberInHousehold\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberInHousehold\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"numberOfChildrenUnder16\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfChildrenUnder16\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"numberOfChildren16To18\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfChildren16To18\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"numberOfVehicles\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfVehicles\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"householdTypeCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/householdTypeCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"householdContributorCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/householdContributorCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"residenceStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/residenceStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"nameOfEmployer\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/nameOfEmployer\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"employmentStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/employmentStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"partnersEmploymentStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/partnersEmploymentStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"houseContributorEmploymentStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/houseContributorEmploymentStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"isInPaidEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/isInPaidEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"isPartnerInPaidEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/isPartnerInPaidEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"isHouseContributorInPaidEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/isHouseContributorInPaidEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"propertyValue\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/propertyValue\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"mortgageAmount\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/mortgageAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"repayingDebtTypeCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/repayingDebtTypeCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"doYouHaveOutstandingDebt\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouHaveOutstandingDebt\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doYouReceivePension\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceivePension\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doYouReceiveChildSupport\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveChildSupport\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doYouReceiveBenefits\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveBenefits\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"otherDetails\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/otherDetails\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"doesAnyoneElseProvideIncome\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doesAnyoneElseProvideIncome\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doHouseContributorsHaveBenefits\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doHouseContributorsHaveBenefits\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"areHouseContributorsInPaydEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/areHouseContributorsInPaydEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/consumerDetail\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        },",
                  "        \"description\": {",
                  "            \"required\": [",
                  "                \"sfsDescriptionID\",",
                  "                \"value\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"sfsDescriptionID\": {",
                  "                    \"$id\": \"#/properties/description/properties/sfsDescriptionID\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"value\": {",
                  "                    \"$id\": \"#/properties/description/properties/value\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/description\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  " pm.test(\"Ajv Test Schema Response: \", function() {",
                  "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "",
                  "",
                  "pm.test(\"TEST2: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "    ///NEGATIVE TESTS",
                  "",
                  "pm.test(\"Neg Test 01: Check SFSID isn't empty\", function () {",
                  "     pm.expect(\"{{SFSID}}\").to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 02: Check if string is empty\", function () {",
                  "     pm.expect('consumerDetail').to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 03: Check expenditureGroupCode isn't empty\", function () {",
                  "     pm.expect('expenditureGroupCode').to.not.be.empty;",
                  "});",
                  "pm.test(\"Incorrect field examaple\", function() {",
                  "    var expenGC = schema.required.sfsid;",
                  "    var booleanV = Boolean;",
                  "    pm.expect(expenGC).to.not.equal(booleanV);",
                  "    console.log(jsonData.toString());",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0d354ce2-025f-483c-82c9-c5a053f34fd4",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\") == null) {\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010, 1, 1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if (tokenTimestamp) {\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if (!expiresInTime) {\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if ((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "                newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  "\r",
                  "\r",
                  "///////////////CONSUMER DETAILS////////\r",
                  "const sfsStatusCode = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"sfsStatusCode\", sfsStatusCode);\r",
                  "console.log(\"SFS Status Code: \" + sfsStatusCode.toString());\r",
                  "\r",
                  "const numInHH = Math.floor(Math.random() * 5) + 1;\r",
                  "pm.globals.set(\"numInHH\", numInHH);\r",
                  "console.log(\"Number in Household: \" + numInHH.toString());\r",
                  "\r",
                  "const numOfChildU16 = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"numOfChildU16\", numOfChildU16);\r",
                  "console.log(\"Number of Children Under 16: \" + numOfChildU16.toString());\r",
                  "\r",
                  "const numOfChild16To18 = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"numOfChild16To18\", numOfChild16To18);\r",
                  "console.log(\"Number of Children 16 To 18: \" + numOfChild16To18);\r",
                  "\r",
                  "\r",
                  "const numOfVehicles = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"numOfVehicles\", numOfVehicles);\r",
                  "console.log(\"Number of Vehicles: \" + numOfVehicles.toString());\r",
                  "\r",
                  "const hhTypeCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"hhTypeCode\", hhTypeCode);\r",
                  "console.log(\"Household Type Code: \" + hhTypeCode.toString());\r",
                  "\r",
                  "const hhContCode = Math.floor(Math.random() * 4) + 1;\r",
                  "pm.globals.set(\"hhContCode\", hhContCode);\r",
                  "console.log(\"Household Contributor Code: \" + hhContCode.toString());\r",
                  "\r",
                  "const rsCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"rsCode\", rsCode);\r",
                  "console.log(\"Residence Status Code: \" + rsCode.toString());\r",
                  "\r",
                  "const propertyValue = Math.floor(Math.random() * 150000) + 1;\r",
                  "pm.globals.set(\"propertyValue\", propertyValue);\r",
                  "console.log(\"Property Value: \" + propertyValue.toString)\r",
                  "\r",
                  "const rdCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"rdCode\", rdCode);\r",
                  "console.log(\"Repaying Debt Type Code: \" + rdCode.toString());\r",
                  "\r",
                  "\r",
                  "const doYouHaveOutstandingDebt = Math.random() >=0.5;\r",
                  "pm.globals.set(\"doYouHaveOutstandingDebt\", doYouHaveOutstandingDebt);\r",
                  "console.log(\"Do You Have Any Outstanding Debt?: \" + doYouHaveOutstandingDebt.toString());\r",
                  "if (doYouHaveOutstandingDebt ===true){\r",
                  "    const outstandingDebt = Math.floor((Math.random() * 10000) + 1);\r",
                  "pm.environment.set(\"outstandingDebt\", outstandingDebt);\r",
                  "console.log(\"Outstanding Debt: \" + outstandingDebt.toString());\r",
                  "    }\r",
                  "else if (doYouHaveOutstandingDebt ===false){\r",
                  "   const outstandingDebt = null;\r",
                  "    pm.environment.set(\"outstandingDebt\", outstandingDebt);\r",
                  "    }\r",
                  "\r",
                  "\r",
                  " \r",
                  "const mortgageAmount = Math.floor(Math.random() * 150000) + 1;\r",
                  "pm.globals.set(\"mortgageAmount\", mortgageAmount);\r",
                  "console.log(\"Mortgage Amount: \" + mortgageAmount.toString());\r",
                  "\r",
                  "const pensionReceive =  Math.random() >= 0.5;\r",
                  "pm.globals.set(\"pensionReceive\", pensionReceive);\r",
                  "console.log(\"Do you receive a Pension?: \" + pensionReceive.toString());\r",
                  "\r",
                  "const doYouReceiveChildSupport = Math.random() >=0.5;\r",
                  "pm.globals.set(\"doYouReceiveChildSupport\", doYouReceiveChildSupport);\r",
                  "console.log(\"Do you receive Child Support?: \" +doYouReceiveChildSupport.toString());\r",
                  "\r",
                  "const doYouReceiveBenefits = Math.random() >=0.2;\r",
                  "pm.globals.set(\"doYouReceiveBenefits\", doYouReceiveBenefits);\r",
                  "console.log(\"Do you receive benefits?: \" +doYouReceiveBenefits.toString());\r",
                  "\r",
                  "const doesAnyoneElseProvideIncome = Math.random() >=0.1;\r",
                  "pm.globals.set(\"doesAnyoneElseProvideIncome\", doesAnyoneElseProvideIncome);\r",
                  "console.log(\"Does anyone else provide income?: \" +doesAnyoneElseProvideIncome.toString());\r",
                  "\r",
                  "\r",
                  "\r",
                  "const esCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"esCode\", esCode);\r",
                  "console.log(\"Employment Status Code: \" + esCode.toString());\r",
                  "\r",
                  "if (esCode < 4) {\r",
                  "    const isInPaidEmployment = true;\r",
                  "    pm.globals.set(\"isInPaidEmployment\", isInPaidEmployment);\r",
                  "    console.log(\"Is In Paid Employment?: \" + isInPaidEmployment.toString());\r",
                  "\r",
                  "}\r",
                  "else if (esCode > 3) {\r",
                  "    const isInPaidEmployment = false;\r",
                  "    pm.globals.set(\"isInPaidEmployment\", isInPaidEmployment);\r",
                  "    console.log(\"Is In Paid Employment?: \" + isInPaidEmployment);\r",
                  "}\r",
                  "\r",
                  "const pesCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"pesCode\", pesCode);\r",
                  "console.log(\"Partner Employment Status Code: \" + pesCode.toString());\r",
                  "\r",
                  "if (pesCode < 4) {\r",
                  "    const partnerEmploy = true;\r",
                  "    pm.globals.set(\"partnerEmploy\", partnerEmploy);\r",
                  "    console.log(\"Is In Paid Employment?: \" + partnerEmploy.toString());\r",
                  "}\r",
                  "    else if (pesCode > 3) {\r",
                  "    const partnerEmploy = false;\r",
                  "    pm.globals.set(\"partnerEmploy\", partnerEmploy);\r",
                  "    console.log(\"Is In Paid Employment?: \" + partnerEmploy.toString());\r",
                  "    }\r",
                  "\r",
                  "\r",
                  "/////////////////////////EXPENDITURES//////////////////////////////////////////\r",
                  "//setTimeout(function(){}, [1000]);\r",
                  "console.log (\"EXPENDITURES\");\r",
                  "const expenFreqCode = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"expenFreqCode\", expenFreqCode);\r",
                  "console.log(\"Expenditure Frequency code: \" + expenFreqCode.toString());\r",
                  "\r",
                  "const expenRandomAmount = Math.floor((Math.random() * 250) + 1);\r",
                  "pm.globals.set(\"expenRandomAmount\", expenRandomAmount);\r",
                  "\r",
                  "const expenGroupCode = Math.floor((Math.random() * 6 ) + 1);\r",
                  "console.log(\"Expenditure Groupcode Generated: \" + expenGroupCode.toString());\r",
                  "pm.globals.set(\"expenGroupCode\", expenGroupCode);\r",
                  "\r",
                  "var randomExpenTypeCode = 0;\r",
                  "\r",
                  "const priorityBills = [1, 2, 3, 4, 5, 6, 34, 35];\r",
                  "\r",
                  "const fixedCosts = [7, 8, 9, 10, 11, 12, 13, 14, 15];\r",
                  "\r",
                  "const travelCosts = [16, 17, 18, 19, 20, 21];\r",
                  "\r",
                  "const commsAndLeisureCosts = [22, 23, 24];\r",
                  "\r",
                  "const foodAndHousekeepingCosts = [25, 26, 28, 28, 29, 30];\r",
                  "\r",
                  "const personalCosts = [31, 32, 33];\r",
                  "\r",
                  "if (expenGroupCode ==1){\r",
                  "    randomExpenTypeCode = priorityBills[Math.floor(Math.random() * priorityBills.length)];\r",
                  "    pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "    console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (expenGroupCode ==2){\r",
                  "    randomExpenTypeCode = fixedCosts[Math.floor(Math.random() * fixedCosts.length)];\r",
                  "    pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "    console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "else if (expenGroupCode ==3){\r",
                  "     randomExpenTypeCode = travelCosts[Math.floor(Math.random() * travelCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (expenGroupCode ==4){\r",
                  "     randomExpenTypeCode = commsAndLeisureCosts[Math.floor(Math.random() * commsAndLeisureCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "else if (expenGroupCode ==5){\r",
                  "     randomExpenTypeCode = foodAndHousekeepingCosts[Math.floor(Math.random() * foodAndHousekeepingCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "\r",
                  "    }\r",
                  "else if (expenGroupCode ==6){\r",
                  "     randomExpenTypeCode = personalCosts[Math.floor(Math.random() * personalCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "        \r",
                  "    }\r",
                  "    \r",
                  "    \r",
                  "console.log(\"Expenditure Groupcode Generated: \" + expenGroupCode.toString());\r",
                  "\r",
                  "//////////////////////INCOMES/////////////////////////////////////////////////////////////////////\r",
                  "console.log (\"Incomes: \");\r",
                  "const incFreqCode = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"incFreqCode\", incFreqCode);\r",
                  "console.log(\"frequencyCode\" + incFreqCode.toString());\r",
                  "\r",
                  "const incFreqCodeTwo = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"incFreqCodeTwo\", incFreqCodeTwo);\r",
                  "console.log(\"frequencyCodeTwo\" + incFreqCodeTwo.toString());\r",
                  "\r",
                  "const incAmount = Math.floor((Math.random() * 500) + 1);\r",
                  "pm.globals.set(\"incAmount\", incAmount);\r",
                  "console.log(\"Income Amount: \" + incAmount.toString());\r",
                  "\r",
                  "\r",
                  "const incAmountTwo = Math.floor((Math.random() * 500) + 1);\r",
                  "pm.globals.set(\"incAmountTwo\", incAmountTwo);\r",
                  "console.log(\"Income AmountTwo: \" + incAmountTwo.toString());\r",
                  "\r",
                  "const ranIncGroupCode = Math.floor((Math.random() * 2 ) + 1);\r",
                  "console.log(\"Income Groupcode Generated: \" + ranIncGroupCode.toString());\r",
                  "pm.globals.set(\"ranIncGroupCode\", ranIncGroupCode);\r",
                  "\r",
                  "var incTypeCode = 0;\r",
                  "\r",
                  "const standard = [1, 2, 3, 4];\r",
                  "\r",
                  "const benefits = [5, 6, 7, 8, 9];\r",
                  "\r",
                  "if (ranIncGroupCode ==1){\r",
                  "    incTypeCode = standard[Math.floor(Math.random() * standard.length)];\r",
                  "    pm.globals.set(\"incTypeCode\", incTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + incTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (ranIncGroupCode ==2){\r",
                  "    incTypeCode = benefits[Math.floor(Math.random() * benefits.length)];\r",
                  "    pm.globals.set(\"incTypeCode\", incTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + incTypeCode.toString());\r",
                  "    }\r",
                  "const secondRanIncGroupCode = Math.floor((Math.random() * 2 ) + 1);\r",
                  "console.log(\"Income Groupcode Generated: \" + secondRanIncGroupCode.toString());\r",
                  "pm.globals.set(\"secondRanIncGroupCode\", secondRanIncGroupCode);\r",
                  "\r",
                  "var secondIncTypeCode = 0;\r",
                  "\r",
                  "const twoStandard = [1, 2, 3, 4];\r",
                  "\r",
                  "const twoBenefits = [5, 6, 7, 8, 9];\r",
                  "\r",
                  "if (secondRanIncGroupCode ==1){\r",
                  "    secondIncTypeCode = twoStandard[Math.floor(Math.random() * twoStandard.length)];\r",
                  "    pm.globals.set(\"secondIncTypeCode\", secondIncTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + secondIncTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (secondRanIncGroupCode ==2){\r",
                  "    secondIncTypeCode = twoBenefits[Math.floor(Math.random() * twoBenefits.length)];\r",
                  "    pm.globals.set(\"secondIncTypeCode\", secondIncTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + secondIncTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "\r",
                  "//////////////////////////SAVINGS///////////////////////////////////////////////////////////////\r",
                  "console.log(\"Savings: \");\r",
                  "\r",
                  "const savingsAmount = Math.floor((Math.random() * 150 ) + 1);\r",
                  "pm.globals.set(\"savingsAmount\", savingsAmount);\r",
                  "console.log (\"How much do you contribute to your savings?: \" + savingsAmount.toString());\r",
                  "\r",
                  "const savingsFreqCode = Math.floor((Math.random() * 4 ) + 1);\r",
                  "pm.globals.set(\"savingsFreqCode\", savingsFreqCode);\r",
                  "console.log(\"Savings Frequency Code: \" + savingsFreqCode.toString());\r",
                  "\r",
                  "\r",
                  "/*\r",
                  "SET NOCOUNT ON\r",
                  "IF OBJECT_ID('tempdb.dbo.@test', 'U') IS NOT NULL\r",
                  "  DROP TABLE test; \r",
                  "DECLARE @test TABLE\r",
                  "(\r",
                  "    cnsmr_id int NULL\r",
                  ");\r",
                  "INSERT INTO @test (cnsmr_id) SELECT DISTINCT TOP 5 C.cnsmr_id FROM dbo.cnsmr C\r",
                  "JOIN dbo.cnsmr_accnt_ownrs CAO ON CAO.cnsmr_id = C.cnsmr_id\r",
                  "WHERE CAO.cnsmr_accnt_ownrshp_typ_cd=2\r",
                  "INSERT INTO @test (cnsmr_id) SELECT DISTINCT TOP 5 C.cnsmr_id FROM dbo.cnsmr C\r",
                  "JOIN dbo.cnsmr_accnt_ownrs CAO ON CAO.cnsmr_id = C.cnsmr_id\r",
                  "WHERE CAO.cnsmr_accnt_ownrshp_typ_cd=1\r",
                  "INSERT INTO @test (cnsmr_id) SELECT DISTINCT TOP 5 LC.lnkd_cnsmr_frm_id FROM dbo.cnsmr C\r",
                  "JOIN dbo.lnkd_Cnsmr LC ON LC.lnkd_cnsmr_frm_id = C.cnsmr_id\r",
                  "*/"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "6d5a3bb4-38f4-4d31-aa64-040777f32ee3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test-User",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"consumerID\": \"1583262\",\r\n    \"statusCode\": \"{{sfsStatusCode}}\",\r\n    \"copyNotes\": \"\",\r\n    \"description\": {\r\n        \"value\": \"test add description\"\r\n    },\r\n    \"consumerDetail\": {\r\n        \"numberInHousehold\": \"{{numInHH}}\",\r\n        \"numberOfChildrenUnder16\": \"{{numOfChildU16}}\",\r\n        \"numberOfChildren16To18\": \"{{numOfChild16To18}}\",\r\n        \"numberOfVehicles\": \"{{numOfVehicles}}\",\r\n        \"householdTypeCode\": \"{{hhTypeCode}}\",\r\n        \"residenceStatusCode\": \"{{rsCode}}\",\r\n        \"employmentStatusCode\": \"{{esCode}}\",\r\n        \"repayingDebtTypeCode\": \"{{rdCode}}\",\r\n        \"outstandingDebt\": \"{{outstandingDebt}}\",\r\n        \"householdContributorCode\": \"{{hhContCode}}\",\r\n        \"nameOfEmployer\": \"TestLTD\",\r\n        \"partnersEmploymentStatusCode\": \"{{pesCode}}\",\r\n        \"houseContributorEmploymentStatusCode\": \"{{esCode}}\",\r\n        \"isInPaidEmployment\": \"{{isInPaidEmployment}}\",\r\n        \"isPartnerInPaidEmployment\": \"{{partnerEmploy}}\",\r\n        \"isHouseContributorInPaidEmployment\": \"{{isInPaidEmployment}}\",\r\n        \"propertyValue\": \"{{propertyValue}}\",\r\n        \"mortgageAmount\": \"{{mortgageAmount}}\",\r\n        \"doYouHaveOutstandingDebt\": \"{{doYouHaveOutstandingDebt}}\",\r\n        \"doYouReceivePension\": \"{{pensionReceive}}\",\r\n        \"doYouReceiveChildSupport\": \"{{doYouReceiveChildSupport}}\",\r\n        \"doYouReceiveBenefits\": \"{{doYouReceiveBenefits}}\",\r\n        \"otherDetails\": \"Test Consumer Details\",\r\n        \"doesAnyoneElseProvideIncome\": \"{{doesAnyoneElseProvideIncome}}\",\r\n        \"doHouseContributorsHaveBenefits\": \"{{doYouReceiveBenefits}}\",\r\n        \"areHouseContributorsInPaydEmployment\": \"{{isInPaidEmployment}}\"\r\n    },\r\n    \"expenditures\": [\r\n        {\r\n            \"frequencyCode\": \"{{expenFreqCode}}\",\r\n            \"notes\": \"Expen Test\",\r\n            \"expenditureGroupCode\": \"{{expenGroupCode}}\",\r\n            \"expenditureTypeCode\": \"{{randomExpenTypeCode}}\",\r\n            \"amount\": \"{{expenRandomAmount}}\"\r\n        }\r\n    ],\r\n    \"incomes\": [\r\n        {\r\n            \"amount\": \"{{incAmount}}\",\r\n            \"frequencyCode\": \"{{incFreqCode}}\",\r\n            \"incomeGroupCode\": \"{{ranIncGroupCode}}\",\r\n            \"incomeTypeCode\": \"{{incTypeCode}}\",\r\n            \"notes\": \"Test Income\"\r\n        },\r\n        {\r\n            \"amount\": \"{{incAmountTwo}}\",\r\n            \"frequencyCode\": \"{{incFreqCodeTwo}}\",\r\n            \"incomeGroupCode\": \"{{secondRanIncGroupCode}}\",\r\n            \"incomeTypeCode\": \"{{secondIncTypeCode}}\",\r\n            \"notes\": \"Test Income Two\"\r\n        }\r\n    ],\r\n    \"savings\": [\r\n        {\r\n            \"savingTypeCode\": \"1\",\r\n            \"amount\": \"{{savingsAmount}}\",\r\n            \"frequencyCode\": \"{{savingsFreqCode}}\",\r\n            \"notes\": \"Test Savings Amount\"\r\n        }\r\n    ]\r\n}\r\n",
              "options": {
                "raw": {}
              }
            },
            "url": "{{BaseURL}}/sfs/fulldetails",
            "description": "Creates the requested SFS in the database"
          },
          "response": [
            {
              "id": "90b3ddf0-17f3-4b52-83c6-4e395ad797e9",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"<string>\",\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"priorityBillsInArrangements\": \"<boolean>\",\n    \"priorityBillsUpToDate\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"sfsType\": \"<string>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<integer>\",\n    \"copyNotes\": \"<string>\",\n    \"description\": {\n        \"sfsDescriptionID\": \"<uuid>\",\n        \"value\": \"<string>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"consumerDetail\": {\n        \"numberInHousehold\": \"<integer>\",\n        \"numberOfChildrenUnder16\": \"<integer>\",\n        \"numberOfChildren16To18\": \"<integer>\",\n        \"numberOfVehicles\": \"<integer>\",\n        \"householdTypeCode\": \"<integer>\",\n        \"residenceStatusCode\": \"<integer>\",\n        \"employmentStatusCode\": \"<integer>\",\n        \"repayingDebtTypeCode\": \"<integer>\",\n        \"sfsConsumerDetailID\": \"<uuid>\",\n        \"outstandingDebt\": \"<double>\",\n        \"householdContributorCode\": \"<integer>\",\n        \"nameOfEmployer\": \"<string>\",\n        \"partnersEmploymentStatusCode\": \"<integer>\",\n        \"houseContributorEmploymentStatusCode\": \"<integer>\",\n        \"isInPaidEmployment\": \"<boolean>\",\n        \"isPartnerInPaidEmployment\": \"<boolean>\",\n        \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n        \"propertyValue\": \"<double>\",\n        \"mortgageAmount\": \"<double>\",\n        \"doYouHaveOutstandingDebt\": \"<boolean>\",\n        \"doYouReceivePension\": \"<boolean>\",\n        \"doYouReceiveChildSupport\": \"<boolean>\",\n        \"doYouReceiveBenefits\": \"<boolean>\",\n        \"otherDetails\": \"<string>\",\n        \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n        \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n        \"areHouseContributorsInPaydEmployment\": \"<boolean>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"creditors\": [\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"expenditures\": [\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"incomes\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"savings\": [\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/addsfs"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "9e81a897-5846-49dc-96f0-3707b7e4ce44",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"<string>\",\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"priorityBillsInArrangements\": \"<boolean>\",\n    \"priorityBillsUpToDate\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"sfsType\": \"<string>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<integer>\",\n    \"copyNotes\": \"<string>\",\n    \"description\": {\n        \"sfsDescriptionID\": \"<uuid>\",\n        \"value\": \"<string>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"consumerDetail\": {\n        \"numberInHousehold\": \"<integer>\",\n        \"numberOfChildrenUnder16\": \"<integer>\",\n        \"numberOfChildren16To18\": \"<integer>\",\n        \"numberOfVehicles\": \"<integer>\",\n        \"householdTypeCode\": \"<integer>\",\n        \"residenceStatusCode\": \"<integer>\",\n        \"employmentStatusCode\": \"<integer>\",\n        \"repayingDebtTypeCode\": \"<integer>\",\n        \"sfsConsumerDetailID\": \"<uuid>\",\n        \"outstandingDebt\": \"<double>\",\n        \"householdContributorCode\": \"<integer>\",\n        \"nameOfEmployer\": \"<string>\",\n        \"partnersEmploymentStatusCode\": \"<integer>\",\n        \"houseContributorEmploymentStatusCode\": \"<integer>\",\n        \"isInPaidEmployment\": \"<boolean>\",\n        \"isPartnerInPaidEmployment\": \"<boolean>\",\n        \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n        \"propertyValue\": \"<double>\",\n        \"mortgageAmount\": \"<double>\",\n        \"doYouHaveOutstandingDebt\": \"<boolean>\",\n        \"doYouReceivePension\": \"<boolean>\",\n        \"doYouReceiveChildSupport\": \"<boolean>\",\n        \"doYouReceiveBenefits\": \"<boolean>\",\n        \"otherDetails\": \"<string>\",\n        \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n        \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n        \"areHouseContributorsInPaydEmployment\": \"<boolean>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"creditors\": [\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"expenditures\": [\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"incomes\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"savings\": [\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/addsfs"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "b00d55c7-2f7c-4aa8-b830-a6af992780a5",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"<string>\",\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"priorityBillsInArrangements\": \"<boolean>\",\n    \"priorityBillsUpToDate\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"sfsType\": \"<string>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<integer>\",\n    \"copyNotes\": \"<string>\",\n    \"description\": {\n        \"sfsDescriptionID\": \"<uuid>\",\n        \"value\": \"<string>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"consumerDetail\": {\n        \"numberInHousehold\": \"<integer>\",\n        \"numberOfChildrenUnder16\": \"<integer>\",\n        \"numberOfChildren16To18\": \"<integer>\",\n        \"numberOfVehicles\": \"<integer>\",\n        \"householdTypeCode\": \"<integer>\",\n        \"residenceStatusCode\": \"<integer>\",\n        \"employmentStatusCode\": \"<integer>\",\n        \"repayingDebtTypeCode\": \"<integer>\",\n        \"sfsConsumerDetailID\": \"<uuid>\",\n        \"outstandingDebt\": \"<double>\",\n        \"householdContributorCode\": \"<integer>\",\n        \"nameOfEmployer\": \"<string>\",\n        \"partnersEmploymentStatusCode\": \"<integer>\",\n        \"houseContributorEmploymentStatusCode\": \"<integer>\",\n        \"isInPaidEmployment\": \"<boolean>\",\n        \"isPartnerInPaidEmployment\": \"<boolean>\",\n        \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n        \"propertyValue\": \"<double>\",\n        \"mortgageAmount\": \"<double>\",\n        \"doYouHaveOutstandingDebt\": \"<boolean>\",\n        \"doYouReceivePension\": \"<boolean>\",\n        \"doYouReceiveChildSupport\": \"<boolean>\",\n        \"doYouReceiveBenefits\": \"<boolean>\",\n        \"otherDetails\": \"<string>\",\n        \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n        \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n        \"areHouseContributorsInPaydEmployment\": \"<boolean>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"creditors\": [\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"expenditures\": [\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"incomes\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"savings\": [\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/addsfs"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"priorityBillsInArrangements\": \"<boolean>\",\n \"priorityBillsUpToDate\": \"<boolean>\",\n \"status\": \"<string>\",\n \"sfsType\": \"<string>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<integer>\",\n \"copyNotes\": \"<string>\",\n \"creditors\": [\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"expenditures\": [\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  },\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  }\n ],\n \"incomes\": [\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"savings\": [\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"consumerDetail\": {\n  \"numberInHousehold\": \"<integer>\",\n  \"numberOfChildrenUnder16\": \"<integer>\",\n  \"numberOfChildren16To18\": \"<integer>\",\n  \"numberOfVehicles\": \"<integer>\",\n  \"householdTypeCode\": \"<integer>\",\n  \"residenceStatusCode\": \"<integer>\",\n  \"employmentStatusCode\": \"<integer>\",\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"sfsConsumerDetailID\": \"<uuid>\",\n  \"outstandingDebt\": \"<double>\",\n  \"householdContributorCode\": \"<integer>\",\n  \"nameOfEmployer\": \"<string>\",\n  \"partnersEmploymentStatusCode\": \"<integer>\",\n  \"houseContributorEmploymentStatusCode\": \"<integer>\",\n  \"isInPaidEmployment\": \"<boolean>\",\n  \"isPartnerInPaidEmployment\": \"<boolean>\",\n  \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n  \"propertyValue\": \"<double>\",\n  \"mortgageAmount\": \"<double>\",\n  \"doYouHaveOutstandingDebt\": \"<boolean>\",\n  \"doYouReceivePension\": \"<boolean>\",\n  \"doYouReceiveChildSupport\": \"<boolean>\",\n  \"doYouReceiveBenefits\": \"<boolean>\",\n  \"otherDetails\": \"<string>\",\n  \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n  \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n  \"areHouseContributorsInPaydEmployment\": \"<boolean>\"\n },\n \"description\": {\n  \"sfsDescriptionID\": \"<uuid>\",\n  \"value\": \"<string>\"\n }\n}"
            }
          ]
        },
        {
          "name": "calculateamountbyfrequency",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "32b8cd3c-ce80-4a0a-ba18-24abb4f060b3",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\") == null) {\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010, 1, 1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if (tokenTimestamp) {\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if (!expiresInTime) {\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if ((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "                newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in * 1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  "\r",
                  "\r",
                  "const aggFreqCode = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"aggFreqCode\", aggFreqCode);\r",
                  "console.log(\"Frequency Code: \" + aggFreqCode.toString())\r",
                  "\r",
                  "const amountOne = Math.floor((Math.random() * 450 ) + 1);\r",
                  "pm.globals.set(\"amountOne\", amountOne);\r",
                  "console.log(\"Amount One: \" + amountOne.toString());\r",
                  "\r",
                  "const freqOne = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"freqOne\", freqOne);\r",
                  "console.log(\"Frequency One: \" + freqOne.toString());\r",
                  "\r",
                  "const amountTwo = Math.floor((Math.random() + 450) + 1);\r",
                  "pm.globals.set(\"amountTwo\", amountTwo);\r",
                  "console.log(\"Amount Two: \" + amountTwo.toString());\r",
                  "\r",
                  "const freqTwo = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"freqTwo\", freqTwo);\r",
                  "console.log(\"Frequency Two: \" + freqTwo.toString());\r",
                  "\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "578545f6-4cd9-4f26-baed-0c3d09c7a248",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "var refRequest = request;",
                  "var apiResponse = responseBody;",
                  " ",
                  " //Build Average Response",
                  "console.log(\"Average response time \" + responseTime + \"ms\");",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "",
                  " pm.test(\"TEST01: Successful POST request\", function () {",
                  "  pm.expect(pm.response.code).to.be.oneOf([200,201,202]);",
                  "});",
                  "",
                  "pm.test(\"TEST04: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"TEST06: Response should be okay to process\", function () { ",
                  "    pm.response.to.not.be.error; ",
                  "    pm.response.to.not.have.jsonBody(\"error\"); ",
                  "});",
                  "pm.test(\"TEST07: Error Codes not present\", function () {",
                  "  pm.expect(pm.response.code).to.not.be.oneOf([204,400,500]);",
                  "});",
                  "",
                  "////////NEGATIVE TESTS///////////",
                  "pm.test(\"Neg Test 01: Check if schemaResponse isn't empty\", function () {",
                  "     pm.expect((apiResponse)).to.not.be.false;",
                  "});",
                  " pm.test(\"Neg Test 02: Check legacyID variable isn't empty\", function () {",
                  "     pm.expect('legacyID').to.not.be.empty;",
                  "});",
                  "pm.test(\"Neg Test 03: Check request body isn't empty\", function () {",
                  "    pm.expect(refRequest).to.not.be.empty;",
                  "});",
                  "pm.test(\"Neg Test 04: Response isn't empty\", function () {",
                  "    pm.expect(apiResponse).to.not.be.empty;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "fe2d1745-bd95-499a-95ef-dd5b30a6037a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test-User",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"aggregateByFrequencyCode\": \"{{aggFreqCode}}\",\n    \"AmountByFrequencyCollection\": [\n        {\n            \"amount\": \"{{amountOne}}\",\n            \"frequencyCode\": \"{{freqOne}}\"\n        },\n        {\n            \"amount\": \"{{amountTwo}}\",\n            \"frequencyCode\": \"{{freqTwo}}\"\n        }\n    ]\n\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{BaseURL}}/sfs/calculateamountbyfrequency",
            "description": "Calculates the Amount By Frequency"
          },
          "response": [
            {
              "id": "0afe0d83-dbfa-4960-80c7-35c82a6f6d57",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"aggregateByFrequencyCode\": \"<integer>\",\n    \"lstAmountByFrequencyCommand\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/calculateamountbyfrequency"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "441d21ca-83ee-4cac-8e36-2579684cae77",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"aggregateByFrequencyCode\": \"<integer>\",\n    \"lstAmountByFrequencyCommand\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/calculateamountbyfrequency"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<double>\""
            },
            {
              "id": "d7e6ae8e-f9ee-4be0-b21b-cd983729166a",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"aggregateByFrequencyCode\": \"<integer>\",\n    \"lstAmountByFrequencyCommand\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/calculateamountbyfrequency"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            }
          ]
        },
        {
          "name": "jointaccounts",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "339ec238-9875-4a6b-9ba2-cc5d51c95d76",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);\r",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));\r",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));\r",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
                  "var Ajv = require('ajv'),\r",
                  "ajv = new Ajv({logger: console}),\r",
                  "schema = \r",
                  "{\r",
                  "    \"items\": {\r",
                  "        \"$id\": \"#/items\",\r",
                  "        \"type\": \"string\"\r",
                  "    },\r",
                  "    \"$id\": \"http://example.org/root.json#\",\r",
                  "    \"type\": \"array\",\r",
                  "    \"definitions\": {},\r",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
                  "};\r",
                  " pm.test(\"Ajv Test Schema Response: \", function() {\r",
                  "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;\r",
                  "});\r",
                  "\r",
                  "\r",
                  "pm.test(\"TEST2: Status code Check\", function() {\r",
                  "    pm.response.to.have.status(200);\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST3: Response Header Checks\", function() {\r",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
                  "});\r",
                  "\r",
                  "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {\r",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
                  "});\r",
                  "    ///NEGATIVE TESTS\r",
                  "\r",
                  "pm.test(\"Incorrect field examaple\", function() {\r",
                  "    var expenGC = schema.required.sfsid;\r",
                  "    var booleanV = Boolean;\r",
                  "    pm.expect(expenGC).to.not.equal(booleanV);\r",
                  "    console.log(jsonData.toString());\r",
                  "});\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "46b97505-0d5f-4caa-941a-78d732fa27f4",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "1aeda559-b74d-4c2c-a783-4b9ff35b0ed5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Correlation-id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test User",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n        \"ownerSFSCopyModels\": [\r\n        {\r\n            \"consumerAccountOwner\": {\r\n                \"consumerAccountOwnerID\": \"1565863\",\r\n                \"consumerID\": \"1583178\",\r\n                \"legacyID\": \"15220933\",\r\n                \"consumerName\": \"Idelle Carico\",\r\n                \"consumerBirthDate\": \"1962-02-01 00:00:00.000\",\r\n                \"ownership\": \"Primary Owner\",\r\n                \"type\": \"null\",\r\n                \"attachDate\": \"2013-04-12T19:01:13.857\"\r\n            },\r\n            \"sfsid\": \"6d240bfb-ffb7-41ae-bb0b-b64e42170453\",\r\n            \"copyNotes\": \"null\"\r\n        },\r\n        {\r\n            \"consumerAccountOwner\": {\r\n                \"consumerAccountOwnerID\": \"1565885\",\r\n                \"consumerID\": \"1583200\",\r\n                \"legacyID\": \"124883\",\r\n                \"consumerName\": \"Latifa Blimka\",\r\n                \"consumerBirthDate\": \"1980-02-26 00:00:00.000\",\r\n                \"ownership\": \"null\",\r\n                \"type\": \"null\",\r\n                \"attachDate\": \"2020-04-03\"\r\n            },\r\n            \"sfsid\": \"ddfaf313-d9b8-4ff5-8a8d-54e30912e5e9\",\r\n            \"copyNotes\": \"null\"\r\n        }\r\n    ]\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{BaseURL}}/sfs/jointaccounts",
            "description": "Creates the requested SFS, against Joint Accounts"
          },
          "response": [
            {
              "id": "4587ae77-a6da-42b8-92db-0f760b75d0d0",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userName\": \"<string>\",\n    \"ownerSFSCopyModels\": [\n        {\n            \"consumerAccountOwner\": {\n                \"consumerAccountOwnerID\": \"<long>\",\n                \"consumerID\": \"<long>\",\n                \"legacyID\": \"<string>\",\n                \"consumerName\": \"<string>\",\n                \"consumerBirthDate\": \"<dateTime>\",\n                \"ownership\": \"<string>\",\n                \"type\": \"<string>\",\n                \"attachDate\": \"<dateTime>\"\n            },\n            \"sfsid\": \"<uuid>\",\n            \"copyNotes\": \"<string>\"\n        },\n        {\n            \"consumerAccountOwner\": {\n                \"consumerAccountOwnerID\": \"<long>\",\n                \"consumerID\": \"<long>\",\n                \"legacyID\": \"<string>\",\n                \"consumerName\": \"<string>\",\n                \"consumerBirthDate\": \"<dateTime>\",\n                \"ownership\": \"<string>\",\n                \"type\": \"<string>\",\n                \"attachDate\": \"<dateTime>\"\n            },\n            \"sfsid\": \"<uuid>\",\n            \"copyNotes\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/jointaccounts"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"priorityBillsInArrangements\": \"<boolean>\",\n \"priorityBillsUpToDate\": \"<boolean>\",\n \"status\": \"<string>\",\n \"sfsType\": \"<string>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<integer>\",\n \"copyNotes\": \"<string>\",\n \"creditors\": [\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"expenditures\": [\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  },\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  }\n ],\n \"incomes\": [\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"savings\": [\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"consumerDetail\": {\n  \"numberInHousehold\": \"<integer>\",\n  \"numberOfChildrenUnder16\": \"<integer>\",\n  \"numberOfChildren16To18\": \"<integer>\",\n  \"numberOfVehicles\": \"<integer>\",\n  \"householdTypeCode\": \"<integer>\",\n  \"residenceStatusCode\": \"<integer>\",\n  \"employmentStatusCode\": \"<integer>\",\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"sfsConsumerDetailID\": \"<uuid>\",\n  \"outstandingDebt\": \"<double>\",\n  \"householdContributorCode\": \"<integer>\",\n  \"nameOfEmployer\": \"<string>\",\n  \"partnersEmploymentStatusCode\": \"<integer>\",\n  \"houseContributorEmploymentStatusCode\": \"<integer>\",\n  \"isInPaidEmployment\": \"<boolean>\",\n  \"isPartnerInPaidEmployment\": \"<boolean>\",\n  \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n  \"propertyValue\": \"<double>\",\n  \"mortgageAmount\": \"<double>\",\n  \"doYouHaveOutstandingDebt\": \"<boolean>\",\n  \"doYouReceivePension\": \"<boolean>\",\n  \"doYouReceiveChildSupport\": \"<boolean>\",\n  \"doYouReceiveBenefits\": \"<boolean>\",\n  \"otherDetails\": \"<string>\",\n  \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n  \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n  \"areHouseContributorsInPaydEmployment\": \"<boolean>\"\n },\n \"description\": {\n  \"sfsDescriptionID\": \"<uuid>\",\n  \"value\": \"<string>\"\n }\n}"
            },
            {
              "id": "7fcd5aaf-51ce-4933-9433-0e23edf31a70",
              "name": "Bad Request",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userName\": \"<string>\",\n    \"ownerSFSCopyModels\": [\n        {\n            \"consumerAccountOwner\": {\n                \"consumerAccountOwnerID\": \"<long>\",\n                \"consumerID\": \"<long>\",\n                \"legacyID\": \"<string>\",\n                \"consumerName\": \"<string>\",\n                \"consumerBirthDate\": \"<dateTime>\",\n                \"ownership\": \"<string>\",\n                \"type\": \"<string>\",\n                \"attachDate\": \"<dateTime>\"\n            },\n            \"sfsid\": \"<uuid>\",\n            \"copyNotes\": \"<string>\"\n        },\n        {\n            \"consumerAccountOwner\": {\n                \"consumerAccountOwnerID\": \"<long>\",\n                \"consumerID\": \"<long>\",\n                \"legacyID\": \"<string>\",\n                \"consumerName\": \"<string>\",\n                \"consumerBirthDate\": \"<dateTime>\",\n                \"ownership\": \"<string>\",\n                \"type\": \"<string>\",\n                \"attachDate\": \"<dateTime>\"\n            },\n            \"sfsid\": \"<uuid>\",\n            \"copyNotes\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/jointaccounts"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "e4da03d0-e1f5-4bec-8ca0-fd7021beb6eb",
              "name": "Server Error",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"userName\": \"<string>\",\n    \"ownerSFSCopyModels\": [\n        {\n            \"consumerAccountOwner\": {\n                \"consumerAccountOwnerID\": \"<long>\",\n                \"consumerID\": \"<long>\",\n                \"legacyID\": \"<string>\",\n                \"consumerName\": \"<string>\",\n                \"consumerBirthDate\": \"<dateTime>\",\n                \"ownership\": \"<string>\",\n                \"type\": \"<string>\",\n                \"attachDate\": \"<dateTime>\"\n            },\n            \"sfsid\": \"<uuid>\",\n            \"copyNotes\": \"<string>\"\n        },\n        {\n            \"consumerAccountOwner\": {\n                \"consumerAccountOwnerID\": \"<long>\",\n                \"consumerID\": \"<long>\",\n                \"legacyID\": \"<string>\",\n                \"consumerName\": \"<string>\",\n                \"consumerBirthDate\": \"<dateTime>\",\n                \"ownership\": \"<string>\",\n                \"type\": \"<string>\",\n                \"attachDate\": \"<dateTime>\"\n            },\n            \"sfsid\": \"<uuid>\",\n            \"copyNotes\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/jointaccounts"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            }
          ]
        },
        {
          "name": "list",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "965edd41-fbe1-4bfc-952a-6e7452d3834e",
                "exec": [
                  "try{",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = JSON.parse(responseBody);",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "console.log(query);",
                  "pm.test(\"TEST1: Consumer ID Check\", function() {",
                  "    if (data.cnsmr_id==null){",
                  "    pm.expect(JSON.stringify(jsonData[0].consumerID)).to.equal(query[5]);",
                  "    }else{",
                  "    pm.expect(jsonData[0].consumerID).to.equal(data.cnsmr_id);",
                  "    }",
                  "});",
                  "",
                  "if (data.cnsmr_id!=null){",
                  "    pm.test(\"TEST1A: Title check\", function() {",
                  "        pm.expect(JSON.stringify(jsonData[0].sfsid).toUpperCase()).to.equal(data.sfs_id);",
                  "    });",
                  "    pm.test(\"TEST1B: Total Expenditure check\", function() {",
                  "        pm.expect(jsonData[0].totalExpenditure).to.equal(JSON.stringify(data.totalExpenditure));",
                  "    });",
                  "    pm.test(\"TEST1C: Total Income check\", function() {",
                  "        pm.expect(jsonData[0].totalIncome).to.equal(data.totalIncome);",
                  "    });",
                  "    pm.test(\"TEST1D: Status Code check\", function() {",
                  "        pm.expect(jsonData[0].statusCode).to.equal(data.statusCode);",
                  "    });",
                  "    pm.test(\"TEST1E: Last Modified By User check\", function() {",
                  "        pm.expect(jsonData[0].lastModifiedByUser.split('T')[0]).to.equal(data.lastModifiedByUser);",
                  "    });",
                  "    pm.test(\"TEST1F: Last Modified Date Time check\", function() {",
                  "        pm.expect(jsonData[0].lastModifiedDateTime.split('T')[0]).to.equal(data.lastModifiedDateTime);",
                  "    });",
                  "",
                  "}",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv ({logger:console}),",
                  "schemaResponse = {",
                  "    \"items\": {",
                  "        \"required\": [",
                  "            \"sfsid\",",
                  "            \"totalExpenditure\",",
                  "            \"totalIncome\",",
                  "            \"disposableIncome\",",
                  "            \"statusCode\",",
                  "            \"status\",",
                  "            \"lastModifiedByUser\",",
                  "            \"lastModifiedDateTime\"",
                  "        ],",
                  "        \"properties\": {",
                  "            \"sfsid\": {",
                  "                \"$id\": \"#/items/properties/sfsid\",",
                  "                \"type\": [\"string\", \"null\"]",
                  "            },",
                  "            \"totalExpenditure\": {",
                  "                \"$id\": \"#/items/properties/totalExpenditure\",",
                  "                \"type\": [\"number\", \"null\"]",
                  "            },",
                  "            \"totalIncome\": {",
                  "                \"$id\": \"#/items/properties/totalIncome\",",
                  "                \"type\": [\"number\", \"null\"]",
                  "            },",
                  "            \"disposableIncome\": {",
                  "                \"$id\": \"#/items/properties/disposableIncome\",",
                  "                \"type\": [\"number\", \"null\"]",
                  "            },",
                  "            \"statusCode\": {",
                  "                \"$id\": \"#/items/properties/statusCode\",",
                  "                \"type\": [\"integer\", \"null\"]",
                  "            },",
                  "            \"status\": {",
                  "                \"$id\": \"#/items/properties/status\",",
                  "                \"type\": [\"integer\", \"null\"]",
                  "            },",
                  "            \"lastModifiedByUser\": {",
                  "                \"$id\": \"#/items/properties/lastModifiedByUser\",",
                  "                \"type\": [\"string\", \"null\"]",
                  "            },",
                  "            \"lastModifiedDateTime\": {",
                  "                \"$id\": \"#/items/properties/lastModifiedDateTime\",",
                  "                \"type\": [\"string\", \"null\"]",
                  "            }",
                  "        },",
                  "        \"$id\": \"#/items\",",
                  "        \"type\": [\"object\", \"null\"]",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": [\"array\", \"null\"],",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "//////////////TESTS",
                  "/* forLoop: ",
                  "    for(var index = 0; index < jsonData.length; index++){",
                  "     try{   ",
                  "        pm.expect(jsonData[index].sfsid).to.equal(expectedObject[index].sfsid);",
                  "        pm.expect(jsonData[index].totalExpenditure).to.equal(expectedObject[index].totalExpenditure);",
                  "        pm.expect(jsonData[index].totalIncome).to.equal(expectedObject[index].totalIncome);",
                  "        pm.expect(jsonData[index].disposableIncome).to.equal(expectedObject[index].disposableIncome);",
                  "        pm.expect(jsonData[index].statusCode).to.equal(expectedObject[index].statusCode);",
                  "        pm.expect(jsonData[index].status).to.equal(expectedObject[index].status);",
                  "        pm.expect(jsonData[index].lastModifiedByUser).to.equal(expectedObject[index].lastModifiedByUser);",
                  "        pm.expect(jsonData[index].lastModifiedDateTime).to.equal(expectedObject[index].lastModifiedDateTime);",
                  "        ",
                  "       var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + ",
                  "        \" \" + \"\\n\\nJsonFile Server data: \" + ",
                  "        \"\\n sfsid: \" + jsonData[index].sfsid + ",
                  "        \"\\n totalExpenditure: \" + jsonData[index].totalExpenditure + ",
                  "        \"\\n totalIncome: \" + jsonData[index].totalIncome + ",
                  "        \"\\n disposableIncome: \" + jsonData[index].disposableIncome + ",
                  "        \"\\n statusCode: \" + jsonData[index].statusCode + ",
                  "        \"\\n status: \" + jsonData[index].status + ",
                  "        \"\\n lastModifiedByUser: \" + jsonData[index].lastModifiedByUser + ",
                  "        \"\\n lastModifiedDateTime: \" + jsonData[index].lastModifiedDateTime + ",
                  "        \" \" + \"\\n\\n expectedData: \" + ",
                  "        \"\\n sfsid: \" + expectedObject[index].sfsid + ",
                  "        \"\\n totalExpenditure: \" + expectedObject[index].totalExpenditure + ",
                  "        \"\\n totalIncome: \" + expectedObject[index].totalIncome + ",
                  "        \"\\n disposableIncome: \" + expectedObject[index].disposableIncome + ",
                  "        \"\\n statusCode: \" + expectedObject[index].statusCode + ",
                  "        \"\\n status: \" + expectedObject[index].status + ",
                  "        \"\\n lastModifiedByUser: \" + expectedObject[index].lastModifiedByUser + ",
                  "        \"\\n lastModifiedDateTime: \" + expectedObject[index].lastModifiedDateTime;",
                  "        console.log(resultData);",
                  "       ",
                  "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                  "            ",
                  "        }catch(e){",
                  "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                  "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                  "           continue forLoop;",
                  "        } ",
                  "        ",
                  "    }",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "",
                  "*/",
                  "",
                  "pm.test(\"TEST01: Status Code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST02: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', 'Origin', 'Username', '');",
                  "});",
                  "",
                  "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"TEST04: Response Schema is valid\", function() {",
                  "  pm.expect(ajv.validate(schemaResponse, jsonData, true, false)).to.be.true;",
                  "});",
                  "",
                  "} catch (e){",
                  "    ",
                  "    //negative Tests",
                  "    ",
                  "var req = request.url;",
                  "var query = request.url.split('/');",
                  "var cid = responseBody.split(':');",
                  "pm.test(\"Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "pm.test(\"Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'text/plain; charset=utf-8', 'Vary', 'Accept-Encoding', 'X-Content-Type-Options', 'nosniff','Strict-Transport-Security','max-age=31536000; includeSubDomains','Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '', 'Set-Cookie','');",
                  "});",
                  " pm.test(\"Incorrect Consumer ID should be not found\", function () {",
                  "     pm.expect(responseCode.code).to.equal(400);",
                  "     pm.expect(responseBody).to.equal(\"Unable to find consumer with consumerID: \"+query[5]);",
                  "     pm.expect(cid[1]).to.equal(\" \"+query[5]);",
                  "});",
                  "}",
                  "",
                  "///NEGATIVE TESTS",
                  "",
                  "pm.test(\"Neg Test 01: Check if cnsmr_id is empty\", function () {",
                  "     pm.expect(\"{{cnsmr_id}}\").to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 02: Check if string is empty\", function () {",
                  "     pm.expect('name').to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 03: Check SFSID variable isn't empty\", function () {",
                  "     pm.expect('sfsid').to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "3e208c75-0326-457b-91cf-0840f4611f1f",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "\r",
                  "/*\r",
                  "SELECT DISTINCT TOP (100) S.SFSID as 'sfs_id'\r",
                  "\t  ,S.SFSStatusCode AS 'statusCode'\r",
                  "\t  ,S.OriginalConsumerID AS 'cnsmr_id'\r",
                  "\t  ,S.LastModifiedByUser AS 'lastModifiedByUser'\r",
                  "      ,S.LastModifiedDateTime AS 'lastModifiedDateTime'\r",
                  "\t  ,E.Amount AS 'totalExpenditure'\r",
                  "\t  , I.Amount AS 'totalIncome'\r",
                  "FROM dbo.SFS S\r",
                  "JOIN dbo.SFSExpenditure E ON E.SFSID = S.SFSID\r",
                  "JOIN dbo.SFSIncome I ON I.SFSID = S.SFSID\r",
                  "WHERE OriginalConsumerID IN (\r",
                  "SELECT OriginalConsumerID FROM dbo.SFS S\r",
                  "GROUP BY OriginalConsumerID\r",
                  "HAVING COUNT(*) > 1\r",
                  ")\r",
                  "ORDER BY lastModifiedDateTime DESC \r",
                  "*/"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "bc422de9-1334-497c-b869-fc57f014ea25",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "LSimpson",
                "type": "text"
              },
              {
                "key": "Bearer",
                "value": "{{OAuth_Token}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BaseURL}}/sfs/list/consumer/:consumerId",
              "host": [
                "{{BaseURL}}"
              ],
              "path": [
                "sfs",
                "list",
                "consumer",
                ":consumerId"
              ],
              "variable": [
                {
                  "key": "consumerId",
                  "value": "2048553",
                  "type": "string",
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  }
                }
              ]
            },
            "description": "Gets all SFS's for consumer ID"
          },
          "response": [
            {
              "id": "4addef58-aebf-4380-86f6-fbb65c1f54fa",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": "{{baseUrl}}/list/consumer/<long>"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<object>\""
            },
            {
              "id": "7de69a8c-e190-40d4-b9c3-ad2c7c8a4f21",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": "{{baseUrl}}/list/consumer/<long>"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"sfsid\": \"<uuid>\",\n  \"totalExpenditure\": \"<double>\",\n  \"totalIncome\": \"<double>\",\n  \"disposableIncome\": \"<double>\",\n  \"status\": \"<integer>\",\n  \"lastModifiedByUser\": \"<string>\",\n  \"lastModifiedDateTime\": \"<dateTime>\"\n },\n {\n  \"sfsid\": \"<uuid>\",\n  \"totalExpenditure\": \"<double>\",\n  \"totalIncome\": \"<double>\",\n  \"disposableIncome\": \"<double>\",\n  \"status\": \"<integer>\",\n  \"lastModifiedByUser\": \"<string>\",\n  \"lastModifiedDateTime\": \"<dateTime>\"\n }\n]"
            },
            {
              "id": "f3258127-1960-488f-88fc-c08707b1dbf3",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": "{{baseUrl}}/list/consumer/<long>"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            }
          ]
        },
        {
          "name": "updatesfs",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ae5e7e5-b04a-4091-891b-6298acec1d80",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  "\r",
                  "\r",
                  "//////////////CONSUMER DETAILS////////\r",
                  "const sfsStatusCode = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"sfsStatusCode\", sfsStatusCode);\r",
                  "console.log(\"SFS Status Code: \" + sfsStatusCode.toString());\r",
                  "\r",
                  "const numInHH = Math.floor(Math.random() * 5) + 1;\r",
                  "pm.globals.set(\"numInHH\", numInHH);\r",
                  "console.log(\"Number in Household: \" + numInHH.toString());\r",
                  "\r",
                  "const numOfChildU16 = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"numOfChildU16\", numOfChildU16);\r",
                  "console.log(\"Number of Children Under 16: \" + numOfChildU16.toString());\r",
                  "\r",
                  "const numOfChild16To18 = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"numOfChild16To18\", numOfChild16To18);\r",
                  "console.log(\"Number of Children 16 To 18: \" + numOfChild16To18);\r",
                  "\r",
                  "\r",
                  "const numOfVehicles = Math.floor(Math.random() * 2);\r",
                  "pm.globals.set(\"numOfVehicles\", numOfVehicles);\r",
                  "console.log(\"Number of Vehicles: \" + numOfVehicles.toString());\r",
                  "\r",
                  "const hhTypeCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"hhTypeCode\", hhTypeCode);\r",
                  "console.log(\"Household Type Code: \" + hhTypeCode.toString());\r",
                  "\r",
                  "const hhContCode = Math.floor(Math.random() * 4) + 1;\r",
                  "pm.globals.set(\"hhContCode\", hhContCode);\r",
                  "console.log(\"Household Contributor Code: \" + hhContCode.toString());\r",
                  "\r",
                  "const rsCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"rsCode\", rsCode);\r",
                  "console.log(\"Residence Status Code: \" + rsCode.toString());\r",
                  "\r",
                  "const propertyValue = Math.floor(Math.random() * 150000) + 1;\r",
                  "pm.globals.set(\"propertyValue\", propertyValue);\r",
                  "console.log(\"Property Value: \" + propertyValue.toString)\r",
                  "\r",
                  "const rdCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"rdCode\", rdCode);\r",
                  "console.log(\"Repaying Debt Type Code: \" + rdCode.toString());\r",
                  "\r",
                  "\r",
                  "const doYouHaveOutstandingDebt = Math.random() >=0.5;\r",
                  "pm.globals.set(\"doYouHaveOutstandingDebt\", doYouHaveOutstandingDebt);\r",
                  "console.log(\"Do You Have Any Outstanding Debt?: \" + doYouHaveOutstandingDebt.toString());\r",
                  "if (doYouHaveOutstandingDebt ===true){\r",
                  "    const outstandingDebt = Math.floor((Math.random() * 10000) + 1);\r",
                  "pm.environment.set(\"outstandingDebt\", outstandingDebt);\r",
                  "console.log(\"Outstanding Debt: \" + outstandingDebt.toString());\r",
                  "    }\r",
                  "else if (doYouHaveOutstandingDebt ===false){\r",
                  "   const outstandingDebt = null;\r",
                  "    pm.environment.set(\"outstandingDebt\", outstandingDebt);\r",
                  "    }\r",
                  "\r",
                  "\r",
                  " \r",
                  "const mortgageAmount = Math.floor(Math.random() * 150000) + 1;\r",
                  "pm.globals.set(\"mortgageAmount\", mortgageAmount);\r",
                  "console.log(\"Mortgage Amount: \" + mortgageAmount.toString());\r",
                  "\r",
                  "const pensionReceive =  Math.random() >= 0.5;\r",
                  "pm.globals.set(\"pensionReceive\", pensionReceive);\r",
                  "console.log(\"Do you receive a Pension?: \" + pensionReceive.toString());\r",
                  "\r",
                  "const doYouReceiveChildSupport = Math.random() >=0.5;\r",
                  "pm.globals.set(\"doYouReceiveChildSupport\", doYouReceiveChildSupport);\r",
                  "console.log(\"Do you receive Child Support?: \" +doYouReceiveChildSupport.toString());\r",
                  "\r",
                  "const doYouReceiveBenefits = Math.random() >=0.2;\r",
                  "pm.globals.set(\"doYouReceiveBenefits\", doYouReceiveBenefits);\r",
                  "console.log(\"Do you receive benefits?: \" +doYouReceiveBenefits.toString());\r",
                  "\r",
                  "const doesAnyoneElseProvideIncome = Math.random() >=0.1;\r",
                  "pm.globals.set(\"doesAnyoneElseProvideIncome\", doesAnyoneElseProvideIncome);\r",
                  "console.log(\"Does anyone else provide income?: \" +doesAnyoneElseProvideIncome.toString());\r",
                  "\r",
                  "\r",
                  "\r",
                  "const esCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"esCode\", esCode);\r",
                  "console.log(\"Employment Status Code: \" + esCode.toString());\r",
                  "\r",
                  "if (esCode < 4) {\r",
                  "    const isInPaidEmployment = true;\r",
                  "    pm.globals.set(\"isInPaidEmployment\", isInPaidEmployment);\r",
                  "    console.log(\"Is In Paid Employment?: \" + isInPaidEmployment.toString());\r",
                  "\r",
                  "}\r",
                  "else if (esCode > 3) {\r",
                  "    const isInPaidEmployment = false;\r",
                  "    pm.globals.set(\"isInPaidEmployment\", isInPaidEmployment);\r",
                  "    console.log(\"Is In Paid Employment?: \" + isInPaidEmployment);\r",
                  "}\r",
                  "\r",
                  "const pesCode = Math.floor(Math.random() * 8) + 1;\r",
                  "pm.globals.set(\"pesCode\", pesCode);\r",
                  "console.log(\"Partner Employment Status Code: \" + pesCode.toString());\r",
                  "\r",
                  "if (pesCode < 4) {\r",
                  "    const partnerEmploy = true;\r",
                  "    pm.globals.set(\"partnerEmploy\", partnerEmploy);\r",
                  "    console.log(\"Is In Paid Employment?: \" + partnerEmploy.toString());\r",
                  "}\r",
                  "    else if (pesCode > 3) {\r",
                  "    const partnerEmploy = false;\r",
                  "    pm.globals.set(\"partnerEmploy\", partnerEmploy);\r",
                  "    console.log(\"Is In Paid Employment?: \" + partnerEmploy.toString());\r",
                  "    }\r",
                  "\r",
                  "\r",
                  "/////////////////////////EXPENDITURES//////////////////////////////////////////\r",
                  "//setTimeout(function(){}, [1000]);\r",
                  "console.log (\"EXPENDITURES\");\r",
                  "const expenFreqCode = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"expenFreqCode\", expenFreqCode);\r",
                  "console.log(\"Expenditure Frequency code: \" + expenFreqCode.toString());\r",
                  "\r",
                  "const expenRandomAmount = Math.floor((Math.random() * 250) + 1);\r",
                  "pm.globals.set(\"expenRandomAmount\", expenRandomAmount);\r",
                  "\r",
                  "const expenGroupCode = Math.floor((Math.random() * 6 ) + 1);\r",
                  "console.log(\"Expenditure Groupcode Generated: \" + expenGroupCode.toString());\r",
                  "pm.globals.set(\"expenGroupCode\", expenGroupCode);\r",
                  "\r",
                  "var randomExpenTypeCode = 0;\r",
                  "\r",
                  "const priorityBills = [1, 2, 3, 4, 5, 6, 34, 35];\r",
                  "\r",
                  "const fixedCosts = [7, 8, 9, 10, 11, 12, 13, 14, 15];\r",
                  "\r",
                  "const travelCosts = [16, 17, 18, 19, 20, 21];\r",
                  "\r",
                  "const commsAndLeisureCosts = [22, 23, 24];\r",
                  "\r",
                  "const foodAndHousekeepingCosts = [25, 26, 28, 28, 29, 30];\r",
                  "\r",
                  "const personalCosts = [31, 32, 33];\r",
                  "\r",
                  "if (expenGroupCode ==1){\r",
                  "    randomExpenTypeCode = priorityBills[Math.floor(Math.random() * priorityBills.length)];\r",
                  "    pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "    console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (expenGroupCode ==2){\r",
                  "    randomExpenTypeCode = fixedCosts[Math.floor(Math.random() * fixedCosts.length)];\r",
                  "    pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "    console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "else if (expenGroupCode ==3){\r",
                  "     randomExpenTypeCode = travelCosts[Math.floor(Math.random() * travelCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (expenGroupCode ==4){\r",
                  "     randomExpenTypeCode = commsAndLeisureCosts[Math.floor(Math.random() * commsAndLeisureCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "    }\r",
                  "else if (expenGroupCode ==5){\r",
                  "     randomExpenTypeCode = foodAndHousekeepingCosts[Math.floor(Math.random() * foodAndHousekeepingCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "\r",
                  "    }\r",
                  "else if (expenGroupCode ==6){\r",
                  "     randomExpenTypeCode = personalCosts[Math.floor(Math.random() * personalCosts.length)];\r",
                  "     pm.globals.set(\"randomExpenTypeCode\", randomExpenTypeCode);\r",
                  "     console.log(\"Expenditure TypeCode Generated: \" + randomExpenTypeCode.toString());\r",
                  "        \r",
                  "    }\r",
                  "    \r",
                  "    \r",
                  "console.log(\"Expenditure Groupcode Generated: \" + expenGroupCode.toString());\r",
                  "\r",
                  "//////////////////////INCOMES/////////////////////////////////////////////////////////////////////\r",
                  "console.log (\"Incomes: \");\r",
                  "const incFreqCode = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"incFreqCode\", incFreqCode);\r",
                  "console.log(\"frequencyCode\" + incFreqCode.toString());\r",
                  "\r",
                  "const incFreqCodeTwo = Math.floor((Math.random() * 4) + 1);\r",
                  "pm.globals.set(\"incFreqCodeTwo\", incFreqCodeTwo);\r",
                  "console.log(\"frequencyCodeTwo\" + incFreqCodeTwo.toString());\r",
                  "\r",
                  "const incAmount = Math.floor((Math.random() * 500) + 1);\r",
                  "pm.globals.set(\"incAmount\", incAmount);\r",
                  "console.log(\"Income Amount: \" + incAmount.toString());\r",
                  "\r",
                  "\r",
                  "const incAmountTwo = Math.floor((Math.random() * 500) + 1);\r",
                  "pm.globals.set(\"incAmountTwo\", incAmountTwo);\r",
                  "console.log(\"Income AmountTwo: \" + incAmountTwo.toString());\r",
                  "\r",
                  "const ranIncGroupCode = Math.floor((Math.random() * 2 ) + 1);\r",
                  "console.log(\"Income Groupcode Generated: \" + ranIncGroupCode.toString());\r",
                  "pm.globals.set(\"ranIncGroupCode\", ranIncGroupCode);\r",
                  "\r",
                  "var incTypeCode = 0;\r",
                  "\r",
                  "const standard = [1, 2, 3, 4];\r",
                  "\r",
                  "const benefits = [5, 6, 7, 8, 9];\r",
                  "\r",
                  "if (ranIncGroupCode ==1){\r",
                  "    incTypeCode = standard[Math.floor(Math.random() * standard.length)];\r",
                  "    pm.globals.set(\"incTypeCode\", incTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + incTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (ranIncGroupCode ==2){\r",
                  "    incTypeCode = benefits[Math.floor(Math.random() * benefits.length)];\r",
                  "    pm.globals.set(\"incTypeCode\", incTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + incTypeCode.toString());\r",
                  "    }\r",
                  "const secondRanIncGroupCode = Math.floor((Math.random() * 2 ) + 1);\r",
                  "console.log(\"Income Groupcode Generated: \" + secondRanIncGroupCode.toString());\r",
                  "pm.globals.set(\"secondRanIncGroupCode\", secondRanIncGroupCode);\r",
                  "\r",
                  "var secondIncTypeCode = 0;\r",
                  "\r",
                  "const twoStandard = [1, 2, 3, 4];\r",
                  "\r",
                  "const twoBenefits = [5, 6, 7, 8, 9];\r",
                  "\r",
                  "if (secondRanIncGroupCode ==1){\r",
                  "    secondIncTypeCode = twoStandard[Math.floor(Math.random() * twoStandard.length)];\r",
                  "    pm.globals.set(\"secondIncTypeCode\", secondIncTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + secondIncTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "else if (secondRanIncGroupCode ==2){\r",
                  "    secondIncTypeCode = twoBenefits[Math.floor(Math.random() * twoBenefits.length)];\r",
                  "    pm.globals.set(\"secondIncTypeCode\", secondIncTypeCode);\r",
                  "    console.log(\"Income TypeCode Generated: \" + secondIncTypeCode.toString());\r",
                  "    }\r",
                  "\r",
                  "\r",
                  "//////////////////////////SAVINGS///////////////////////////////////////////////////////////////\r",
                  "console.log(\"Savings: \");\r",
                  "\r",
                  "const savingsAmount = Math.floor((Math.random() * 150 ) + 1);\r",
                  "pm.globals.set(\"savingsAmount\", savingsAmount);\r",
                  "console.log (\"How much do you contribute to your savings?: \" + savingsAmount.toString());\r",
                  "\r",
                  "const savingsFreqCode = Math.floor((Math.random() * 4 ) + 1);\r",
                  "pm.globals.set(\"savingsFreqCode\", savingsFreqCode);\r",
                  "console.log(\"Savings Frequency Code: \" + savingsFreqCode.toString());\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eb732fa0-95e9-443c-9733-a2dcadc5b9ad",
                "exec": [
                  "",
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "",
                  "var Ajv = require('ajv'),",
                  "ajv= new Ajv ({logger:console}),",
                  "schema = ",
                  "{",
                  " \"required\": [",
                  "        \"sfsid\",",
                  "        \"groupID\",",
                  "        \"dateReceived\",",
                  "        \"priorityBillsInArrangements\",",
                  "        \"priorityBillsUpToDate\",",
                  "        \"statusCode\",",
                  "        \"status\",",
                  "        \"sfsTypeCode\",",
                  "        \"originalSFSID\",",
                  "        \"copyType\",",
                  "        \"copyNotes\",",
                  "        \"creditors\",",
                  "        \"expenditures\",",
                  "        \"incomes\",",
                  "        \"savings\",",
                  "        \"consumerDetail\",",
                  "        \"description\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"sfsid\": {",
                  "            \"$id\": \"#/properties/sfsid\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"groupID\": {",
                  "            \"$id\": \"#/properties/groupID\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"dateReceived\": {",
                  "            \"$id\": \"#/properties/dateReceived\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"priorityBillsInArrangements\": {",
                  "            \"$id\": \"#/properties/priorityBillsInArrangements\",",
                  "            \"type\": [\"boolean\", \"null\"]",
                  "        },",
                  "        \"priorityBillsUpToDate\": {",
                  "            \"$id\": \"#/properties/priorityBillsUpToDate\",",
                  "            \"type\": [\"boolean\", \"null\"]",
                  "        },",
                  "        \"statusCode\": {",
                  "            \"$id\": \"#/properties/statusCode\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"status\": {",
                  "            \"$id\": \"#/properties/status\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"sfsTypeCode\": {",
                  "            \"$id\": \"#/properties/sfsTypeCode\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"originalSFSID\": {",
                  "            \"$id\": \"#/properties/originalSFSID\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"copyType\": {",
                  "            \"$id\": \"#/properties/copyType\",",
                  "            \"type\": [\"integer\", \"null\"]",
                  "        },",
                  "        \"copyNotes\": {",
                  "            \"$id\": \"#/properties/copyNotes\",",
                  "            \"type\": [\"string\", \"null\"]",
                  "        },",
                  "        \"creditors\": {",
                  "            \"items\": {",
                  "                \"properties\": {",
                  "                    \"sfsCreditorID\": {",
                  "                        \"$id\": \"#/properties/creditors/items/properties/sfsCreditorID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"creditorTypeCode\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/creditorTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"name\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/name\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"displayName\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/displayName\",",
                  "                         \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"totalBalance\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/totalBalance\",",
                  "                         \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"amount\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/amount\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\":{",
                  "                        \"$id\": \"#/properties/creditors/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "            },",
                  "            \"$id\": \"#/properties/creditors/items\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/creditors\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"expenditures\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"sfsExpenditureID\",",
                  "                    \"expenditureGroupCode\",",
                  "                    \"expenditureTypeCode\",",
                  "                    \"name\",",
                  "                    \"displayName\",",
                  "                    \"amount\",",
                  "                    \"frequencyCode\",",
                  "                    \"notes\",",
                  "                    \"inArrears\",",
                  "                    \"inArrangement\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"sfsExpenditureID\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/sfsExpenditureID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"expenditureGroupCode\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/expenditureGroupCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"expenditureTypeCode\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/expenditureTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"name\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/name\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"displayName\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/displayName\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"amount\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/amount\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"inArrears\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/inArrears\",",
                  "                        \"type\": [\"boolean\",\"null\"]",
                  "                    },",
                  "                    \"inArrangement\": {",
                  "                        \"$id\": \"#/properties/expenditures/items/properties/inArrangement\",",
                  "                        \"type\": [\"boolean\",\"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/expenditures/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/expenditures\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"incomes\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"sfsIncomeID\",",
                  "                    \"incomeGroupCode\",",
                  "                    \"incomeTypeCode\",",
                  "                    \"name\",",
                  "                    \"displayName\",",
                  "                    \"amount\",",
                  "                    \"frequencyCode\",",
                  "                    \"notes\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"sfsIncomeID\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/sfsIncomeID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"incomeGroupCode\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/incomeGroupCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"incomeTypeCode\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/incomeTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"name\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/name\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"displayName\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/displayName\",",
                  "                        \"type\": [\"string\",\"null\"]",
                  "                    },",
                  "                    \"amount\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/amount\",",
                  "                        \"type\": [\"number\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\": {",
                  "                        \"$id\": \"#/properties/incomes/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/incomes/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/incomes\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"savings\": {",
                  "            \"items\": {",
                  "                \"required\": [",
                  "                    \"sfsSavingID\",",
                  "                    \"savingTypeCode\",",
                  "                    \"amount\",",
                  "                    \"frequencyCode\",",
                  "                    \"notes\"",
                  "                ],",
                  "                \"properties\": {",
                  "                    \"sfsSavingID\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/sfsSavingID\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    },",
                  "                    \"savingTypeCode\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/savingTypeCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"amount\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/amount\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"frequencyCode\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/frequencyCode\",",
                  "                        \"type\": [\"integer\", \"null\"]",
                  "                    },",
                  "                    \"notes\": {",
                  "                        \"$id\": \"#/properties/savings/items/properties/notes\",",
                  "                        \"type\": [\"string\", \"null\"]",
                  "                    }",
                  "                },",
                  "                \"$id\": \"#/properties/savings/items\",",
                  "                \"type\": [\"object\", \"null\"]",
                  "            },",
                  "            \"$id\": \"#/properties/savings\",",
                  "            \"type\": [\"array\", \"null\"]",
                  "        },",
                  "        \"consumerDetail\": {",
                  "            \"required\": [",
                  "                \"sfsConsumerDetailID\",",
                  "                \"outstandingDebt\",",
                  "                \"numberInHousehold\",",
                  "                \"numberOfChildrenUnder16\",",
                  "                \"numberOfChildren16To18\",",
                  "                \"numberOfVehicles\",",
                  "                \"householdTypeCode\",",
                  "                \"householdContributorCode\",",
                  "                \"residenceStatusCode\",",
                  "                \"nameOfEmployer\",",
                  "                \"employmentStatusCode\",",
                  "                \"partnersEmploymentStatusCode\",",
                  "                \"houseContributorEmploymentStatusCode\",",
                  "                \"isInPaidEmployment\",",
                  "                \"isPartnerInPaidEmployment\",",
                  "                \"isHouseContributorInPaidEmployment\",",
                  "                \"propertyValue\",",
                  "                \"mortgageAmount\",",
                  "                \"repayingDebtTypeCode\",",
                  "                \"doYouHaveOutstandingDebt\",",
                  "                \"doYouReceivePension\",",
                  "                \"doYouReceiveChildSupport\",",
                  "                \"doYouReceiveBenefits\",",
                  "                \"otherDetails\",",
                  "                \"doesAnyoneElseProvideIncome\",",
                  "                \"doHouseContributorsHaveBenefits\",",
                  "                \"areHouseContributorsInPaydEmployment\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"sfsConsumerDetailID\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/sfsConsumerDetailID\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"outstandingDebt\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/outstandingDebt\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"numberInHousehold\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberInHousehold\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"numberOfChildrenUnder16\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfChildrenUnder16\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"numberOfChildren16To18\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfChildren16To18\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"numberOfVehicles\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/numberOfVehicles\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"householdTypeCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/householdTypeCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"householdContributorCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/householdContributorCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"residenceStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/residenceStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"nameOfEmployer\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/nameOfEmployer\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"employmentStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/employmentStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"partnersEmploymentStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/partnersEmploymentStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"houseContributorEmploymentStatusCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/houseContributorEmploymentStatusCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"isInPaidEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/isInPaidEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"isPartnerInPaidEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/isPartnerInPaidEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"isHouseContributorInPaidEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/isHouseContributorInPaidEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"propertyValue\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/propertyValue\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"mortgageAmount\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/mortgageAmount\",",
                  "                    \"type\": [\"number\", \"null\"]",
                  "                },",
                  "                \"repayingDebtTypeCode\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/repayingDebtTypeCode\",",
                  "                    \"type\": [\"integer\", \"null\"]",
                  "                },",
                  "                \"doYouHaveOutstandingDebt\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouHaveOutstandingDebt\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doYouReceivePension\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceivePension\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doYouReceiveChildSupport\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveChildSupport\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doYouReceiveBenefits\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doYouReceiveBenefits\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"otherDetails\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/otherDetails\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"doesAnyoneElseProvideIncome\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doesAnyoneElseProvideIncome\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"doHouseContributorsHaveBenefits\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/doHouseContributorsHaveBenefits\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                },",
                  "                \"areHouseContributorsInPaydEmployment\": {",
                  "                    \"$id\": \"#/properties/consumerDetail/properties/areHouseContributorsInPaydEmployment\",",
                  "                    \"type\": [\"boolean\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/consumerDetail\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        },",
                  "        \"description\": {",
                  "            \"required\": [",
                  "                \"sfsDescriptionID\",",
                  "                \"value\"",
                  "            ],",
                  "            \"properties\": {",
                  "                \"sfsDescriptionID\": {",
                  "                    \"$id\": \"#/properties/description/properties/sfsDescriptionID\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                },",
                  "                \"value\": {",
                  "                    \"$id\": \"#/properties/description/properties/value\",",
                  "                    \"type\": [\"string\", \"null\"]",
                  "                }",
                  "            },",
                  "            \"$id\": \"#/properties/description\",",
                  "            \"type\": [\"object\", \"null\"]",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  " pm.test(\"Ajv Test Schema Response: \", function() {",
                  "        pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "",
                  "pm.test(\"TEST2: Status code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST3: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST4: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "    ///NEGATIVE TESTS",
                  "",
                  "pm.test(\"Neg Test 01: Check SFSID isn't empty\", function () {",
                  "     pm.expect(\"{{SFSID}}\").to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 02: Check if string is empty\", function () {",
                  "     pm.expect('consumerDetail').to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 03: Check expenditureGroupCode isn't empty\", function () {",
                  "     pm.expect('expenditureGroupCode').to.not.be.empty;",
                  "});",
                  "pm.test(\"Incorrect field examaple\", function() {",
                  "    var expenGC = schema.required.sfsid;",
                  "    var booleanV = Boolean;",
                  "    pm.expect(expenGC).to.not.equal(booleanV);",
                  "    console.log(jsonData.toString());",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "73f9aa44-98b7-4d65-83b3-51c4051036ff",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test-User",
                "type": "text"
              },
              {
                "key": "Correlation-id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n    \"sfsid\": \"b9bce02d-93ce-419b-aecc-6270754c347b\",\r\n    \"groupID\": \"6b7da70d-0e92-4c8c-a8fa-8d058829de98\",\r\n    \"dateReceived\": null,\r\n    \"priorityBillsInArrangements\": null,\r\n    \"priorityBillsUpToDate\": null,\r\n    \"statusCode\": \"{{sfsStatusCode}}\",\r\n    \"status\": 2,\r\n    \"sfsTypeCode\": 0,\r\n    \"originalSFSID\": null,\r\n    \"copyType\": null,\r\n    \"copyNotes\": \"null\",\r\n    \"creditors\": null,\r\n    \"expenditures\": [\r\n        {\r\n            \"sfsExpenditureID\": \"bb7477c6-a5e4-4b0c-97d0-f6ec7b17e98d\",\r\n            \"expenditureGroupCode\": \"{{expenGroupCode}}\",\r\n            \"expenditureTypeCode\": \"{{randomExpenTypeCode}}\",\r\n            \"name\": null,\r\n            \"displayName\": null,\r\n            \"amount\": \"{{expenRandomAmount}}\",\r\n            \"frequencyCode\": \"{{expenFreqCode}}\",\r\n            \"notes\": \"Expen Test\",\r\n            \"inArrears\": null,\r\n            \"inArrangement\": null\r\n        }\r\n    ],\r\n    \"incomes\": [\r\n        {\r\n            \"sfsIncomeID\": \"068b7574-e2c7-4dcc-a5be-08d4e6d4a256\",\r\n            \"incomeGroupCode\": \"{{ranIncGroupCode}}\",\r\n            \"incomeTypeCode\": \"{{incTypeCode}}\",\r\n            \"name\": null,\r\n            \"displayName\": null,\r\n            \"amount\": \"{{incAmount}}\",\r\n            \"frequencyCode\": \"{{incFreqCode}}\",\r\n            \"notes\": \"Test Income\"\r\n        },\r\n        {\r\n            \"sfsIncomeID\": \"1111b1f5-0e16-43b0-a33d-1b01eb0c5917\",\r\n            \"incomeGroupCode\": \"{{secondRanIncGroupCode}}\",\r\n            \"incomeTypeCode\": \"{{secondIncTypeCode}}\",\r\n            \"name\": null,\r\n            \"displayName\": null,\r\n            \"amount\": \"{{incAmountTwo}}\",\r\n            \"frequencyCode\": \"{{incFreqCodeTwo}}\",\r\n            \"notes\": \"Test Income Two\"\r\n        }\r\n    ],\r\n    \"savings\": [\r\n        {\r\n            \"sfsSavingID\": \"d3b731e7-9614-4b2c-8471-310ef94ac974\",\r\n            \"savingTypeCode\": 1,\r\n            \"amount\": \"{{savingsAmount}}\",\r\n            \"frequencyCode\": \"{{savingsFreqCode}}\",\r\n            \"notes\": \"Test Savings Amount\"\r\n        }\r\n    ],\r\n   \"consumerDetail\": {\r\n        \"numberInHousehold\": \"{{numInHH}}\",\r\n        \"numberOfChildrenUnder16\": \"{{numOfChildU16}}\",\r\n        \"numberOfChildren16To18\": \"{{numOfChild16To18}}\",\r\n        \"numberOfVehicles\": \"{{numOfVehicles}}\",\r\n        \"householdTypeCode\": \"{{hhTypeCode}}\",\r\n        \"residenceStatusCode\": \"{{rsCode}}\",\r\n        \"employmentStatusCode\": \"{{esCode}}\",\r\n        \"repayingDebtTypeCode\": \"{{rdCode}}\",\r\n        \"outstandingDebt\": \"{{outstandingDebt}}\",\r\n        \"householdContributorCode\": \"{{hhContCode}}\",\r\n        \"nameOfEmployer\": \"TestLTD\",\r\n        \"partnersEmploymentStatusCode\": \"{{pesCode}}\",\r\n        \"houseContributorEmploymentStatusCode\": \"{{esCode}}\",\r\n        \"isInPaidEmployment\": \"{{isInPaidEmployment}}\",\r\n        \"isPartnerInPaidEmployment\": \"{{partnerEmploy}}\",\r\n        \"isHouseContributorInPaidEmployment\": \"{{isInPaidEmployment}}\",\r\n        \"propertyValue\": \"{{propertyValue}}\",\r\n        \"mortgageAmount\": \"{{mortgageAmount}}\",\r\n        \"doYouHaveOutstandingDebt\": \"{{doYouHaveOutstandingDebt}}\",\r\n        \"doYouReceivePension\": \"{{pensionReceive}}\",\r\n        \"doYouReceiveChildSupport\": \"{{doYouReceiveChildSupport}}\",\r\n        \"doYouReceiveBenefits\": \"{{doYouReceiveBenefits}}\",\r\n        \"otherDetails\": \"Test Consumer Details\",\r\n        \"doesAnyoneElseProvideIncome\": \"{{doesAnyoneElseProvideIncome}}\",\r\n        \"doHouseContributorsHaveBenefits\": \"{{doYouReceiveBenefits}}\",\r\n        \"areHouseContributorsInPaydEmployment\": \"{{isInPaidEmployment}}\"\r\n    },\r\n    \"description\": {\r\n        \"sfsDescriptionID\": \"f562a22e-8bac-4927-a69d-b6a1d38865da\",\r\n        \"value\": \"test add description\"\r\n    }\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{BaseURL}}/sfs/fulldetails",
            "description": "Updates the requested SFS in the database"
          },
          "response": [
            {
              "id": "4ee66d22-52ff-42a5-9151-0c59d2b624f7",
              "name": "Bad Request",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"<string>\",\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"priorityBillsInArrangements\": \"<boolean>\",\n    \"priorityBillsUpToDate\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"sfsType\": \"<string>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<integer>\",\n    \"copyNotes\": \"<string>\",\n    \"description\": {\n        \"sfsDescriptionID\": \"<uuid>\",\n        \"value\": \"<string>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"consumerDetail\": {\n        \"numberInHousehold\": \"<integer>\",\n        \"numberOfChildrenUnder16\": \"<integer>\",\n        \"numberOfChildren16To18\": \"<integer>\",\n        \"numberOfVehicles\": \"<integer>\",\n        \"householdTypeCode\": \"<integer>\",\n        \"residenceStatusCode\": \"<integer>\",\n        \"employmentStatusCode\": \"<integer>\",\n        \"repayingDebtTypeCode\": \"<integer>\",\n        \"sfsConsumerDetailID\": \"<uuid>\",\n        \"outstandingDebt\": \"<double>\",\n        \"householdContributorCode\": \"<integer>\",\n        \"nameOfEmployer\": \"<string>\",\n        \"partnersEmploymentStatusCode\": \"<integer>\",\n        \"houseContributorEmploymentStatusCode\": \"<integer>\",\n        \"isInPaidEmployment\": \"<boolean>\",\n        \"isPartnerInPaidEmployment\": \"<boolean>\",\n        \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n        \"propertyValue\": \"<double>\",\n        \"mortgageAmount\": \"<double>\",\n        \"doYouHaveOutstandingDebt\": \"<boolean>\",\n        \"doYouReceivePension\": \"<boolean>\",\n        \"doYouReceiveChildSupport\": \"<boolean>\",\n        \"doYouReceiveBenefits\": \"<boolean>\",\n        \"otherDetails\": \"<string>\",\n        \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n        \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n        \"areHouseContributorsInPaydEmployment\": \"<boolean>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"creditors\": [\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"expenditures\": [\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"incomes\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"savings\": [\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/updatesfs"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "6beb2f51-8ef8-4533-b365-cf06919420e7",
              "name": "Server Error",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"<string>\",\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"priorityBillsInArrangements\": \"<boolean>\",\n    \"priorityBillsUpToDate\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"sfsType\": \"<string>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<integer>\",\n    \"copyNotes\": \"<string>\",\n    \"description\": {\n        \"sfsDescriptionID\": \"<uuid>\",\n        \"value\": \"<string>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"consumerDetail\": {\n        \"numberInHousehold\": \"<integer>\",\n        \"numberOfChildrenUnder16\": \"<integer>\",\n        \"numberOfChildren16To18\": \"<integer>\",\n        \"numberOfVehicles\": \"<integer>\",\n        \"householdTypeCode\": \"<integer>\",\n        \"residenceStatusCode\": \"<integer>\",\n        \"employmentStatusCode\": \"<integer>\",\n        \"repayingDebtTypeCode\": \"<integer>\",\n        \"sfsConsumerDetailID\": \"<uuid>\",\n        \"outstandingDebt\": \"<double>\",\n        \"householdContributorCode\": \"<integer>\",\n        \"nameOfEmployer\": \"<string>\",\n        \"partnersEmploymentStatusCode\": \"<integer>\",\n        \"houseContributorEmploymentStatusCode\": \"<integer>\",\n        \"isInPaidEmployment\": \"<boolean>\",\n        \"isPartnerInPaidEmployment\": \"<boolean>\",\n        \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n        \"propertyValue\": \"<double>\",\n        \"mortgageAmount\": \"<double>\",\n        \"doYouHaveOutstandingDebt\": \"<boolean>\",\n        \"doYouReceivePension\": \"<boolean>\",\n        \"doYouReceiveChildSupport\": \"<boolean>\",\n        \"doYouReceiveBenefits\": \"<boolean>\",\n        \"otherDetails\": \"<string>\",\n        \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n        \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n        \"areHouseContributorsInPaydEmployment\": \"<boolean>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"creditors\": [\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"expenditures\": [\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"incomes\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"savings\": [\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/updatesfs"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "ec0d8b64-cac7-4281-9006-935365bda4f0",
              "name": "Success",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"<string>\",\n    \"sfsid\": \"<uuid>\",\n    \"consumerID\": \"<long>\",\n    \"dateReceived\": \"<dateTime>\",\n    \"priorityBillsInArrangements\": \"<boolean>\",\n    \"priorityBillsUpToDate\": \"<boolean>\",\n    \"status\": \"<string>\",\n    \"sfsType\": \"<string>\",\n    \"originalSFSID\": \"<uuid>\",\n    \"copyType\": \"<integer>\",\n    \"copyNotes\": \"<string>\",\n    \"description\": {\n        \"sfsDescriptionID\": \"<uuid>\",\n        \"value\": \"<string>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"consumerDetail\": {\n        \"numberInHousehold\": \"<integer>\",\n        \"numberOfChildrenUnder16\": \"<integer>\",\n        \"numberOfChildren16To18\": \"<integer>\",\n        \"numberOfVehicles\": \"<integer>\",\n        \"householdTypeCode\": \"<integer>\",\n        \"residenceStatusCode\": \"<integer>\",\n        \"employmentStatusCode\": \"<integer>\",\n        \"repayingDebtTypeCode\": \"<integer>\",\n        \"sfsConsumerDetailID\": \"<uuid>\",\n        \"outstandingDebt\": \"<double>\",\n        \"householdContributorCode\": \"<integer>\",\n        \"nameOfEmployer\": \"<string>\",\n        \"partnersEmploymentStatusCode\": \"<integer>\",\n        \"houseContributorEmploymentStatusCode\": \"<integer>\",\n        \"isInPaidEmployment\": \"<boolean>\",\n        \"isPartnerInPaidEmployment\": \"<boolean>\",\n        \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n        \"propertyValue\": \"<double>\",\n        \"mortgageAmount\": \"<double>\",\n        \"doYouHaveOutstandingDebt\": \"<boolean>\",\n        \"doYouReceivePension\": \"<boolean>\",\n        \"doYouReceiveChildSupport\": \"<boolean>\",\n        \"doYouReceiveBenefits\": \"<boolean>\",\n        \"otherDetails\": \"<string>\",\n        \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n        \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n        \"areHouseContributorsInPaydEmployment\": \"<boolean>\",\n        \"Correlation-Id\": \"<string>\",\n        \"Origin\": \"<string>\"\n    },\n    \"creditors\": [\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"totalBalance\": \"<double>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsCreditorID\": \"<uuid>\",\n            \"creditorTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"expenditures\": [\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"frequencyCode\": \"<integer>\",\n            \"notes\": \"<string>\",\n            \"sfsExpenditureID\": \"<uuid>\",\n            \"expenditureGroupCode\": \"<integer>\",\n            \"expenditureTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"amount\": \"<double>\",\n            \"inArrears\": \"<boolean>\",\n            \"inArrangement\": \"<boolean>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"incomes\": [\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsIncomeID\": \"<uuid>\",\n            \"incomeGroupCode\": \"<integer>\",\n            \"incomeTypeCode\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"savings\": [\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        },\n        {\n            \"savingTypeCode\": \"<integer>\",\n            \"amount\": \"<double>\",\n            \"frequencyCode\": \"<integer>\",\n            \"sfsSavingID\": \"<uuid>\",\n            \"notes\": \"<string>\",\n            \"Correlation-Id\": \"<string>\",\n            \"Origin\": \"<string>\"\n        }\n    ],\n    \"Correlation-Id\": \"<string>\",\n    \"Origin\": \"<string>\"\n}"
                },
                "url": "{{baseUrl}}/updatesfs"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n \"sfsid\": \"<uuid>\",\n \"consumerID\": \"<long>\",\n \"dateReceived\": \"<dateTime>\",\n \"priorityBillsInArrangements\": \"<boolean>\",\n \"priorityBillsUpToDate\": \"<boolean>\",\n \"status\": \"<string>\",\n \"sfsType\": \"<string>\",\n \"originalSFSID\": \"<uuid>\",\n \"copyType\": \"<integer>\",\n \"copyNotes\": \"<string>\",\n \"creditors\": [\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"sfsCreditorID\": \"<uuid>\",\n   \"creditorTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"totalBalance\": \"<double>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"expenditures\": [\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  },\n  {\n   \"sfsExpenditureID\": \"<uuid>\",\n   \"expenditureGroupCode\": \"<integer>\",\n   \"expenditureTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"notes\": \"<string>\",\n   \"inArrears\": \"<boolean>\",\n   \"inArrangement\": \"<boolean>\"\n  }\n ],\n \"incomes\": [\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"frequencyCode\": \"<integer>\",\n   \"sfsIncomeID\": \"<uuid>\",\n   \"incomeGroupCode\": \"<integer>\",\n   \"incomeTypeCode\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"amount\": \"<double>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"savings\": [\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  },\n  {\n   \"savingTypeCode\": \"<integer>\",\n   \"amount\": \"<double>\",\n   \"frequencyCode\": \"<integer>\",\n   \"sfsSavingID\": \"<uuid>\",\n   \"notes\": \"<string>\"\n  }\n ],\n \"consumerDetail\": {\n  \"numberInHousehold\": \"<integer>\",\n  \"numberOfChildrenUnder16\": \"<integer>\",\n  \"numberOfChildren16To18\": \"<integer>\",\n  \"numberOfVehicles\": \"<integer>\",\n  \"householdTypeCode\": \"<integer>\",\n  \"residenceStatusCode\": \"<integer>\",\n  \"employmentStatusCode\": \"<integer>\",\n  \"repayingDebtTypeCode\": \"<integer>\",\n  \"sfsConsumerDetailID\": \"<uuid>\",\n  \"outstandingDebt\": \"<double>\",\n  \"householdContributorCode\": \"<integer>\",\n  \"nameOfEmployer\": \"<string>\",\n  \"partnersEmploymentStatusCode\": \"<integer>\",\n  \"houseContributorEmploymentStatusCode\": \"<integer>\",\n  \"isInPaidEmployment\": \"<boolean>\",\n  \"isPartnerInPaidEmployment\": \"<boolean>\",\n  \"isHouseContributorInPaidEmployment\": \"<boolean>\",\n  \"propertyValue\": \"<double>\",\n  \"mortgageAmount\": \"<double>\",\n  \"doYouHaveOutstandingDebt\": \"<boolean>\",\n  \"doYouReceivePension\": \"<boolean>\",\n  \"doYouReceiveChildSupport\": \"<boolean>\",\n  \"doYouReceiveBenefits\": \"<boolean>\",\n  \"otherDetails\": \"<string>\",\n  \"doesAnyoneElseProvideIncome\": \"<boolean>\",\n  \"doHouseContributorsHaveBenefits\": \"<boolean>\",\n  \"areHouseContributorsInPaydEmployment\": \"<boolean>\"\n },\n \"description\": {\n  \"sfsDescriptionID\": \"<uuid>\",\n  \"value\": \"<string>\"\n }\n}"
            }
          ]
        },
        {
          "name": "spendingguidelines",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6b17cc85-313d-4106-bf06-603e36525660",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console}),",
                  "schema = ",
                  "{",
                  "    \"items\": {",
                  "        \"required\": [",
                  "            \"expenditureGroupCode\",",
                  "            \"firstAdultThreshold\",",
                  "            \"additionalAdultThreshold\",",
                  "            \"childUnder16Threshold\",",
                  "            \"child16to18Threshold\"",
                  "        ],",
                  "        \"properties\": {",
                  "            \"expenditureGroupCode\": {",
                  "                \"$id\": \"#/items/properties/expenditureGroupCode\",",
                  "                \"type\": \"string\"",
                  "            },",
                  "            \"firstAdultThreshold\": {",
                  "                \"$id\": \"#/items/properties/firstAdultThreshold\",",
                  "                \"type\": \"integer\"",
                  "            },",
                  "            \"additionalAdultThreshold\": {",
                  "                \"$id\": \"#/items/properties/additionalAdultThreshold\",",
                  "                \"type\": \"integer\"",
                  "            },",
                  "            \"childUnder16Threshold\": {",
                  "                \"$id\": \"#/items/properties/childUnder16Threshold\",",
                  "                \"type\": \"integer\"",
                  "            },",
                  "            \"child16to18Threshold\": {",
                  "                \"$id\": \"#/items/properties/child16to18Threshold\",",
                  "                \"type\": \"integer\"",
                  "            }",
                  "        },",
                  "        \"$id\": \"#/items\",",
                  "        \"type\": \"object\"",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"array\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"ajv test schemaResponse\", function(){",
                  "    pm.expect(ajv.validate(schema, jsonData)).to.be.true;",
                  "});",
                  "var expectedObject = ",
                  "[",
                  "    {",
                  "        \"expenditureGroupCode\": \"Priority Bills\",",
                  "        \"firstAdultThreshold\": 0.00,",
                  "        \"additionalAdultThreshold\": 0.00,",
                  "        \"childUnder16Threshold\": 0.00,",
                  "        \"child16to18Threshold\": 0.00",
                  "    },",
                  "    {",
                  "        \"expenditureGroupCode\": \"Fixed Costs\",",
                  "        \"firstAdultThreshold\": 0.00,",
                  "        \"additionalAdultThreshold\": 0.00,",
                  "        \"childUnder16Threshold\": 0.00,",
                  "        \"child16to18Threshold\": 0.00",
                  "    },",
                  "    {",
                  "        \"expenditureGroupCode\": \"Travel Costs\",",
                  "        \"firstAdultThreshold\": 0.00,",
                  "        \"additionalAdultThreshold\": 0.00,",
                  "        \"childUnder16Threshold\": 0.00,",
                  "        \"child16to18Threshold\": 0.00",
                  "    },",
                  "    {",
                  "        \"expenditureGroupCode\": \"Communications & Leisure\",",
                  "        \"firstAdultThreshold\": 206.00,",
                  "        \"additionalAdultThreshold\": 138.00,",
                  "        \"childUnder16Threshold\": 52.00,",
                  "        \"child16to18Threshold\": 101.00",
                  "    },",
                  "    {",
                  "        \"expenditureGroupCode\": \"Food & Housekeeping\",",
                  "        \"firstAdultThreshold\": 336.00,",
                  "        \"additionalAdultThreshold\": 231.00,",
                  "        \"childUnder16Threshold\": 116.00,",
                  "        \"child16to18Threshold\": 207.00",
                  "    },",
                  "    {",
                  "        \"expenditureGroupCode\": \"Personal Costs\",",
                  "        \"firstAdultThreshold\": 89.00,",
                  "        \"additionalAdultThreshold\": 61.00,",
                  "        \"childUnder16Threshold\": 30.00,",
                  "        \"child16to18Threshold\": 78.00",
                  "    }",
                  "];",
                  "//////////////////////////////////////////////////////",
                  "let expectedCode = pm.iterationData.get(\"expectedHttpCode\");",
                  "var jsonData = pm.response.json();",
                  "var query = pm.request.url.query.all();",
                  "//pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
                  "if (data.test_polarity==null || data.test_polarity==1){",
                  "",
                  "forLoop: ",
                  "    for(var index = 0; index < jsonData.length; index++){",
                  "     try{   ",
                  "        pm.expect(jsonData[index].expenditureGroupCode).to.equal(expectedObject[index].expenditureGroupCode);",
                  "        pm.expect(jsonData[index].firstAdultThreshold).to.equal(expectedObject[index].firstAdultThreshold);",
                  "        pm.expect(jsonData[index].additionalAdultThreshold).to.equal(expectedObject[index].additionalAdultThreshold);",
                  "        pm.expect(jsonData[index].childUnder16Threshold).to.equal(expectedObject[index].childUnder16Threshold);",
                  "        pm.expect(jsonData[index].child16To18Threshold).to.equal(expectedObject[index].child16To18Threshold);",
                  "        ",
                  "        var resultData = \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" +",
                  "        \"\\n\\nJsonFile Server data: \" + \"\\n expenditureGroupCode: \" + jsonData[index].expenditureGroupCode + ",
                  "        \"\\n firstAdultThreshold: \" + jsonData[index].firstAdultThreshold + \"\\n additionalAdultThreshold: \" + jsonData[index].additionalAdultThreshold + \"\\n childUnder16Threshold: \" + jsonData[index].childUnder16Threshold + ",
                  "        \"\\n child16To18Threshold: \" + jsonData[index].child16To18Threshold + ",
                  "        \"Test\" + \" \" + (index+1) + \" \" + \" data: \" + \" \" + \"\\n\\n expectedData: \" + \"\\n expenditureGroupCode: \" ",
                  "        + expectedObject[index].expenditureGroupCode + \"\\n firstAdultThreshold: \" + ",
                  "        expectedObject[index].firstAdultThreshold + \"\\n additionalAdultThreshold: \" + expectedObject[index].additionalAdultThreshold + \"\\n childUnder16Threshold: \" + expectedObject[index].childunder16Threshold + \"\\n child16To18Threshold: \" + expectedObject[index].child16To18Threshold;",
                  "        console.log(resultData);",
                  "       ",
                  "        pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body\", () => true);",
                  "            ",
                  "        }catch(e){",
                  "            pm.test(\"Test\" + \" \" + (index+1) + \" \" + \"object\" + index + \" \" + \"FAILED - Expected values are not present in response Body\", () => {throw new Error(e.message)});",
                  "           console.log(\"Test\" + \" \" + (index+1) + \" \" + \"FAILED - Expected values are not present in response Body\" + e.name + \" \" + e.message);",
                  "           continue forLoop;",
                  "        } ",
                  "        ",
                  "    }",
                  "",
                  "",
                  "}",
                  "",
                  "",
                  "",
                  "pm.test(\"TEST01: Status Code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST02: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"TEST04: Response Schema is valid\", function() {",
                  "  pm.expect(tv4.validate(jsonData, [expectedObject], true, false)).to.be.true;",
                  "});",
                  "",
                  "///NEGATIVE TESTS",
                  "",
                  "pm.test(\"Neg Test 01: Check if array is empty\", function () {",
                  "     pm.expect([expectedObject]).to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 02: Check if string is empty\", function () {",
                  "     pm.expect('name').to.not.be.empty;",
                  "});",
                  " pm.test(\"Neg Test 03: Check expenditureGroupCode isn't empty\", function () {",
                  "     pm.expect('expenditureGroupCode').to.not.be.empty;",
                  "});",
                  "pm.test(\"Incorrect field examaple\", function() {",
                  "    var expenGC = schema.items.expenditureGroupCode;",
                  "    var booleanV = Boolean;",
                  "    pm.expect(expenGC).to.not.equal(booleanV);",
                  "    console.log(jsonData.toString());",
                  "});"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5bc8b8b3-95dd-4ce3-bd91-49e8c1d6c6a3",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "3c8e24b7-3f38-44e6-b0cc-bfe2f5abf75d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test User",
                "type": "text"
              }
            ],
            "url": "{{BaseURL}}/sfs/spendingguidelines",
            "description": "Gets SFS spending guidelines"
          },
          "response": [
            {
              "id": "3c5e40a0-dc87-4229-8442-9100c61626dc",
              "name": "Bad Request",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": "{{baseUrl}}/spendingguidelines"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            },
            {
              "id": "72acf67c-206e-4b54-8bb9-a732469e3ca1",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": "{{baseUrl}}/spendingguidelines"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n {\n  \"expenditureGroupCode\": \"<string>\",\n  \"firstAdultThreshold\": \"<double>\",\n  \"additionalAdultThreshold\": \"<double>\",\n  \"childUnder16Threshold\": \"<double>\",\n  \"child16to18Threshold\": \"<double>\"\n },\n {\n  \"expenditureGroupCode\": \"<string>\",\n  \"firstAdultThreshold\": \"<double>\",\n  \"additionalAdultThreshold\": \"<double>\",\n  \"childUnder16Threshold\": \"<double>\",\n  \"child16to18Threshold\": \"<double>\"\n }\n]"
            },
            {
              "id": "8de66829-3ec0-4a7c-87be-3221004fcef2",
              "name": "Server Error",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "key": "Ocp-Apim-Subscription-Key-South",
                    "value": ""
                  }
                ],
                "url": "{{baseUrl}}/spendingguidelines"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "\"<string>\""
            }
          ]
        },
        {
          "name": "consumerResidentialStatus",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d334c08a-91bf-4bd6-939d-667ff8327e90",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "9bba3ed5-a466-40d9-b3cd-5a897148340f",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console});",
                  "var schema = {",
                  "    \"required\": [",
                  "        \"residenceStatusCode\",",
                  "        \"description\",",
                  "        \"isActive\",",
                  "        \"isDefault\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"residenceStatusCode\": {",
                  "            \"$id\": \"#/properties/residenceStatusCode\",",
                  "            \"type\": \"integer\"",
                  "        },",
                  "        \"description\": {",
                  "            \"$id\": \"#/properties/description\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"isActive\": {",
                  "            \"$id\": \"#/properties/isActive\",",
                  "            \"type\": \"boolean\"",
                  "        },",
                  "        \"isDefault\": {",
                  "            \"$id\": \"#/properties/isDefault\",",
                  "            \"type\": \"boolean\"",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "",
                  "pm.test(\"TEST01: Status Code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST02: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"TEST04: Response Schema is valid\", function() {",
                  "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                  "});",
                  "",
                  "///Negative Test",
                  "",
                  "pm.test(\"Incorrect field examaple\", function() {",
                  "    var resCode = schema.properties.residenceStatusCode;",
                  "    var wrongFormat = Boolean;",
                  "    pm.expect(resCode).to.not.equal(wrongFormat);",
                  "    console.log(jsonData.toString());",
                  "});",
                  "pm.test(\"Check if Schema Response is empty\", function () {",
                  "     pm.expect(schema).to.not.be.empty;",
                  "});",
                  " pm.test(\"Check name variable isn't empty\", function () {",
                  "     pm.expect('name').to.not.be.empty;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "c7256f9b-ec41-45ff-a392-2aa69c8f81ca",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test User",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "https://cabotapi-test.cabotcm.com/sfs/consumer/:id/residentialstatus",
              "protocol": "https",
              "host": [
                "cabotapi-test",
                "cabotcm",
                "com"
              ],
              "path": [
                "sfs",
                "consumer",
                ":id",
                "residentialstatus"
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{cnsmrlc_id}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "consumerEmploymentStatus",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce1f26ce-3544-459c-b315-6c863411a6bd",
                "exec": [
                  "var jsonData = JSON.parse(responseBody);",
                  "pm.environment.set(\"response time\",  (pm.response.responseTime)+Number(postman.getEnvironmentVariable(\"response time\")));",
                  "pm.environment.set(\"responses\",  1+Number(postman.getEnvironmentVariable(\"responses\")));",
                  "console.log(\"Average response time: \" + responseTime + \"ms\");",
                  "var Ajv = require('ajv'),",
                  "ajv = new Ajv({logger: console});",
                  "var schema =",
                  "{",
                  "    \"required\": [",
                  "        \"employmentStatusCode\",",
                  "        \"description\",",
                  "        \"isActive\",",
                  "        \"isDefault\"",
                  "    ],",
                  "    \"properties\": {",
                  "        \"employmentStatusCode\": {",
                  "            \"$id\": \"#/properties/employmentStatusCode\",",
                  "            \"type\": \"integer\"",
                  "        },",
                  "        \"description\": {",
                  "            \"$id\": \"#/properties/description\",",
                  "            \"type\": \"string\"",
                  "        },",
                  "        \"isActive\": {",
                  "            \"$id\": \"#/properties/isActive\",",
                  "            \"type\": \"boolean\"",
                  "        },",
                  "        \"isDefault\": {",
                  "            \"$id\": \"#/properties/isDefault\",",
                  "            \"type\": \"boolean\"",
                  "        }",
                  "    },",
                  "    \"$id\": \"http://example.org/root.json#\",",
                  "    \"type\": \"object\",",
                  "    \"definitions\": {},",
                  "    \"$schema\": \"http://json-schema.org/draft-07/schema#\"",
                  "};",
                  "pm.test(\"TEST01: Status Code Check\", function() {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"TEST02: Response Header Checks\", function() {",
                  "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');",
                  "});",
                  "",
                  "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function() {",
                  "    pm.expect(pm.response.responseTime).to.be.below(5000);",
                  "});",
                  "",
                  "pm.test(\"TEST04: Response Schema is valid\", function() {",
                  "  pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;",
                  "});",
                  "",
                  "///Negative Test",
                  "",
                  "pm.test(\"Incorrect Key Test\", function() {",
                  "    var employCode = schema.properties.employmentstatusCode;",
                  "    var wrongFormat = Boolean;",
                  "    pm.expect(employCode).to.not.equal(wrongFormat);",
                  "    console.log(jsonData.toString());",
                  "});",
                  "pm.test(\"Check if Schema Response isn't empty\", function () {",
                  "     pm.expect(schema).to.not.be.empty;",
                  "});",
                  " pm.test(\"Check consumerID variable isn't empty\", function () {",
                  "     pm.expect('consumerID').to.not.be.empty;",
                  "});",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "2687ffc6-794c-4f0f-a473-aea1a3657a1f",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = 'cc92e9b3-5045-4369-9105-5b085a45e247';\r",
                  "        let clientSecret = 'f3r6G:bq.2b:n:APJhUui18D=WVG_hHz';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");\r",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "16b4f9f8-02ca-4460-81a3-efbb8cfd63ff",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "Test User",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{BaseURL}}/sfs/consumer/:id/employmentstatus",
              "host": [
                "{{BaseURL}}"
              ],
              "path": [
                "sfs",
                "consumer",
                ":id",
                "employmentstatus"
              ],
              "query": [
                {
                  "key": "cnsmrlc_id",
                  "value": "{{cnsmrlc_id}}",
                  "type": "text",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{cnsmrlc_id}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "f1375192-5c15-4bf4-ab6b-514c4c7077b0"
    },
    {
      "name": "CC_Interface",
      "item": [
        {
          "name": "Get Consumer Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f7aa1889-2e19-40f5-8aa2-0a602c05eaca",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }else{\r",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                  "    }\r",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "6a80bbd7-8dd0-45e7-9a40-771c76b78d26",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webregistration/account/consumerID/:consumerID",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "webregistration",
                "account",
                "consumerID",
                ":consumerID"
              ],
              "variable": [
                {
                  "key": "consumerID",
                  "value": "123456",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get registeredUserAccount",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e6813e26-ea65-4c86-b7f8-8ea7a46e5bf6",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8bd34c3c-864a-48c4-b388-052fedc11f04",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webregistration/consumer/:consumerId/registeredUserAccount",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "webregistration",
                "consumer",
                ":consumerId",
                "registeredUserAccount"
              ],
              "variable": [
                {
                  "key": "consumerId",
                  "value": "1796758",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "check Email domain",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e5cf8610-ddce-4573-8405-036a0a8b51b7",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "995f9eed-b26d-434d-99f1-96a53da9e145",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webregistration/email/:email/checkdomain",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "webregistration",
                "email",
                ":email",
                "checkdomain"
              ],
              "variable": [
                {
                  "key": "email",
                  "value": "{{email}}",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Register User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8827834d-c2ad-4b02-b00c-21b63149220e",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "8263a66e-eb58-4302-a952-e97579c57ee7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"legacyID\": \"0001\",\r\n  \"consumerID\": 1796758,\r\n  \"email\": \"TesterLarge@cabotcm.com\",\r\n  \"telephoneNumber\": \"0344 556 0263\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/webregistration/user/instance/cc"
          },
          "response": []
        },
        {
          "name": "Set 2FA method",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "46ca4c6a-cefc-4f5b-aafb-d214173dde48",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "f30c67fe-00ec-4d7f-9f4f-e091a00bea29",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"userID\": {{userId}},\r\n  \"twoFAPreference\": {{2FA_pref}},\r\n  \"phoneNumber\": \"{{phn_num}}\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/webregistration/user/instance/twofamethod"
          },
          "response": []
        },
        {
          "name": "Update Customer Email",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b2ebd40b-794c-4ffb-ad45-b4d9db3697e9",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "510f3a7e-b762-4907-aa1b-dd42e1f29b93",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"legacyID\": \"{{legacyID}}\",\r\n  \"consumerID\": {{cnsmr_id}},\r\n  \"email\": \"{{email}}\",\r\n  \"telephoneNumber\": \"{{phn_num}}\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/webregistration/user/instance/email/cc"
          },
          "response": []
        },
        {
          "name": "Unregister User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7324403f-25a4-45db-8ca0-4a23a38e5925",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "5661a6b9-a3cd-4cc8-9743-4c8b84aa722f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"userID\": 55746\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/webregistration/user/unregister"
          },
          "response": []
        },
        {
          "name": "Resend Activation Email",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0b454a9d-e49b-4596-aed0-7103ff906aeb",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "7f487e60-65e3-4733-b37f-d02a76ade795",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"legacyID\": \"0001\",\r\n  \"consumerID\": 1796758,\r\n  \"email\": \"TesterLarge@cabotcm.com\",\r\n  \"telephoneNumber\": \"0344 556 0263\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/webregistration/user/resendactivationemail/cc"
          },
          "response": []
        },
        {
          "name": "Get legacyID Account",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6bc61762-336a-4263-8ae6-373a8cc3a0f7",
                "exec": [
                  "if (pm.environment.get(\"OAuth_Timestamp\")==null)\r",
                  "{\r",
                  "    console.log(\"OAuth timestamp null, check the environment\");\r",
                  "} else {\r",
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }\r",
                  "    //console.log(\"timestamp is\"+tokenDate);\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "        let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
                  "        let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
                  "        let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
                  "        let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default';\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "}\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "43f85224-12ae-4f25-a88c-afddae0e05e1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-South}}"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "type": "text",
                "value": "{{Ocp-Apim-Subscription-Key-West}}"
              },
              {
                "key": "Correlation-Id",
                "type": "text",
                "value": "{{$guid}}"
              },
              {
                "key": "Content-Type",
                "type": "text",
                "value": "application/json"
              },
              {
                "key": "Origin",
                "type": "text",
                "value": "Postman"
              },
              {
                "key": "Username",
                "type": "text",
                "value": "{{$randomUserName}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/webregistration/account/legacyid/:legacyID",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "webregistration",
                "account",
                "legacyid",
                ":legacyID"
              ],
              "variable": [
                {
                  "key": "legacyID",
                  "value": "122747",
                  "type": "string"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "cf20d8ed-6617-4ef3-9164-c612b14038f6"
    },
    {
      "name": "Third_Party_Authority",
      "item": [
        {
          "name": "Post TPA",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "147a1677-8c2b-47be-90d2-76f78b165d0b",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }else{\r",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                  "    }\r",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "fe392150-26cb-4408-aa3d-b82a86fbdff8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true,
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"thirdPartyAuthorityId\": 0,\r\n  \"accountReferenceNumber\": \"{{legacyID}}\",\r\n  \"customerPrimaryId\": {{cnsmr_id}},\r\n  \"customerSecondaryId\": {{SecondaryConsumerId}},\r\n  \"title\": \"Mr\",\r\n  \"name\": \"Test_Name\",\r\n  \"firstName\": \"Test_Name\",\r\n  \"surname\": \"Test_Surname\",\r\n  \"middleName\": \"T\",\r\n  \"address1\": \"Test_AL1\",\r\n  \"address2\": \"Test_AL2\",\r\n  \"address3\": \"Test_AL3\",\r\n  \"address4\": \"Test_AL4\",\r\n  \"postCode\": \"TE573ER\",\r\n  \"phoneNumber\": \"02020220202\",\r\n  \"email\": \"test@cabotcm.com\",\r\n  \"dateOfBirth\": \"2020-07-16T18:11:32.432Z\",\r\n  \"createdAt\": \"2020-07-16T18:11:32.432Z\",\r\n  \"relationship\": \"Test_relation\",\r\n  \"customerTitle\": \"{{title}}\",\r\n  \"customerFirstName\": \"{{firstname}}\",\r\n  \"customerSurname\": \"{{surname}}\",\r\n  \"customerEmail\": \"{{email}}\",\r\n  \"applyToAllAccounts\": {{applyToLinkedConsumers}},\r\n  \"cubeDocumentId\": \"string\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/thirdparty"
          },
          "response": []
        },
        {
          "name": "Put TPA",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4f1aa984-a812-4389-9c28-8f9a4a397ab2",
                "exec": [
                  "    var tokenDate = new Date(2010,1,1);\r",
                  "    var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
                  "    if(tokenTimestamp){\r",
                  "        tokenDate = Date.parse(tokenTimestamp);\r",
                  "    }else{\r",
                  "        tokenDate = Date.parse(\"2018-03-29T13:34:00.000\");\r",
                  "    }\r",
                  "    console.log(\"timestamp is: \"+tokenDate +\" new time is: \"+Date.parse(new Date()));\r",
                  "    var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
                  "    if(!expiresInTime){\r",
                  "        expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
                  "    }\r",
                  "    //console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime);\r",
                  "    if((new Date() - tokenDate) >= expiresInTime) {\r",
                  "    let tokenUrl = pm.environment.get(\"tokenUrl\");\r",
                  "    let clientId = pm.environment.get(\"clientId\");\r",
                  "    let clientSecret = pm.environment.get(\"clientSecret\");\r",
                  "    let scope = pm.environment.get(\"clientScope\");\r",
                  "\r",
                  "        let getTokenRequest = {\r",
                  "            method: 'POST',\r",
                  "            url: tokenUrl,\r",
                  "            auth: {\r",
                  "                type: \"basic\",\r",
                  "                basic: [\r",
                  "                    { key: \"username\", value: clientId },\r",
                  "                    { key: \"password\", value: clientSecret }\r",
                  "                ]\r",
                  "            },\r",
                  "            body: {\r",
                  "                mode: 'formdata',\r",
                  "                formdata: [\r",
                  "                    { key: 'grant_type', value: 'client_credentials' },\r",
                  "                    { key: 'scope', value: scope }\r",
                  "                ]\r",
                  "            }\r",
                  "        };\r",
                  "\r",
                  "        pm.sendRequest(getTokenRequest, (err, response) => {\r",
                  "            let jsonResponse = response.json(),\r",
                  "            newAccessToken = jsonResponse.access_token;\r",
                  "            //console.log({ err, jsonResponse, newAccessToken });\r",
                  "\r",
                  "            pm.environment.set('OAuth_Token', newAccessToken);\r",
                  "            pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
                  "            pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
                  "        });\r",
                  "\r",
                  "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
                  "    }\r",
                  "//console.log(\"End of Pre-req script\");"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "de4b0792-25b1-4cbc-8801-92e4524648fd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true,
            "disabledSystemHeaders": {}
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{OAuth_Token}}",
                "tokenType": "Bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Ocp-Apim-Subscription-Key-South",
                "value": "{{Ocp-Apim-Subscription-Key-South}}",
                "type": "text"
              },
              {
                "key": "Ocp-Apim-Subscription-Key-West",
                "value": "{{Ocp-Apim-Subscription-Key-West}}",
                "type": "text"
              },
              {
                "key": "Correlation-Id",
                "value": "{{$guid}}",
                "type": "text"
              },
              {
                "key": "Content-Type",
                "value": "application/json",
                "type": "text"
              },
              {
                "key": "Origin",
                "value": "Postman",
                "type": "text"
              },
              {
                "key": "Username",
                "value": "{{$randomUserName}}",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\r\n  \"thirdPartyAuthorityId\": 0,\r\n  \"accountReferenceNumber\": \"{{legacyID}}\",\r\n  \"customerPrimaryId\": {{cnsmr_id}},\r\n  \"customerSecondaryId\": {{SecondaryConsumerId}},\r\n  \"title\": \"Mr\",\r\n  \"name\": \"Test_Name\",\r\n  \"firstName\": \"Test_Name\",\r\n  \"surname\": \"Test_Surname\",\r\n  \"middleName\": \"T\",\r\n  \"address1\": \"Test_AL1\",\r\n  \"address2\": \"Test_AL2\",\r\n  \"address3\": \"Test_AL3\",\r\n  \"address4\": \"Test_AL4\",\r\n  \"postCode\": \"TE573ER\",\r\n  \"phoneNumber\": \"02020220202\",\r\n  \"email\": \"test@cabotcm.com\",\r\n  \"dateOfBirth\": \"2020-07-16T18:11:32.432Z\",\r\n  \"createdAt\": \"2020-07-16T18:11:32.432Z\",\r\n  \"relationship\": \"Test_relation\",\r\n  \"customerTitle\": \"{{title}}\",\r\n  \"customerFirstName\": \"{{firstname}}\",\r\n  \"customerSurname\": \"{{surname}}\",\r\n  \"customerEmail\": \"{{email}}\",\r\n  \"applyToAllAccounts\": {{applyToLinkedConsumers}},\r\n  \"cubeDocumentId\": \"string\"\r\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "{{baseUrl}}/thirdparty/"
          },
          "response": []
        }
      ],
      "_postman_id": "22605258-9535-461d-9e1f-731f539e9873"
    },
    {
      "name": "OAuth Renewal",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "1ad5de18-505e-4763-a0b0-adb1baaf5f05",
            "exec": [
              "let tokenUrl = 'https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token';\r",
              "let clientId = '21b8fbef-726b-47a4-8135-1bcfe2ba9a98';\r",
              "let clientSecret = ']3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2';\r",
              "let scope = 'api://81167d3d-853f-4207-80fa-3225a4927aca/.default'\r",
              "\r",
              "let getTokenRequest = {\r",
              "    method: 'POST',\r",
              "    url: tokenUrl,\r",
              "    auth: {\r",
              "        type: \"basic\",\r",
              "        basic: [\r",
              "            { key: \"username\", value: clientId },\r",
              "            { key: \"password\", value: clientSecret }\r",
              "        ]\r",
              "    },\r",
              "    body: {\r",
              "        mode: 'formdata',\r",
              "        formdata: [\r",
              "            { key: 'grant_type', value: 'client_credentials' },\r",
              "            { key: 'scope', value: scope }\r",
              "        ]\r",
              "    }\r",
              "};\r",
              "\r",
              "pm.sendRequest(getTokenRequest, (err, response) => {\r",
              "    let jsonResponse = response.json(),\r",
              "        newAccessToken = jsonResponse.access_token;\r",
              "\r",
              "    console.log({ err, jsonResponse, newAccessToken })\r",
              "\r",
              "    pm.environment.set('accessToken', newAccessToken);\r",
              "    pm.globals.set(\"OAuth_Token\", newAccessToken);\r",
              "    pm.variables.set('accessToken', newAccessToken);\r",
              "});"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "2a7b142c-f940-430e-a662-c8b4439a9a22",
            "exec": [
              "let jsonResponse = response.json();\r",
              "\r",
              "pm.environment.set('OAuth_Token', jsonResponse.access_token);\r",
              "pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
              "pm.environment.set(\"OAuth_Timestamp\", new Date());"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "87fe24fd-80db-4e1e-bd6d-75e8f16bf028",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "basic",
          "basic": {
            "password": "]3iL_sp[-PsuAvJYk3mNGyqn8ZZDOWq2",
            "username": "21b8fbef-726b-47a4-8135-1bcfe2ba9a98"
          }
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "formdata",
          "formdata": [
            {
              "key": "grant_type",
              "value": "client_credentials",
              "type": "text"
            },
            {
              "key": "scope",
              "value": "api://81167d3d-853f-4207-80fa-3225a4927aca/.default",
              "type": "text"
            }
          ],
          "options": {
            "formdata": {}
          }
        },
        "url": "https://login.microsoftonline.com/3647e9f7-0305-4ab6-b06f-4b36a3549793/oauth2/v2.0/token"
      },
      "response": []
    },
    {
      "name": "Get Search Fields",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "37ef57b8-8569-4bbc-bb51-538035bf0a1c",
            "exec": [
              "//pm.environment.set(\"OAuth_Timestamp\", null);\r",
              "console.log(pm.environment.get(\"OAuth_Expiry\"));\r",
              "console.log(pm.environment.get(\"OAuth_Timestamp\"));\r",
              "console.log(pm.environment.get(\"OAuth_Token\"));\r",
              "var noDate = 0;\r",
              "var tokenDate = new Date(2010,1,1);\r",
              "var tokenTimestamp = pm.environment.get(\"OAuth_Timestamp\");\r",
              "if(tokenTimestamp){\r",
              "    tokenDate = Date.parse(tokenTimestamp);\r",
              "}else {noDate = 1};\r",
              "    //console.log(\"timestamp is\"+tokenDate);\r",
              "var expiresInTime = pm.environment.get(\"OAuth_Expiry\");\r",
              "if(!expiresInTime){\r",
              "    expiresInTime = 3599000; // Set default expiration time to 5 minutes\r",
              "}\r",
              "//console.log(\"===remaining time is\"+(new Date() - tokenDate)+\"===expiry time is\"+expiresInTime + \"and noDate value is :\"+noDate);\r",
              "if((new Date() - tokenDate) >= expiresInTime || noDate==1) {\r",
              "    let tokenUrl = pm.environment.get(\"tokenUrl\"); \r",
              "    let clientId = pm.environment.get(\"clientId\"); \r",
              "    let clientSecret = pm.environment.get(\"clientSecret\"); \r",
              "    let scope = pm.environment.get(\"clientScope\"); \r",
              "    let getTokenRequest = {\r",
              "        method: 'POST',\r",
              "        url: tokenUrl,\r",
              "        auth: {\r",
              "           type: \"basic\",\r",
              "            basic: [\r",
              "                { key: \"username\", value: clientId },\r",
              "                { key: \"password\", value: clientSecret }\r",
              "            ]\r",
              "        },\r",
              "        body: {\r",
              "            mode: 'formdata',\r",
              "            formdata: [\r",
              "                { key: 'grant_type', value: 'client_credentials' },\r",
              "                { key: 'scope', value: scope }\r",
              "            ]\r",
              "        }\r",
              "    };\r",
              "pm.sendRequest(getTokenRequest, (err, response) => {\r",
              "    let jsonResponse = response.json(),\r",
              "        newAccessToken = jsonResponse.access_token;\r",
              "        //console.log({ err, jsonResponse, newAccessToken });\r",
              "        pm.environment.set('OAuth_Token', newAccessToken);\r",
              "        pm.environment.set('OAuth_Expiry', jsonResponse.ext_expires_in*1000);\r",
              "        pm.environment.set(\"OAuth_Timestamp\", new Date());\r",
              "    });\r",
              "        //console.log(pm.environment.get(\"OAuth_Token\"));\r",
              "}\r",
              "//console.log(\"End of Pre-req script\");\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "9127a33b-f2b6-44fc-b624-fdf84465d608",
            "exec": [
              "var jsonData = JSON.parse(responseBody);\r",
              "pm.environment.set(\"response time\", (pm.response.responseTime) + Number(postman.getEnvironmentVariable(\"response time\")));\r",
              "pm.environment.set(\"responses\", 1 + Number(postman.getEnvironmentVariable(\"responses\")));\r",
              "console.log(\"Average response time: \" + responseTime + \"ms\");\r",
              "var Ajv = require('ajv'),\r",
              "    ajv = new Ajv({ logger: console }),\r",
              "    schema =\r",
              "    {\r",
              "        \"items\": {\r",
              "            \"required\": [\r",
              "                \"id\",\r",
              "                \"searchBy\"\r",
              "            ],\r",
              "            \"properties\": {\r",
              "                \"id\": {\r",
              "                    \"$id\": \"#/items/properties/id\",\r",
              "                    \"type\": \"integer\"\r",
              "                },\r",
              "                \"searchBy\": {\r",
              "                    \"$id\": \"#/items/properties/searchBy\",\r",
              "                    \"type\": \"string\"\r",
              "                }\r",
              "            },\r",
              "            \"$id\": \"#/items\",\r",
              "            \"type\": \"object\"\r",
              "        },\r",
              "        \"$id\": \"http://example.org/root.json#\",\r",
              "        \"type\": \"array\",\r",
              "        \"definitions\": {},\r",
              "        \"$schema\": \"http://json-schema.org/draft-07/schema#\"\r",
              "    };\r",
              "\r",
              "\r",
              "var expectedObject =\r",
              "    [\r",
              "        {\r",
              "            \"id\": 1,\r",
              "            \"searchBy\": \"Creditor Account Number\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 2,\r",
              "            \"searchBy\": \"Date of Birth\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 3,\r",
              "            \"searchBy\": \"Email Address\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 4,\r",
              "            \"searchBy\": \"First Line of Address\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 5,\r",
              "            \"searchBy\": \"First Name\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 6,\r",
              "            \"searchBy\": \"Historical First Line of Address\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 7,\r",
              "            \"searchBy\": \"Last Name\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 8,\r",
              "            \"searchBy\": \"Legacy ID\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 9,\r",
              "            \"searchBy\": \"Mobile No\"\r",
              "        },\r",
              "        {\r",
              "            \"id\": 10,\r",
              "            \"searchBy\": \"Post Code\"\r",
              "        }\r",
              "    ];\r",
              "\r",
              "\r",
              "forLoop:\r",
              "for (var index = 0; index < jsonData.length; index++) {\r",
              "    try {\r",
              "        pm.expect(jsonData[index].id).to.equal(expectedObject[index].id);\r",
              "        pm.expect(jsonData[index].searchBy).to.equal(expectedObject[index].searchBy);\r",
              "\r",
              "        pm.test(\"Test\" + \" \" + (index + 1) + \" \" + \"object\" + \" \" + index + \" \" + \"PASSED - Expected values are present in response Body!\", () => true);\r",
              "\r",
              "    } catch (e) {\r",
              "        pm.test(\"Test\" + \" \" + (index + 1) + \" \" + \"object\" + \" \" + index + \" \" +\r",
              "            \"FAILED - Expected values are not present in response Body!\", () => { throw new Error(e.message) });\r",
              "        console.log(\"Test\" + \" \" + (index + 1) + \" \" + \"object\" + \" \" + index + \" \" +\r",
              "            \"FAILED - Expected values are not present in response Body!\" + \"\\n\\n\" + e.name + \":\" + \" \" + \"\\n\" + e.message);\r",
              "        continue forLoop;\r",
              "    }\r",
              "}\r",
              "pm.test(\"TEST01: Status Code Check\", function () {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test(\"TEST02: Response Header Checks\", function () {\r",
              "    pm.response.to.have.header('Content-Type', 'application/json; charset=utf-8', 'Vary', 'Accept-Encoding', 'Content-Encoding', 'gzip', 'Date', '', 'Request-Context', '');\r",
              "});\r",
              "\r",
              "pm.test(\"TEST03: Response time Check: Response Time - \" + (pm.response.responseTime) + \"ms\", function () {\r",
              "    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
              "});\r",
              "pm.test(\"TEST04: Response Schema is valid\", function () {\r",
              "    pm.expect(ajv.validate(schema, jsonData, true, false)).to.be.true;\r",
              "});\r",
              "///NEGATIVE TESTS\r",
              "\r",
              "pm.test(\"Neg Test 01: Check if array is empty\", function () {\r",
              "    pm.expect(schema).to.not.be.empty;\r",
              "});\r",
              "pm.test(\"Neg Test 02: Check if string is empty\", function () {\r",
              "    pm.expect('id').to.not.be.empty;\r",
              "});\r",
              "pm.test(\"Neg Test 03: Check searchBy isn't empty\", function () {\r",
              "    pm.expect('searchBy').to.not.be.empty;\r",
              "});\r",
              "pm.test(\"Incorrect field examaple\", function () {\r",
              "    var pID = schema.items.id;\r",
              "    var booleanV = Boolean;\r",
              "    pm.expect(pID).to.not.equal(booleanV);\r",
              "    console.log(jsonData.toString());\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "_postman_id": "3fded0d3-3799-419f-ac85-647436f2978d",
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "oauth2",
          "oauth2": {
            "accessToken": "{{OAuth_Token}}",
            "tokenType": "Bearer",
            "addTokenTo": "header"
          }
        },
        "method": "GET",
        "header": [
          {
            "key": "Ocp-Apim-Subscription-Key-South",
            "value": "{{Ocp-Apim-Subscription-Key-South}}"
          },
          {
            "key": "Username",
            "value": "{{$randomUserName}}",
            "type": "text"
          },
          {
            "key": "Content-Type",
            "value": "application/json",
            "type": "text"
          },
          {
            "key": "Origin",
            "value": "Postman",
            "type": "text"
          },
          {
            "key": "Correlation-Id",
            "value": "{{$guid}}",
            "type": "text"
          },
          {
            "key": "Ocp-Apim-Subscription-Key-West",
            "value": "{{Ocp-Apim-Subscription-Key-West}}",
            "type": "text"
          }
        ],
        "url": "{{baseUrl}}/advancesearch/search/fields"
      },
      "response": [
        {
          "id": "9aa2a022-e447-47a0-8eb8-417c544edacb",
          "name": "Success",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/search/fields"
          },
          "status": "OK",
          "code": 200,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "[\n {\n  \"id\": \"<integer>\",\n  \"searchBy\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"searchBy\": \"<string>\"\n }\n]"
        },
        {
          "id": "f0edba49-8cdf-4ae5-b501-660becf97d65",
          "name": "Bad Request",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/search/fields"
          },
          "status": "Bad Request",
          "code": 400,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "\"<string>\""
        },
        {
          "id": "fb5b3035-10e4-44f7-b9b2-1c5f3d5b4ce3",
          "name": "Server Error",
          "originalRequest": {
            "method": "GET",
            "header": [],
            "url": "{{baseUrl}}/search/fields"
          },
          "status": "Internal Server Error",
          "code": 500,
          "_postman_previewlanguage": "json",
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            }
          ],
          "cookie": [],
          "responseTime": null,
          "body": "\"<object>\""
        }
      ]
    }
  ]
}